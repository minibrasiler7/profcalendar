#!/usr/bin/env python3
"""
Script pour nettoyer tous les fichiers associ√©s aux classes
"""

import os
import shutil
from app import app
from extensions import db
from models.student import ClassFile
from models.classroom import Classroom

def clean_class_files():
    """Supprimer tous les fichiers et dossiers associ√©s aux classes"""
    
    with app.app_context():
        print("üßπ D√©but du nettoyage des fichiers de classe...")
        
        # 1. R√©cup√©rer tous les fichiers de classe
        class_files = ClassFile.query.all()
        total_files = len(class_files)
        print(f"\nüìã Nombre total de fichiers de classe trouv√©s: {total_files}")
        
        if total_files == 0:
            print("‚úÖ Aucun fichier de classe √† supprimer.")
            return
        
        # Demander confirmation
        response = input(f"\n‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer {total_files} fichier(s) de classe? (oui/non): ")
        if response.lower() != 'oui':
            print("‚ùå Nettoyage annul√©.")
            return
        
        # 2. Supprimer les fichiers physiques
        deleted_files = 0
        errors = 0
        
        # Chemin du dossier class_files
        class_files_dir = os.path.join(app.root_path, 'uploads', 'class_files')
        
        print(f"\nüóëÔ∏è  Suppression des fichiers physiques...")
        
        for class_file in class_files:
            try:
                # Construire le chemin du fichier
                file_path = os.path.join(class_files_dir, str(class_file.classroom_id), class_file.filename)
                
                # Supprimer le fichier s'il existe
                if os.path.exists(file_path):
                    os.remove(file_path)
                    deleted_files += 1
                    print(f"   ‚úì Supprim√©: {class_file.original_filename} (classe {class_file.classroom_id})")
                else:
                    print(f"   ‚ö†Ô∏è  Fichier non trouv√©: {class_file.original_filename}")
                
            except Exception as e:
                errors += 1
                print(f"   ‚ùå Erreur lors de la suppression de {class_file.original_filename}: {e}")
        
        # 3. Supprimer les entr√©es de la base de donn√©es
        print(f"\nüíæ Suppression des entr√©es de la base de donn√©es...")
        
        try:
            # Supprimer tous les ClassFile
            db.session.query(ClassFile).delete()
            db.session.commit()
            print(f"   ‚úì {total_files} entr√©es supprim√©es de la base de donn√©es")
        except Exception as e:
            db.session.rollback()
            print(f"   ‚ùå Erreur lors de la suppression en base de donn√©es: {e}")
            return
        
        # 4. Nettoyer les dossiers vides
        print(f"\nüìÅ Nettoyage des dossiers vides...")
        
        if os.path.exists(class_files_dir):
            # Parcourir tous les sous-dossiers
            for classroom_id in os.listdir(class_files_dir):
                classroom_dir = os.path.join(class_files_dir, classroom_id)
                
                if os.path.isdir(classroom_dir):
                    # V√©rifier si le dossier est vide
                    if not os.listdir(classroom_dir):
                        try:
                            os.rmdir(classroom_dir)
                            print(f"   ‚úì Dossier vide supprim√©: {classroom_dir}")
                        except Exception as e:
                            print(f"   ‚ùå Erreur lors de la suppression du dossier {classroom_dir}: {e}")
        
        # 5. Afficher le r√©sum√©
        print(f"\nüìä R√©sum√© du nettoyage:")
        print(f"   - Fichiers physiques supprim√©s: {deleted_files}")
        print(f"   - Entr√©es de base de donn√©es supprim√©es: {total_files}")
        print(f"   - Erreurs rencontr√©es: {errors}")
        
        print(f"\n‚úÖ Nettoyage termin√©!")
        
        # Option pour supprimer compl√®tement le dossier class_files
        response = input(f"\nüóëÔ∏è  Voulez-vous supprimer compl√®tement le dossier 'class_files'? (oui/non): ")
        if response.lower() == 'oui':
            try:
                if os.path.exists(class_files_dir):
                    shutil.rmtree(class_files_dir)
                    print(f"‚úÖ Dossier 'class_files' supprim√© compl√®tement.")
            except Exception as e:
                print(f"‚ùå Erreur lors de la suppression du dossier: {e}")

if __name__ == "__main__":
    print("=" * 60)
    print("NETTOYAGE DES FICHIERS DE CLASSE")
    print("=" * 60)
    
    clean_class_files()