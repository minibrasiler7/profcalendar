#!/usr/bin/env python3
"""
Debug des routes pour identifier les probl√®mes
"""

def check_routes():
    print("üîç V√©rification des routes...")
    
    # Lire le fichier app.py pour voir si les routes sont bien enregistr√©es
    try:
        with open('app.py', 'r') as f:
            content = f.read()
            if 'class_files_bp' in content:
                print("‚úÖ Blueprint class_files_bp trouv√© dans app.py")
            else:
                print("‚ùå Blueprint class_files_bp MANQUANT dans app.py")
                
        print("\nüìã Routes qui devraient √™tre disponibles:")
        print("   POST /api/class-files/copy-file")
        print("   POST /api/class-files/copy-folder")
        print("   GET  /api/class-files/list/<class_id>")
        print("   DELETE /api/class-files/delete/<file_id>")
        
        # V√©rifier si le fichier routes/class_files.py existe
        try:
            with open('routes/class_files.py', 'r') as f:
                print("‚úÖ Fichier routes/class_files.py existe")
        except FileNotFoundError:
            print("‚ùå Fichier routes/class_files.py MANQUANT")
            
        # V√©rifier si le mod√®le existe
        try:
            with open('models/class_file.py', 'r') as f:
                print("‚úÖ Fichier models/class_file.py existe")
        except FileNotFoundError:
            print("‚ùå Fichier models/class_file.py MANQUANT")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def check_javascript():
    print("\nüîç V√©rification du JavaScript...")
    
    try:
        # V√©rifier que les nouvelles fonctions existent
        with open('static/js/file_manager.js', 'r') as f:
            content = f.read()
            if 'copyFileToClassNew' in content:
                print("‚úÖ Fonction copyFileToClassNew trouv√©e")
            else:
                print("‚ùå Fonction copyFileToClassNew MANQUANTE")
                
            if '/api/class-files/copy-file' in content:
                print("‚úÖ Appel API vers /api/class-files/copy-file trouv√©")
            else:
                print("‚ùå Appel API vers /api/class-files/copy-file MANQUANT")
                
        with open('static/js/class_files.js', 'r') as f:
            content = f.read()
            if 'window.classFileManager' in content:
                print("‚úÖ Exposition globale window.classFileManager trouv√©e")
            else:
                print("‚ùå Exposition globale window.classFileManager MANQUANTE")
                
    except Exception as e:
        print(f"‚ùå Erreur JavaScript: {e}")

def suggest_debugging():
    print("\nüîß Pour d√©boguer:")
    print("1. Ouvrez les outils de d√©veloppement (F12)")
    print("2. Allez dans l'onglet Network")
    print("3. Faites un drag & drop d'un fichier sur une classe")
    print("4. V√©rifiez si vous voyez des requ√™tes vers /api/class-files/")
    print("5. Si oui, regardez la r√©ponse (200 OK ou erreur)")
    print("6. Si non, c'est que le JavaScript ne s'ex√©cute pas")
    
    print("\nüêõ Erreurs possibles:")
    print("- Routes non enregistr√©es dans app.py")
    print("- Tables pas cr√©√©es dans la base de donn√©es")
    print("- Erreur JavaScript (v√©rifiez la console)")
    print("- Conflit entre ancien et nouveau syst√®me")

if __name__ == "__main__":
    print("=" * 60)
    print("DEBUG DU SYST√àME DE COPIE DE FICHIERS")
    print("=" * 60)
    
    check_routes()
    check_javascript()
    suggest_debugging()