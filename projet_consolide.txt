================================================================================
CONSOLIDATION DU PROJET: profcalendar
Généré depuis: /Users/loicstrauch/PycharmProjects/profcalendar
Extensions incluses: .py, .html, .css, .js, .jsx, .ts, .tsx, .vue, .php, .java, .cpp, .c, .h, .json, .xml, .sql, .md, .txt, .yml, .yaml
================================================================================


================================================================================
FICHIER: add_checklist_column.py
LOCALISATION: add_checklist_column.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/add_checklist_column.py
================================================================================

#!/usr/bin/env python
"""
Script pour ajouter la colonne checklist_states directement dans SQLite
"""

from app import create_app, db
from sqlalchemy import text
import sys

app = create_app()

def check_column_exists():
    """Vérifie si la colonne existe déjà"""
    with app.app_context():
        result = db.session.execute(text(
            "SELECT COUNT(*) FROM pragma_table_info('plannings') WHERE name='checklist_states'"
        ))
        return result.scalar() > 0

def add_checklist_column():
    """Ajoute la colonne checklist_states à la table plannings"""
    with app.app_context():
        try:
            # Vérifier si la colonne existe déjà
            if check_column_exists():
                print("✓ La colonne 'checklist_states' existe déjà dans la table 'plannings'")
                return True

            # Ajouter la colonne
            print("Ajout de la colonne 'checklist_states'...")
            db.session.execute(text(
                "ALTER TABLE plannings ADD COLUMN checklist_states TEXT"
            ))
            db.session.commit()
            print("✓ Colonne 'checklist_states' ajoutée avec succès !")
            return True

        except Exception as e:
            print(f"✗ Erreur lors de l'ajout de la colonne : {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("=== Ajout de la colonne checklist_states ===\n")

    # Afficher le chemin de la base de données
    with app.app_context():
        db_path = app.config.get('SQLALCHEMY_DATABASE_URI', '').replace('sqlite:///', '')
        print(f"Base de données : {db_path}\n")

    # Ajouter la colonne
    if add_checklist_column():
        print("\n✅ Opération terminée avec succès !")
    else:
        print("\n❌ L'opération a échoué.")
        sys.exit(1)



================================================================================
FICHIER: app.py
LOCALISATION: app.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/app.py
================================================================================

from flask import Flask
from extensions import db, login_manager, migrate
from config import Config
import os

def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Initialiser les extensions avec l'app
    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)

    # Configuration du login manager
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Veuillez vous connecter pour accéder à cette page.'

    # Activer les logs SQLAlchemy en mode debug
    if app.debug:
        import logging
        logging.basicConfig()
        logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

    # Gestion des erreurs pour le débogage
    @app.errorhandler(Exception)
    def handle_exception(e):
        if app.debug:
            # En mode debug, afficher l'erreur complète
            import traceback
            return f"<pre>{traceback.format_exc()}</pre>", 500
        # En production, afficher une page d'erreur générique
        return "Une erreur est survenue", 500

    # Créer les dossiers nécessaires
    os.makedirs(os.path.join(app.root_path, 'database'), exist_ok=True)

    # Importer et enregistrer les blueprints
    from routes.auth import auth_bp
    from routes.setup import setup_bp
    from routes.schedule import schedule_bp
    from routes.planning import planning_bp
    from routes.file_manager import file_manager_bp

    app.register_blueprint(auth_bp)
    app.register_blueprint(setup_bp)
    app.register_blueprint(schedule_bp)
    app.register_blueprint(planning_bp)
    app.register_blueprint(file_manager_bp)

    # Route d'accueil
    @app.route('/')
    def index():
        from flask_login import current_user
        from flask import redirect, url_for

        if current_user.is_authenticated:
            # Étape 1 : Vérifier la configuration de base
            if not current_user.school_year_start or not current_user.day_start_time:
                return redirect(url_for('setup.initial_setup'))

            # Étape 2 : Vérifier qu'il y a au moins une classe
            if current_user.classrooms.count() == 0:
                return redirect(url_for('setup.manage_classrooms'))

            # Étape 3 : Vérifier que la configuration de base est marquée comme complète
            if not current_user.setup_completed:
                # Si les vacances/pauses ne sont pas encore configurées, aller aux vacances
                if current_user.holidays.count() == 0:
                    return redirect(url_for('setup.manage_holidays'))
                elif current_user.breaks.count() == 0:
                    return redirect(url_for('setup.manage_breaks'))
                else:
                    # Si tout est configuré mais pas validé, forcer la validation
                    return redirect(url_for('setup.validate_setup'))

            # Étape 4 : Vérifier l'horaire type
            if not current_user.schedule_completed:
                return redirect(url_for('schedule.weekly_schedule'))

            # Si tout est complété, aller au tableau de bord
            return redirect(url_for('planning.dashboard'))

        # Si pas connecté, aller à la page de connexion
        return redirect(url_for('auth.login'))

    # Route pour le favicon (éviter l'erreur 404)
    @app.route('/favicon.ico')
    def favicon():
        from flask import send_from_directory
        import os
        # Retourner une réponse vide si pas de favicon
        return '', 204

    # Créer les tables si elles n'existent pas
    os.makedirs(os.path.join(app.root_path, 'uploads', 'files'), exist_ok=True)
    os.makedirs(os.path.join(app.root_path, 'uploads', 'thumbnails'), exist_ok=True)
    with app.app_context():
        db.create_all()

    # Context processor pour rendre les informations de cours disponibles globalement
    @app.context_processor
    def inject_lesson_info():
        from flask_login import current_user

        if current_user.is_authenticated and hasattr(current_user, 'setup_completed') and current_user.setup_completed:
            try:
                from routes.planning import get_current_or_next_lesson
                lesson, is_current, lesson_date = get_current_or_next_lesson(current_user)

                return {
                    'global_current_lesson': lesson if is_current else None,
                    'global_next_lesson': lesson if not is_current else None,
                    'global_has_current_lesson': is_current
                }
            except:
                # En cas d'erreur, retourner des valeurs par défaut
                return {
                    'global_current_lesson': None,
                    'global_next_lesson': None,
                    'global_has_current_lesson': False
                }

        return {
            'global_current_lesson': None,
            'global_next_lesson': None,
            'global_has_current_lesson': False
        }

    # Filtres Jinja2 personnalisés
    @app.template_filter('format_date')
    def format_date(date):
        if date:
            months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
                     'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
            return f"{date.day} {months[date.month-1]} {date.year}"
        return ''

    @app.template_filter('format_month_year')
    def format_month_year(date):
        if date:
            months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
                     'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
            return f"{months[date.month-1]} {date.year}"
        return ''

    # Ajoutez cette fonction dans la fonction create_app après les filtres Jinja2 existants (vers la ligne 140)

    # Fonction helper pour rendre les checkboxes dans les plannings
    # Remplacer la fonction render_planning_with_checkboxes dans app.py (vers la ligne 145)

    @app.template_global()
    def render_planning_with_checkboxes(planning):
        """Rendre la description d'une planification avec les checkboxes"""
        if not planning or not planning.description:
            return 'Aucune description'

        import re
        lines = planning.description.split('\n')
        html = []
        checkbox_index = 0
        states = planning.get_checklist_states()

        for line in lines:
            # Vérifier si la ligne contient une checkbox
            checkbox_match = re.match(r'^(\s*)\[([ x])\]\s*(.*)$', line, re.IGNORECASE)

            if checkbox_match:
                indent = checkbox_match.group(1)
                content = checkbox_match.group(3)

                # Récupérer l'état de la checkbox depuis les données sauvegardées
                is_checked = states.get(str(checkbox_index), False)

                html.append(f'''<div class="planning-checklist-item" style="margin-left: {len(indent) * 20}px;">
                    <input type="checkbox" 
                           class="planning-checkbox" 
                           id="checkbox-{checkbox_index}" 
                           data-index="{checkbox_index}"
                           {'checked' if is_checked else ''}
                           onchange="updateCheckboxState({checkbox_index}, this.checked)">
                    <label for="checkbox-{checkbox_index}" class="planning-checkbox-label">{content}</label>
                </div>''')

                checkbox_index += 1
            else:
                # Ligne normale - échapper le HTML
                escaped_line = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;').replace("'", '&#039;')
                html.append(f'<div>{escaped_line}</div>')

        return '\n'.join(html)

    @app.template_filter('format_date_full')
    def format_date_full(date):
        if date:
            months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
                     'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
            return f"{date.day} {months[date.month-1]}"
        return ''

    return app



================================================================================
FICHIER: config.py
LOCALISATION: config.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/config.py
================================================================================

import os
from datetime import timedelta

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    # Configuration générale
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'

    # Configuration base de données
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'database', 'teacher_planner.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Configuration session
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'

    # Configuration WTForms
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = None







































































================================================================================
FICHIER: consolidateur.py
LOCALISATION: consolidateur.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/consolidateur.py
================================================================================

import os
from pathlib import Path

def consolidate_project(project_path=".", output_file="projet_consolide.txt", extensions=None):
    """
    Consolide tous les fichiers de code d'un projet en un seul fichier.

    Args:
        project_path (str): Chemin vers le projet (par défaut: dossier actuel)
        output_file (str): Nom du fichier de sortie
        extensions (list): Extensions à inclure (par défaut: py, html, css, js)
    """

    if extensions is None:
        extensions = ['.py', '.html', '.css', '.js', '.jsx', '.ts', '.tsx', '.vue']

    # Dossiers à ignorer
    ignore_dirs = {
        '__pycache__', '.git', 'node_modules', 'venv', '.venv', 'env', '.env',
        'dist', 'build', '.idea', '.vscode', 'htmlcov', '.pytest_cache',
        '.mypy_cache', 'logs', 'tmp', 'temp'
    }

    project_path = Path(project_path).resolve()

    with open(output_file, 'w', encoding='utf-8') as output:
        # En-tête du fichier
        output.write("=" * 80 + "\n")
        output.write(f"CONSOLIDATION DU PROJET: {project_path.name}\n")
        output.write(f"Généré depuis: {project_path}\n")
        output.write(f"Extensions incluses: {', '.join(extensions)}\n")
        output.write("=" * 80 + "\n\n")

        # Compteurs
        total_files = 0
        total_lines = 0

        # Parcourir tous les fichiers
        for root, dirs, files in os.walk(project_path):
            # Filtrer les dossiers à ignorer
            dirs[:] = [d for d in dirs if d not in ignore_dirs and not d.startswith('.')]

            root_path = Path(root)

            for file in sorted(files):
                file_path = root_path / file

                # Vérifier l'extension
                if file_path.suffix.lower() in extensions:
                    try:
                        # Calculer le chemin relatif
                        relative_path = file_path.relative_to(project_path)

                        # En-tête du fichier
                        output.write("\n" + "=" * 80 + "\n")
                        output.write(f"FICHIER: {file}\n")
                        output.write(f"LOCALISATION: {relative_path}\n")
                        output.write(f"CHEMIN COMPLET: {file_path}\n")
                        output.write("=" * 80 + "\n\n")

                        # Lire et écrire le contenu
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                            output.write(content)

                            # Compter les lignes
                            lines_count = len(content.splitlines())
                            total_lines += lines_count

                        output.write("\n\n")
                        total_files += 1

                        print(f"✓ Ajouté: {relative_path} ({lines_count} lignes)")

                    except Exception as e:
                        print(f"✗ Erreur avec {file_path}: {e}")
                        output.write(f"[ERREUR DE LECTURE: {e}]\n\n")

        # Résumé final
        output.write("\n" + "=" * 80 + "\n")
        output.write("RÉSUMÉ DE LA CONSOLIDATION\n")
        output.write("=" * 80 + "\n")
        output.write(f"Fichiers traités: {total_files}\n")
        output.write(f"Lignes totales: {total_lines}\n")
        output.write(f"Extensions incluses: {', '.join(extensions)}\n")
        output.write("=" * 80 + "\n")

    print(f"\n🎉 Consolidation terminée !")
    print(f"📁 Fichiers traités: {total_files}")
    print(f"📝 Lignes totales: {total_lines}")
    print(f"💾 Fichier de sortie: {output_file}")

def main():
    """Fonction principale avec options personnalisables"""

    # Configuration personnalisable
    projet_path = "."  # Changez pour le chemin de votre projet
    fichier_sortie = "projet_consolide.txt"

    # Extensions à inclure (ajoutez/supprimez selon vos besoins)
    extensions_incluses = [
        '.py',      # Python
        '.html',    # HTML
        '.css',     # CSS
        '.js',      # JavaScript
        '.jsx',     # React JSX
        '.ts',      # TypeScript
        '.tsx',     # TypeScript React
        '.vue',     # Vue.js
        '.php',     # PHP
        '.java',    # Java
        '.cpp',     # C++
        '.c',       # C
        '.h',       # Headers C/C++
        '.json',    # JSON
        '.xml',     # XML
        '.sql',     # SQL
        '.md',      # Markdown
        '.txt',     # Texte
        '.yml',     # YAML
        '.yaml'     # YAML
    ]

    print("🚀 Démarrage de la consolidation du projet...")
    print(f"📂 Dossier source: {os.path.abspath(projet_path)}")
    print(f"📄 Fichier de sortie: {fichier_sortie}")

    consolidate_project(
        project_path=projet_path,
        output_file=fichier_sortie,
        extensions=extensions_incluses
    )

if __name__ == "__main__":
    main()



================================================================================
FICHIER: debug_holiday.py
LOCALISATION: debug_holiday.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/debug_holiday.py
================================================================================

"""
Script pour vérifier les vacances et le comptage des semaines
"""

from app import create_app, db
from models.user import User, Holiday
from datetime import datetime, timedelta

app = create_app()

def get_week_dates(week_date):
    """Retourne les dates du lundi au vendredi de la semaine"""
    days_since_monday = week_date.weekday()
    monday = week_date - timedelta(days=days_since_monday)

    week_dates = []
    for i in range(5):
        week_dates.append(monday + timedelta(days=i))

    return week_dates

with app.app_context():
    print("=== Vérification des vacances et du comptage des semaines ===\n")

    # Récupérer le premier utilisateur
    user = User.query.first()
    if not user:
        print("Aucun utilisateur trouvé")
        exit()

    print(f"Utilisateur: {user.username}")
    print(f"Année scolaire: {user.school_year_start} - {user.school_year_end}\n")

    # Afficher toutes les vacances
    print("Vacances enregistrées:")
    holidays = user.holidays.all()
    for holiday in holidays:
        print(f"  - {holiday.name}: {holiday.start_date} au {holiday.end_date}")

    print("\n=== Comptage des semaines ===\n")

    # Simuler le comptage
    current_date = user.school_year_start
    current_date -= timedelta(days=current_date.weekday())  # Aller au lundi

    week_number = 0
    week_count = 0

    while current_date <= user.school_year_end and week_count < 20:  # Limiter à 20 semaines pour le debug
        week_dates = get_week_dates(current_date)
        week_holiday = None

        # Vérifier les vacances
        for holiday in holidays:
            days_in_holiday = 0
            for i in range(5):  # Lundi à vendredi
                if holiday.start_date <= week_dates[i] <= holiday.end_date:
                    days_in_holiday += 1

            if days_in_holiday >= 3:
                week_holiday = holiday.name
                break

        # Incrémenter seulement si pas de vacances
        if not week_holiday and current_date >= user.school_year_start:
            week_number += 1

        # Afficher le résultat
        if week_holiday:
            print(f"Semaine du {week_dates[0].strftime('%d/%m/%Y')}: {week_holiday}")
        else:
            print(f"Semaine du {week_dates[0].strftime('%d/%m/%Y')}: S{week_number}")

        current_date += timedelta(days=7)
        week_count += 1



================================================================================
FICHIER: extensions.py
LOCALISATION: extensions.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/extensions.py
================================================================================

from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate

# Initialisation des extensions
db = SQLAlchemy()
login_manager = LoginManager()
migrate = Migrate()



================================================================================
FICHIER: fix_calendar_error.py
LOCALISATION: fix_calendar_error.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/fix_calendar_error.py
================================================================================

#!/usr/bin/env python
"""
Script pour localiser et corriger l'erreur dans calendar_view.html
"""

import os
import re

def fix_calendar_view():
    # Chemin du fichier
    file_path = 'templates/planning/calendar_view.html'

    if not os.path.exists(file_path):
        print(f"❌ Fichier non trouvé : {file_path}")
        return False

    # Lire le fichier
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Pattern à chercher
    old_pattern = r'(\s*){% if planning\.title %}\s*\n\s*<div class="planning-title">{{ planning\.title }}</div>\s*\n\s*{% endif %}'

    # Nouveau code
    new_code = '''                        {% if planning.title %}
                        <div class="planning-title">
                            {% if planning and planning.count_checklist_items is defined %}
                                {% set total = planning.count_checklist_items() %}
                                {% if total > 0 %}
                                    {% set checked = planning.count_checked_items() %}
                                    <span class="checklist-indicator" title="{{ checked }}/{{ total }} tâches complétées">
                                        {% if checked == total %}
                                            <i class="fas fa-check-circle" style="color: #10B981;"></i>
                                        {% elif checked > 0 %}
                                            <i class="fas fa-tasks" style="color: #F59E0B;"></i>
                                        {% else %}
                                            <i class="fas fa-times-circle" style="color: #EF4444;"></i>
                                        {% endif %}
                                    </span>
                                {% endif %}
                            {% endif %}
                            {{ planning.title }}
                        </div>
                        {% endif %}'''

    # Chercher et remplacer
    matches = list(re.finditer(old_pattern, content, re.MULTILINE))

    if not matches:
        print("⚠️  Pattern exact non trouvé. Recherche alternative...")

        # Recherche plus simple
        simple_pattern = r'<div class="planning-title">{{ planning\.title }}</div>'
        matches = list(re.finditer(simple_pattern, content))

        if matches:
            print(f"✓ Trouvé {len(matches)} occurrence(s) du pattern simple")

            # Afficher les lignes
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                if 'planning-title' in line and 'planning.title' in line:
                    print(f"  Ligne {i}: {line.strip()}")

            # Faire une sauvegarde
            backup_path = file_path + '.backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"\n📦 Sauvegarde créée : {backup_path}")

            # Instructions manuelles
            print("\n📝 Instructions pour corriger manuellement :")
            print("1. Ouvrez le fichier : templates/planning/calendar_view.html")
            print(f"2. Allez à la ligne contenant : <div class=\"planning-title\">{{{{ planning.title }}}}</div>")
            print("3. Remplacez cette section par le code fourni dans 'Version ultra-sûre pour calendar_view.html'")

            return False
    else:
        print(f"✓ Pattern trouvé à {len(matches)} endroit(s)")

        # Remplacer
        new_content = re.sub(old_pattern, new_code, content, flags=re.MULTILINE)

        # Sauvegarder
        backup_path = file_path + '.backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"📦 Sauvegarde créée : {backup_path}")

        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"✅ Fichier corrigé : {file_path}")

        return True

if __name__ == "__main__":
    print("🔧 Correction de l'erreur calendar_view\n")

    if fix_calendar_view():
        print("\n✅ Correction appliquée avec succès !")
        print("\n🚀 Prochaines étapes :")
        print("1. Redémarrez l'application (Ctrl+C puis python run.py)")
        print("2. Testez le calendrier")
    else:
        print("\n⚠️  Correction manuelle nécessaire")
        print("\nSi vous préférez, vous pouvez aussi :")
        print("- Utiliser le code dans 'Fix simple et direct pour calendar_view.html'")
        print("- Ou temporairement désactiver les indicateurs en gardant juste {{ planning.title }}")



================================================================================
FICHIER: migration.py
LOCALISATION: migration.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/migration.py
================================================================================

from app import create_app, db
from models.file_manager import FileFolder, UserFile

app = create_app()

with app.app_context():
    db.create_all()
    print("Tables du gestionnaires de fichiers créés")



================================================================================
FICHIER: projet_consolide.txt
LOCALISATION: projet_consolide.txt
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/projet_consolide.txt
================================================================================

================================================================================
CONSOLIDATION DU PROJET: profcalendar
Généré depuis: /Users/loicstrauch/PycharmProjects/profcalendar
Extensions incluses: .py, .html, .css, .js, .jsx, .ts, .tsx, .vue, .php, .java, .cpp, .c, .h, .json, .xml, .sql, .md, .txt, .yml, .yaml
================================================================================


================================================================================
FICHIER: add_checklist_column.py
LOCALISATION: add_checklist_column.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/add_checklist_column.py
================================================================================

#!/usr/bin/env python
"""
Script pour ajouter la colonne checklist_states directement dans SQLite
"""

from app import create_app, db
from sqlalchemy import text
import sys

app = create_app()

def check_column_exists():
    """Vérifie si la colonne existe déjà"""
    with app.app_context():
        result = db.session.execute(text(
            "SELECT COUNT(*) FROM pragma_table_info('plannings') WHERE name='checklist_states'"
        ))
        return result.scalar() > 0

def add_checklist_column():
    """Ajoute la colonne checklist_states à la table plannings"""
    with app.app_context():
        try:
            # Vérifier si la colonne existe déjà
            if check_column_exists():
                print("✓ La colonne 'checklist_states' existe déjà dans la table 'plannings'")
                return True

            # Ajouter la colonne
            print("Ajout de la colonne 'checklist_states'...")
            db.session.execute(text(
                "ALTER TABLE plannings ADD COLUMN checklist_states TEXT"
            ))
            db.session.commit()
            print("✓ Colonne 'checklist_states' ajoutée avec succès !")
            return True

        except Exception as e:
            print(f"✗ Erreur lors de l'ajout de la colonne : {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("=== Ajout de la colonne checklist_states ===\n")

    # Afficher le chemin de la base de données
    with app.app_context():
        db_path = app.config.get('SQLALCHEMY_DATABASE_URI', '').replace('sqlite:///', '')
        print(f"Base de données : {db_path}\n")

    # Ajouter la colonne
    if add_checklist_column():
        print("\n✅ Opération terminée avec succès !")
    else:
        print("\n❌ L'opération a échoué.")
        sys.exit(1)



================================================================================
FICHIER: app.py
LOCALISATION: app.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/app.py
================================================================================

from flask import Flask
from extensions import db, login_manager, migrate
from config import Config
import os

def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)

    # Initialiser les extensions avec l'app
    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)

    # Configuration du login manager
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Veuillez vous connecter pour accéder à cette page.'

    # Activer les logs SQLAlchemy en mode debug
    if app.debug:
        import logging
        logging.basicConfig()
        logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

    # Gestion des erreurs pour le débogage
    @app.errorhandler(Exception)
    def handle_exception(e):
        if app.debug:
            # En mode debug, afficher l'erreur complète
            import traceback
            return f"<pre>{traceback.format_exc()}</pre>", 500
        # En production, afficher une page d'erreur générique
        return "Une erreur est survenue", 500

    # Créer les dossiers nécessaires
    os.makedirs(os.path.join(app.root_path, 'database'), exist_ok=True)

    # Importer et enregistrer les blueprints
    from routes.auth import auth_bp
    from routes.setup import setup_bp
    from routes.schedule import schedule_bp
    from routes.planning import planning_bp
    from routes.file_manager import file_manager_bp

    app.register_blueprint(auth_bp)
    app.register_blueprint(setup_bp)
    app.register_blueprint(schedule_bp)
    app.register_blueprint(planning_bp)
    app.register_blueprint(file_manager_bp)

    # Route d'accueil
    @app.route('/')
    def index():
        from flask_login import current_user
        from flask import redirect, url_for

        if current_user.is_authenticated:
            # Étape 1 : Vérifier la configuration de base
            if not current_user.school_year_start or not current_user.day_start_time:
                return redirect(url_for('setup.initial_setup'))

            # Étape 2 : Vérifier qu'il y a au moins une classe
            if current_user.classrooms.count() == 0:
                return redirect(url_for('setup.manage_classrooms'))

            # Étape 3 : Vérifier que la configuration de base est marquée comme complète
            if not current_user.setup_completed:
                # Si les vacances/pauses ne sont pas encore configurées, aller aux vacances
                if current_user.holidays.count() == 0:
                    return redirect(url_for('setup.manage_holidays'))
                elif current_user.breaks.count() == 0:
                    return redirect(url_for('setup.manage_breaks'))
                else:
                    # Si tout est configuré mais pas validé, forcer la validation
                    return redirect(url_for('setup.validate_setup'))

            # Étape 4 : Vérifier l'horaire type
            if not current_user.schedule_completed:
                return redirect(url_for('schedule.weekly_schedule'))

            # Si tout est complété, aller au tableau de bord
            return redirect(url_for('planning.dashboard'))

        # Si pas connecté, aller à la page de connexion
        return redirect(url_for('auth.login'))

    # Route pour le favicon (éviter l'erreur 404)
    @app.route('/favicon.ico')
    def favicon():
        from flask import send_from_directory
        import os
        # Retourner une réponse vide si pas de favicon
        return '', 204

    # Créer les tables si elles n'existent pas
    os.makedirs(os.path.join(app.root_path, 'uploads', 'files'), exist_ok=True)
    os.makedirs(os.path.join(app.root_path, 'uploads', 'thumbnails'), exist_ok=True)
    with app.app_context():
        db.create_all()

    # Context processor pour rendre les informations de cours disponibles globalement
    @app.context_processor
    def inject_lesson_info():
        from flask_login import current_user

        if current_user.is_authenticated and hasattr(current_user, 'setup_completed') and current_user.setup_completed:
            try:
                from routes.planning import get_current_or_next_lesson
                lesson, is_current, lesson_date = get_current_or_next_lesson(current_user)

                return {
                    'global_current_lesson': lesson if is_current else None,
                    'global_next_lesson': lesson if not is_current else None,
                    'global_has_current_lesson': is_current
                }
            except:
                # En cas d'erreur, retourner des valeurs par défaut
                return {
                    'global_current_lesson': None,
                    'global_next_lesson': None,
                    'global_has_current_lesson': False
                }

        return {
            'global_current_lesson': None,
            'global_next_lesson': None,
            'global_has_current_lesson': False
        }

    # Filtres Jinja2 personnalisés
    @app.template_filter('format_date')
    def format_date(date):
        if date:
            months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
                     'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
            return f"{date.day} {months[date.month-1]} {date.year}"
        return ''

    @app.template_filter('format_month_year')
    def format_month_year(date):
        if date:
            months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
                     'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
            return f"{months[date.month-1]} {date.year}"
        return ''

    # Ajoutez cette fonction dans la fonction create_app après les filtres Jinja2 existants (vers la ligne 140)

    # Fonction helper pour rendre les checkboxes dans les plannings
    # Remplacer la fonction render_planning_with_checkboxes dans app.py (vers la ligne 145)

    @app.template_global()
    def render_planning_with_checkboxes(planning):
        """Rendre la description d'une planification avec les checkboxes"""
        if not planning or not planning.description:
            return 'Aucune description'

        import re
        lines = planning.description.split('\n')
        html = []
        checkbox_index = 0
        states = planning.get_checklist_states()

        for line in lines:
            # Vérifier si la ligne contient une checkbox
            checkbox_match = re.match(r'^(\s*)\[([ x])\]\s*(.*)$', line, re.IGNORECASE)

            if checkbox_match:
                indent = checkbox_match.group(1)
                content = checkbox_match.group(3)

                # Récupérer l'état de la checkbox depuis les données sauvegardées
                is_checked = states.get(str(checkbox_index), False)

                html.append(f'''<div class="planning-checklist-item" style="margin-left: {len(indent) * 20}px;">
                    <input type="checkbox" 
                           class="planning-checkbox" 
                           id="checkbox-{checkbox_index}" 
                           data-index="{checkbox_index}"
                           {'checked' if is_checked else ''}
                           onchange="updateCheckboxState({checkbox_index}, this.checked)">
                    <label for="checkbox-{checkbox_index}" class="planning-checkbox-label">{content}</label>
                </div>''')

                checkbox_index += 1
            else:
                # Ligne normale - échapper le HTML
                escaped_line = line.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;').replace("'", '&#039;')
                html.append(f'<div>{escaped_line}</div>')

        return '\n'.join(html)

    @app.template_filter('format_date_full')
    def format_date_full(date):
        if date:
            months = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
                     'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
            return f"{date.day} {months[date.month-1]}"
        return ''

    return app



================================================================================
FICHIER: config.py
LOCALISATION: config.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/config.py
================================================================================

import os
from datetime import timedelta

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    # Configuration générale
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'

    # Configuration base de données
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'database', 'teacher_planner.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # Configuration session
    PERMANENT_SESSION_LIFETIME = timedelta(days=7)
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'

    # Configuration WTForms
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = None







































































================================================================================
FICHIER: consolidateur.py
LOCALISATION: consolidateur.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/consolidateur.py
================================================================================

import os
from pathlib import Path

def consolidate_project(project_path=".", output_file="projet_consolide.txt", extensions=None):
    """
    Consolide tous les fichiers de code d'un projet en un seul fichier.

    Args:
        project_path (str): Chemin vers le projet (par défaut: dossier actuel)
        output_file (str): Nom du fichier de sortie
        extensions (list): Extensions à inclure (par défaut: py, html, css, js)
    """

    if extensions is None:
        extensions = ['.py', '.html', '.css', '.js', '.jsx', '.ts', '.tsx', '.vue']

    # Dossiers à ignorer
    ignore_dirs = {
        '__pycache__', '.git', 'node_modules', 'venv', '.venv', 'env', '.env',
        'dist', 'build', '.idea', '.vscode', 'htmlcov', '.pytest_cache',
        '.mypy_cache', 'logs', 'tmp', 'temp'
    }

    project_path = Path(project_path).resolve()

    with open(output_file, 'w', encoding='utf-8') as output:
        # En-tête du fichier
        output.write("=" * 80 + "\n")
        output.write(f"CONSOLIDATION DU PROJET: {project_path.name}\n")
        output.write(f"Généré depuis: {project_path}\n")
        output.write(f"Extensions incluses: {', '.join(extensions)}\n")
        output.write("=" * 80 + "\n\n")

        # Compteurs
        total_files = 0
        total_lines = 0

        # Parcourir tous les fichiers
        for root, dirs, files in os.walk(project_path):
            # Filtrer les dossiers à ignorer
            dirs[:] = [d for d in dirs if d not in ignore_dirs and not d.startswith('.')]

            root_path = Path(root)

            for file in sorted(files):
                file_path = root_path / file

                # Vérifier l'extension
                if file_path.suffix.lower() in extensions:
                    try:
                        # Calculer le chemin relatif
                        relative_path = file_path.relative_to(project_path)

                        # En-tête du fichier
                        output.write("\n" + "=" * 80 + "\n")
                        output.write(f"FICHIER: {file}\n")
                        output.write(f"LOCALISATION: {relative_path}\n")
                        output.write(f"CHEMIN COMPLET: {file_path}\n")
                        output.write("=" * 80 + "\n\n")

                        # Lire et écrire le contenu
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                            output.write(content)

                            # Compter les lignes
                            lines_count = len(content.splitlines())
                            total_lines += lines_count

                        output.write("\n\n")
                        total_files += 1

                        print(f"✓ Ajouté: {relative_path} ({lines_count} lignes)")

                    except Exception as e:
                        print(f"✗ Erreur avec {file_path}: {e}")
                        output.write(f"[ERREUR DE LECTURE: {e}]\n\n")

        # Résumé final
        output.write("\n" + "=" * 80 + "\n")
        output.write("RÉSUMÉ DE LA CONSOLIDATION\n")
        output.write("=" * 80 + "\n")
        output.write(f"Fichiers traités: {total_files}\n")
        output.write(f"Lignes totales: {total_lines}\n")
        output.write(f"Extensions incluses: {', '.join(extensions)}\n")
        output.write("=" * 80 + "\n")

    print(f"\n🎉 Consolidation terminée !")
    print(f"📁 Fichiers traités: {total_files}")
    print(f"📝 Lignes totales: {total_lines}")
    print(f"💾 Fichier de sortie: {output_file}")

def main():
    """Fonction principale avec options personnalisables"""

    # Configuration personnalisable
    projet_path = "."  # Changez pour le chemin de votre projet
    fichier_sortie = "projet_consolide.txt"

    # Extensions à inclure (ajoutez/supprimez selon vos besoins)
    extensions_incluses = [
        '.py',      # Python
        '.html',    # HTML
        '.css',     # CSS
        '.js',      # JavaScript
        '.jsx',     # React JSX
        '.ts',      # TypeScript
        '.tsx',     # TypeScript React
        '.vue',     # Vue.js
        '.php',     # PHP
        '.java',    # Java
        '.cpp',     # C++
        '.c',       # C
        '.h',       # Headers C/C++
        '.json',    # JSON
        '.xml',     # XML
        '.sql',     # SQL
        '.md',      # Markdown
        '.txt',     # Texte
        '.yml',     # YAML
        '.yaml'     # YAML
    ]

    print("🚀 Démarrage de la consolidation du projet...")
    print(f"📂 Dossier source: {os.path.abspath(projet_path)}")
    print(f"📄 Fichier de sortie: {fichier_sortie}")

    consolidate_project(
        project_path=projet_path,
        output_file=fichier_sortie,
        extensions=extensions_incluses
    )

if __name__ == "__main__":
    main()



================================================================================
FICHIER: debug_holiday.py
LOCALISATION: debug_holiday.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/debug_holiday.py
================================================================================

"""
Script pour vérifier les vacances et le comptage des semaines
"""

from app import create_app, db
from models.user import User, Holiday
from datetime import datetime, timedelta

app = create_app()

def get_week_dates(week_date):
    """Retourne les dates du lundi au vendredi de la semaine"""
    days_since_monday = week_date.weekday()
    monday = week_date - timedelta(days=days_since_monday)

    week_dates = []
    for i in range(5):
        week_dates.append(monday + timedelta(days=i))

    return week_dates

with app.app_context():
    print("=== Vérification des vacances et du comptage des semaines ===\n")

    # Récupérer le premier utilisateur
    user = User.query.first()
    if not user:
        print("Aucun utilisateur trouvé")
        exit()

    print(f"Utilisateur: {user.username}")
    print(f"Année scolaire: {user.school_year_start} - {user.school_year_end}\n")

    # Afficher toutes les vacances
    print("Vacances enregistrées:")
    holidays = user.holidays.all()
    for holiday in holidays:
        print(f"  - {holiday.name}: {holiday.start_date} au {holiday.end_date}")

    print("\n=== Comptage des semaines ===\n")

    # Simuler le comptage
    current_date = user.school_year_start
    current_date -= timedelta(days=current_date.weekday())  # Aller au lundi

    week_number = 0
    week_count = 0

    while current_date <= user.school_year_end and week_count < 20:  # Limiter à 20 semaines pour le debug
        week_dates = get_week_dates(current_date)
        week_holiday = None

        # Vérifier les vacances
        for holiday in holidays:
            days_in_holiday = 0
            for i in range(5):  # Lundi à vendredi
                if holiday.start_date <= week_dates[i] <= holiday.end_date:
                    days_in_holiday += 1

            if days_in_holiday >= 3:
                week_holiday = holiday.name
                break

        # Incrémenter seulement si pas de vacances
        if not week_holiday and current_date >= user.school_year_start:
            week_number += 1

        # Afficher le résultat
        if week_holiday:
            print(f"Semaine du {week_dates[0].strftime('%d/%m/%Y')}: {week_holiday}")
        else:
            print(f"Semaine du {week_dates[0].strftime('%d/%m/%Y')}: S{week_number}")

        current_date += timedelta(days=7)
        week_count += 1



================================================================================
FICHIER: extensions.py
LOCALISATION: extensions.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/extensions.py
================================================================================

from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate

# Initialisation des extensions
db = SQLAlchemy()
login_manager = LoginManager()
migrate = Migrate()



================================================================================
FICHIER: fix_calendar_error.py
LOCALISATION: fix_calendar_error.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/fix_calendar_error.py
================================================================================

#!/usr/bin/env python
"""
Script pour localiser et corriger l'erreur dans calendar_view.html
"""

import os
import re

def fix_calendar_view():
    # Chemin du fichier
    file_path = 'templates/planning/calendar_view.html'

    if not os.path.exists(file_path):
        print(f"❌ Fichier non trouvé : {file_path}")
        return False

    # Lire le fichier
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Pattern à chercher
    old_pattern = r'(\s*){% if planning\.title %}\s*\n\s*<div class="planning-title">{{ planning\.title }}</div>\s*\n\s*{% endif %}'

    # Nouveau code
    new_code = '''                        {% if planning.title %}
                        <div class="planning-title">
                            {% if planning and planning.count_checklist_items is defined %}
                                {% set total = planning.count_checklist_items() %}
                                {% if total > 0 %}
                                    {% set checked = planning.count_checked_items() %}
                                    <span class="checklist-indicator" title="{{ checked }}/{{ total }} tâches complétées">
                                        {% if checked == total %}
                                            <i class="fas fa-check-circle" style="color: #10B981;"></i>
                                        {% elif checked > 0 %}
                                            <i class="fas fa-tasks" style="color: #F59E0B;"></i>
                                        {% else %}
                                            <i class="fas fa-times-circle" style="color: #EF4444;"></i>
                                        {% endif %}
                                    </span>
                                {% endif %}
                            {% endif %}
                            {{ planning.title }}
                        </div>
                        {% endif %}'''

    # Chercher et remplacer
    matches = list(re.finditer(old_pattern, content, re.MULTILINE))

    if not matches:
        print("⚠️  Pattern exact non trouvé. Recherche alternative...")

        # Recherche plus simple
        simple_pattern = r'<div class="planning-title">{{ planning\.title }}</div>'
        matches = list(re.finditer(simple_pattern, content))

        if matches:
            print(f"✓ Trouvé {len(matches)} occurrence(s) du pattern simple")

            # Afficher les lignes
            lines = content.split('\n')
            for i, line in enumerate(lines, 1):
                if 'planning-title' in line and 'planning.title' in line:
                    print(f"  Ligne {i}: {line.strip()}")

            # Faire une sauvegarde
            backup_path = file_path + '.backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"\n📦 Sauvegarde créée : {backup_path}")

            # Instructions manuelles
            print("\n📝 Instructions pour corriger manuellement :")
            print("1. Ouvrez le fichier : templates/planning/calendar_view.html")
            print(f"2. Allez à la ligne contenant : <div class=\"planning-title\">{{{{ planning.title }}}}</div>")
            print("3. Remplacez cette section par le code fourni dans 'Version ultra-sûre pour calendar_view.html'")

            return False
    else:
        print(f"✓ Pattern trouvé à {len(matches)} endroit(s)")

        # Remplacer
        new_content = re.sub(old_pattern, new_code, content, flags=re.MULTILINE)

        # Sauvegarder
        backup_path = file_path + '.backup'
        with open(backup_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"📦 Sauvegarde créée : {backup_path}")

        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        print(f"✅ Fichier corrigé : {file_path}")

        return True

if __name__ == "__main__":
    print("🔧 Correction de l'erreur calendar_view\n")

    if fix_calendar_view():
        print("\n✅ Correction appliquée avec succès !")
        print("\n🚀 Prochaines étapes :")
        print("1. Redémarrez l'application (Ctrl+C puis python run.py)")
        print("2. Testez le calendrier")
    else:
        print("\n⚠️  Correction manuelle nécessaire")
        print("\nSi vous préférez, vous pouvez aussi :")
        print("- Utiliser le code dans 'Fix simple et direct pour calendar_view.html'")
        print("- Ou temporairement désactiver les indicateurs en gardant juste {{ planning.title }}")



================================================================================
FICHIER: migration.py
LOCALISATION: migration.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/migration.py
================================================================================




================================================================================
FICHIER: requirements.txt
LOCALISATION: requirements.txt
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/requirements.txt
================================================================================

Flask==3.0.0
Flask-SQLAlchemy==3.1.1
Flask-Login==0.6.3
Flask-WTF==1.2.1
WTForms==3.1.1
email-validator==2.1.0
Werkzeug==3.0.1
python-dateutil==2.8.2
Flask-Migrate==4.0.5
Pillow==10.1.0




================================================================================
FICHIER: run.py
LOCALISATION: run.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/run.py
================================================================================

from app import create_app, db
from models import *  # Importer tous les modèles
# Import explicite pour s'assurer que tous les modèles sont chargés
from models.user import User, Holiday, Break
from models.classroom import Classroom
from models.schedule import Schedule
from models.planning import Planning
from models.student import Student, Grade, ClassFile, Chapter, ClassroomChapter
from models.attendance import Attendance

app = create_app()

if __name__ == '__main__':
    with app.app_context():
        # Créer toutes les tables si elles n'existent pas
        db.create_all()
        print("Base de données initialisée avec succès !")

    # Lancer l'application en mode debug
    app.run(debug=True, host='0.0.0.0', port=5001)



================================================================================
FICHIER: setup_migration.py
LOCALISATION: setup_migration.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/setup_migration.py
================================================================================

#!/usr/bin/env python
"""
Script pour initialiser Flask-Migrate et ajouter la colonne checklist_states
"""

from app import create_app, db
from flask_migrate import init, migrate, upgrade
import os

# Créer l'application
app = create_app()

with app.app_context():
    # Option 1 : Initialiser Flask-Migrate si ce n'est pas déjà fait
    if not os.path.exists('migrations'):
        print("Initialisation de Flask-Migrate...")
        init()
        print("✓ Flask-Migrate initialisé")

    # Option 2 : Créer la migration
    print("\nCréation de la migration...")
    try:
        migrate(message='Add checklist_states to Planning model')
        print("✓ Migration créée")
    except Exception as e:
        print(f"Note: {e}")

    # Option 3 : Appliquer la migration
    print("\nApplication de la migration...")
    try:
        upgrade()
        print("✓ Migration appliquée")
    except Exception as e:
        print(f"Erreur lors de l'application: {e}")

print("\n✅ Processus terminé !")



================================================================================
FICHIER: env.py
LOCALISATION: migrations/env.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/migrations/env.py
================================================================================

import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()



================================================================================
FICHIER: 03102d9a4471_add_checklist_states_to_planning_model.py
LOCALISATION: migrations/versions/03102d9a4471_add_checklist_states_to_planning_model.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/migrations/versions/03102d9a4471_add_checklist_states_to_planning_model.py
================================================================================

"""Add checklist_states to Planning model

Revision ID: 03102d9a4471
Revises: 
Create Date: 2025-06-01 17:57:54.429212

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '03102d9a4471'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('plannings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('checklist_states', sa.Text(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('plannings', schema=None) as batch_op:
        batch_op.drop_column('checklist_states')

    # ### end Alembic commands ###



================================================================================
FICHIER: __init__.py
LOCALISATION: utils/__init__.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/utils/__init__.py
================================================================================

# Module utils pour les fonctions utilitaires



================================================================================
FICHIER: vaud_holidays.py
LOCALISATION: utils/vaud_holidays.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/utils/vaud_holidays.py
================================================================================

from datetime import date

# Vacances scolaires pour le canton de Vaud
# Source: https://www.vd.ch/themes/formation/scolarite-obligatoire/calendrier-scolaire-et-vacances/

VAUD_HOLIDAYS = {'2022-2023':
                     [{'name': "Vacances d'automne",
                       'start': date(2022, 10, 15),
                       'end': date(2022, 10, 30)},
                      {'name': "Vacances d'hiver",
                       'start': date(2022, 12, 24),
                       'end': date(2023, 1, 8)},
                      {'name': 'Relâches de février',
                       'start': date(2023, 2, 11),
                       'end': date(2023, 2, 19)},
                      {'name': 'Vacances de Pâques', 'start': date(2023, 4, 7),
                       'end': date(2023, 4, 23)},
                      {'name': "Pont de l'Ascension", 'start': date(2023, 5, 18),
                       'end': date(2023, 5, 19)},
                      {'name': 'Lundi de Pentecôte', 'start': date(2023, 5, 29),
                       'end': date(2023, 5, 29)}],

                 '2023-2024': [
                     {'name': "Vacances d'automne", 'start': date(2023, 10, 14),
                      'end': date(2023, 10, 29)},
                     {'name': "Vacances d'hiver", 'start': date(2023, 12, 23),
                      'end': date(2024, 1, 7)},
                     {'name': 'Relâches de février', 'start': date(2024, 2, 10),
                      'end': date(2024, 2, 18)},
                     {'name': 'Vacances de Pâques', 'start': date(2024, 3, 29),
                      'end': date(2024, 4, 14)},
                     {'name': "Pont de l'Ascension", 'start': date(2024, 5, 9),
                      'end': date(2024, 5, 10)},
                     {'name': 'Lundi de Pentecôte', 'start': date(2024, 5, 20),
                      'end': date(2024, 5, 20)}],

                 '2024-2025': [{'name': "Vacances d'automne", 'start': date(2024, 10, 12),
                                'end': date(2024, 10, 27)},
                               {'name': "Vacances d'hiver", 'start': date(2024, 12, 21),
                                'end': date(2025, 1, 5)},
                               {'name': 'Relâches de février', 'start': date(2025, 2, 15),
                                'end': date(2025, 2, 23)},
                               {'name': 'Vacances de Pâques', 'start': date(2025, 4, 12),
                                'end': date(2025, 4, 27)},
                               {'name': "Pont de l'Ascension", 'start': date(2025, 5, 29),
                                'end': date(2025, 5, 30)},
                               {'name': 'Lundi de Pentecôte', 'start': date(2025, 6, 9),
                                'end': date(2025, 6, 9)}],
                 '2025-2026': [
        {'name': "Vacances d'automne", 'start': date(2025, 10, 11), 'end': date(2025, 10, 26)},
        {'name': "Vacances d'hiver", 'start': date(2025, 12, 20), 'end': date(2026, 1, 4)},
        {'name': 'Relâches de février', 'start': date(2026, 2, 14), 'end': date(2026, 2, 22)},
        {'name': 'Vacances de Pâques', 'start': date(2026, 4, 3), 'end': date(2026, 4, 19)},
        {'name': "Pont de l'Ascension", 'start': date(2026, 5, 14), 'end': date(2026, 5, 15)},
        {'name': 'Lundi de Pentecôte', 'start': date(2026, 5, 25), 'end': date(2026, 5, 25)}],
                 '2026-2027': [{'name': "Vacances d'automne", 'start': date(2026, 10, 10),
                                'end': date(2026, 10, 25)},
                               {'name': "Vacances d'hiver", 'start': date(2026, 12, 24),
                                'end': date(2027, 1, 10)},
                               {'name': 'Relâches de février', 'start': date(2027, 2, 6),
                                'end': date(2027, 2, 14)},
                               {'name': 'Vacances de Pâques', 'start': date(2027, 3, 26),
                                'end': date(2027, 4, 11)},
                               {'name': "Pont de l'Ascension", 'start': date(2027, 5, 6),
                                'end': date(2027, 5, 7)},
                               {'name': 'Lundi de Pentecôte', 'start': date(2027, 5, 17),
                                'end': date(2027, 5, 17)}], '2027-2028': [
        {'name': "Vacances d'automne", 'start': date(2027, 10, 9), 'end': date(2027, 10, 24)},
        {'name': "Vacances d'hiver", 'start': date(2027, 12, 24), 'end': date(2028, 1, 9)},
        {'name': 'Relâches de février', 'start': date(2028, 2, 12), 'end': date(2028, 2, 20)},
        {'name': 'Vacances de Pâques', 'start': date(2028, 4, 11), 'end': date(2028, 4, 27)},
        {'name': "Pont de l'Ascension", 'start': date(2028, 5, 25), 'end': date(2028, 5, 26)},
        {'name': 'Lundi de Pentecôte', 'start': date(2028, 6, 5), 'end': date(2028, 6, 5)}],
                 '2028-2029': [{'name': "Vacances d'automne", 'start': date(2028, 10, 14),
                                'end': date(2028, 10, 29)},
                               {'name': "Vacances d'hiver", 'start': date(2028, 12, 23),
                                'end': date(2029, 1, 7)},
                               {'name': 'Relâches de février', 'start': date(2029, 2, 10),
                                'end': date(2029, 2, 18)},
                               {'name': 'Vacances de Pâques', 'start': date(2029, 4, 14),
                                'end': date(2029, 4, 30)},
                               {'name': "Pont de l'Ascension", 'start': date(2029, 5, 10),
                                'end': date(2029, 5, 11)},
                               {'name': 'Lundi de Pentecôte', 'start': date(2029, 5, 21),
                                'end': date(2029, 5, 21)}], '2029-2030': [
        {'name': "Vacances d'automne", 'start': date(2029, 10, 13), 'end': date(2029, 10, 28)},
        {'name': "Vacances d'hiver", 'start': date(2029, 12, 22), 'end': date(2030, 1, 6)},
        {'name': 'Relâches de février', 'start': date(2030, 2, 16), 'end': date(2030, 2, 24)},
        {'name': 'Vacances de Pâques', 'start': date(2030, 3, 30), 'end': date(2030, 4, 15)},
        {'name': "Pont de l'Ascension", 'start': date(2030, 5, 30), 'end': date(2030, 5, 31)},
        {'name': 'Lundi de Pentecôte', 'start': date(2030, 6, 10), 'end': date(2030, 6, 10)}],
                 '2030-2031': [{'name': "Vacances d'automne", 'start': date(2030, 10, 12),
                                'end': date(2030, 10, 27)},
                               {'name': "Vacances d'hiver", 'start': date(2030, 12, 21),
                                'end': date(2031, 1, 5)},
                               {'name': 'Relâches de février', 'start': date(2031, 2, 15),
                                'end': date(2031, 2, 23)},
                               {'name': 'Vacances de Pâques', 'start': date(2031, 4, 19),
                                'end': date(2031, 5, 5)},
                               {'name': "Pont de l'Ascension", 'start': date(2031, 5, 22),
                                'end': date(2031, 5, 23)},
                               {'name': 'Lundi de Pentecôte', 'start': date(2031, 6, 2),
                                'end': date(2031, 6, 2)}]}

def get_school_year(start_date):
    """Détermine l'année scolaire basée sur la date de début"""
    year = start_date.year
    if start_date.month < 8:  # Si avant août, c'est l'année scolaire précédente
        return f"{year-1}-{year}"
    else:
        return f"{year}-{year+1}"

def get_vaud_holidays(school_year_start):
    """Retourne les vacances scolaires vaudoises pour l'année scolaire donnée"""
    school_year = get_school_year(school_year_start)
    return VAUD_HOLIDAYS.get(school_year, [])



================================================================================
FICHIER: __init__.py
LOCALISATION: models/__init__.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/__init__.py
================================================================================

# Importer tous les modèles pour qu'ils soient disponibles
from models.user import User, Holiday, Break
from models.classroom import Classroom
from models.schedule import Schedule
from models.planning import Planning
from models.student import Student, Grade, ClassFile, Chapter, ClassroomChapter
from models.attendance import Attendance
from models.file_manager import FileFolder, UserFile, FileShare

__all__ = ['User', 'Holiday', 'Break', 'Classroom', 'Schedule', 'Planning',
           'Student', 'Grade', 'ClassFile', 'Chapter', 'ClassroomChapter', 'Attendance', 'FileFolder', 'UserFile', 'FileShare']



================================================================================
FICHIER: attendance.py
LOCALISATION: models/attendance.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/attendance.py
================================================================================

from extensions import db
from datetime import datetime

class Attendance(db.Model):
    """Modèle pour la gestion des présences/absences/retards"""
    __tablename__ = 'attendance'

    id = db.Column(db.Integer, primary_key=True)
    student_id = db.Column(db.Integer, db.ForeignKey('students.id'), nullable=False)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    date = db.Column(db.Date, nullable=False)
    period_number = db.Column(db.Integer, nullable=False)

    # Status: 'present', 'absent', 'late'
    status = db.Column(db.String(20), nullable=False, default='present')

    # Minutes de retard (null si pas en retard)
    late_minutes = db.Column(db.Integer)

    # Commentaire optionnel
    comment = db.Column(db.Text)

    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relations
    student = db.relationship('Student', backref=db.backref('attendances', lazy='dynamic'))
    classroom = db.relationship('Classroom', backref=db.backref('attendances', lazy='dynamic'))
    user = db.relationship('User', backref=db.backref('attendances', lazy='dynamic'))

    __table_args__ = (
        db.UniqueConstraint('student_id', 'date', 'period_number', name='_student_date_period_uc'),
    )

    def __repr__(self):
        return f'<Attendance {self.student_id} - {self.date} P{self.period_number} - {self.status}>'



================================================================================
FICHIER: classroom.py
LOCALISATION: models/classroom.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/classroom.py
================================================================================

from extensions import db

class Classroom(db.Model):
    __tablename__ = 'classrooms'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    subject = db.Column(db.String(100), nullable=False)
    color = db.Column(db.String(7), nullable=False)  # Format hexadécimal #RRGGBB

    # Relations
    schedules = db.relationship('Schedule', backref='classroom', lazy='dynamic', cascade='all, delete-orphan')
    plannings = db.relationship('Planning', backref='classroom', lazy='dynamic', cascade='all, delete-orphan')

    def __repr__(self):
        return f'<Classroom {self.name} - {self.subject}>'



================================================================================
FICHIER: file_manager.py
LOCALISATION: models/file_manager.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/file_manager.py
================================================================================

from extensions import db
from datetime import datetime
import os

class FileFolder(db.Model):
    """Modèle pour les dossiers"""
    __tablename__ = 'file_folders'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    parent_id = db.Column(db.Integer, db.ForeignKey('file_folders.id'), nullable=True)
    name = db.Column(db.String(255), nullable=False)
    color = db.Column(db.String(7), default='#4F46E5')  # Couleur hexadécimale
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relations
    user = db.relationship('User', backref=db.backref('folders', lazy='dynamic'))
    parent = db.relationship('FileFolder', remote_side=[id], backref='subfolders')
    files = db.relationship('UserFile', backref='folder', lazy='dynamic', cascade='all, delete-orphan')

    def get_path(self):
        """Retourne le chemin complet du dossier"""
        if self.parent:
            return f"{self.parent.get_path()}/{self.name}"
        return self.name

    def get_size(self):
        """Calcule la taille totale du dossier"""
        total_size = 0
        # Taille des fichiers directs
        for file in self.files:
            total_size += file.file_size or 0
        # Taille des sous-dossiers
        for subfolder in self.subfolders:
            total_size += subfolder.get_size()
        return total_size

    def get_file_count(self):
        """Compte le nombre total de fichiers dans le dossier et ses sous-dossiers"""
        count = self.files.count()
        for subfolder in self.subfolders:
            count += subfolder.get_file_count()
        return count

    def __repr__(self):
        return f'<FileFolder {self.name}>'


class UserFile(db.Model):
    """Modèle pour les fichiers utilisateur"""
    __tablename__ = 'user_files'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    folder_id = db.Column(db.Integer, db.ForeignKey('file_folders.id'), nullable=True)
    filename = db.Column(db.String(255), nullable=False)  # Nom du fichier stocké
    original_filename = db.Column(db.String(255), nullable=False)  # Nom original
    file_type = db.Column(db.String(10), nullable=False)  # pdf, png, jpg
    file_size = db.Column(db.Integer)  # Taille en octets
    mime_type = db.Column(db.String(100))
    description = db.Column(db.Text)
    thumbnail_path = db.Column(db.String(255))  # Chemin vers la miniature pour les images
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relations
    user = db.relationship('User', backref=db.backref('files', lazy='dynamic'))

    def get_file_path(self):
        """Retourne le chemin complet du fichier"""
        return os.path.join('uploads', 'files', str(self.user_id), self.filename)

    def get_thumbnail_path(self):
        """Retourne le chemin de la miniature"""
        if self.thumbnail_path:
            return os.path.join('uploads', 'thumbnails', str(self.user_id), self.thumbnail_path)
        return None

    def format_size(self):
        """Formate la taille du fichier de manière lisible"""
        if not self.file_size:
            return "0 B"

        units = ['B', 'KB', 'MB', 'GB']
        size = float(self.file_size)
        unit_index = 0

        while size >= 1024 and unit_index < len(units) - 1:
            size /= 1024
            unit_index += 1

        return f"{size:.1f} {units[unit_index]}"

    def __repr__(self):
        return f'<UserFile {self.original_filename}>'


class FileShare(db.Model):
    """Modèle pour le partage de fichiers (future fonctionnalité)"""
    __tablename__ = 'file_shares'

    id = db.Column(db.Integer, primary_key=True)
    file_id = db.Column(db.Integer, db.ForeignKey('user_files.id'), nullable=False)
    shared_by_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    shared_with_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=True)
    permission = db.Column(db.String(20), default='read')  # read, write
    expires_at = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relations
    file = db.relationship('UserFile', backref='shares')
    shared_by = db.relationship('User', foreign_keys=[shared_by_id])
    shared_with = db.relationship('User', foreign_keys=[shared_with_id])
    classroom = db.relationship('Classroom', backref='file_shares')

    def __repr__(self):
        return f'<FileShare {self.id}>'



================================================================================
FICHIER: planning.py
LOCALISATION: models/planning.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/planning.py
================================================================================

from extensions import db
from datetime import datetime
import json
import re

class Planning(db.Model):
    """Planification spécifique pour une date donnée"""
    __tablename__ = 'plannings'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)

    # Date spécifique
    date = db.Column(db.Date, nullable=False)

    # Numéro de la période
    period_number = db.Column(db.Integer, nullable=False)

    # Contenu de la planification
    title = db.Column(db.String(200))
    description = db.Column(db.Text)

    # Nouveau champ pour stocker l'état des checkboxes (JSON)
    checklist_states = db.Column(db.Text)  # Stocké comme JSON

    # Métadonnées
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relation avec l'utilisateur (en plus de celle héritée du modèle User)
    user = db.relationship('User', backref=db.backref('plannings', lazy='dynamic'))

    __table_args__ = (
        db.UniqueConstraint('user_id', 'date', 'period_number', name='_user_date_period_uc'),
    )

    def get_checklist_states(self):
        """Retourne les états des checkboxes comme dictionnaire"""
        if self.checklist_states:
            try:
                return json.loads(self.checklist_states)
            except:
                return {}
        return {}

    def set_checklist_states(self, states):
        """Définit les états des checkboxes depuis un dictionnaire"""
        self.checklist_states = json.dumps(states) if states else None

    def count_checklist_items(self):
        """Compte le nombre total de checkboxes dans la description"""
        if not self.description:
            return 0

        # Pattern pour détecter les checkboxes
        checkbox_pattern = r'^\s*\[([ x])\]\s*'
        lines = self.description.split('\n')
        count = 0

        for line in lines:
            if re.match(checkbox_pattern, line, re.IGNORECASE):
                count += 1

        return count

    def count_checked_items(self):
        """Compte le nombre de checkboxes cochées"""
        if not self.description:
            return 0

        states = self.get_checklist_states()
        if not states:
            return 0

        # Compter combien de valeurs True dans les états
        return sum(1 for value in states.values() if value is True)

    def get_checklist_summary(self):
        """Retourne un résumé des checkboxes (cochées/total)"""
        total = self.count_checklist_items()
        if total == 0:
            return None

        checked = self.count_checked_items()
        return {
            'total': total,
            'checked': checked,
            'percentage': (checked / total) * 100 if total > 0 else 0,
            'all_checked': checked == total
        }

    def get_checklist_items_with_states(self):
        """Retourne la liste des items de checklist avec leur état"""
        if not self.description:
            return []

        items = []
        states = self.get_checklist_states()
        checkbox_pattern = r'^(\s*)\[([ x])\]\s*(.*)$'
        lines = self.description.split('\n')
        checkbox_index = 0

        for line in lines:
            match = re.match(checkbox_pattern, line, re.IGNORECASE)
            if match:
                indent = match.group(1)
                content = match.group(3)
                is_checked = states.get(str(checkbox_index), False)

                items.append({
                    'index': checkbox_index,
                    'content': content,
                    'checked': is_checked,
                    'indent': len(indent)
                })

                checkbox_index += 1

        return items

    def __repr__(self):
        return f'<Planning {self.date} P{self.period_number} - {self.classroom.name}>'



================================================================================
FICHIER: schedule.py
LOCALISATION: models/schedule.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/schedule.py
================================================================================

from extensions import db
from datetime import datetime

class Schedule(db.Model):
    """Horaire type hebdomadaire"""
    __tablename__ = 'schedules'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)

    # Jour de la semaine (0=Lundi, 1=Mardi, ..., 4=Vendredi)
    weekday = db.Column(db.Integer, nullable=False)

    # Numéro de la période dans la journée
    period_number = db.Column(db.Integer, nullable=False)

    # Heures calculées automatiquement basées sur la configuration utilisateur
    start_time = db.Column(db.Time, nullable=False)
    end_time = db.Column(db.Time, nullable=False)

    __table_args__ = (
        db.UniqueConstraint('user_id', 'weekday', 'period_number', name='_user_weekday_period_uc'),
    )

    def __repr__(self):
        days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']
        return f'<Schedule {days[self.weekday]} P{self.period_number} - {self.classroom.name}>'



================================================================================
FICHIER: student.py
LOCALISATION: models/student.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/student.py
================================================================================

from extensions import db
from datetime import datetime

class Student(db.Model):
    """Modèle pour les élèves"""
    __tablename__ = 'students'

    id = db.Column(db.Integer, primary_key=True)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)
    first_name = db.Column(db.String(100), nullable=False)
    last_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120))
    date_of_birth = db.Column(db.Date)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relations
    classroom = db.relationship('Classroom', backref=db.backref('students', lazy='dynamic'))
    grades = db.relationship('Grade', backref='student', lazy='dynamic', cascade='all, delete-orphan')

    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"

    def initials(self):
        """Retourne les initiales de l'élève"""
        initials = self.first_name[0].upper() if self.first_name else ''
        if self.last_name:
            initials += self.last_name[0].upper()
        return initials

    def __repr__(self):
        return f'<Student {self.full_name}>'


class Grade(db.Model):
    """Modèle pour les notes des élèves"""
    __tablename__ = 'grades'

    id = db.Column(db.Integer, primary_key=True)
    student_id = db.Column(db.Integer, db.ForeignKey('students.id'), nullable=False)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)
    title = db.Column(db.String(200), nullable=False)
    grade = db.Column(db.Float, nullable=False)
    max_grade = db.Column(db.Float, default=20.0)  # Note sur 20 par défaut
    coefficient = db.Column(db.Float, default=1.0)
    date = db.Column(db.Date, nullable=False)
    comment = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relations
    classroom = db.relationship('Classroom', backref=db.backref('grades', lazy='dynamic'))

    @property
    def percentage(self):
        """Retourne la note en pourcentage"""
        if self.max_grade > 0:
            return (self.grade / self.max_grade) * 100
        return 0

    def __repr__(self):
        return f'<Grade {self.title} - {self.grade}/{self.max_grade}>'


class ClassFile(db.Model):
    """Modèle pour les fichiers de classe"""
    __tablename__ = 'class_files'

    id = db.Column(db.Integer, primary_key=True)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)
    original_filename = db.Column(db.String(255), nullable=False)
    file_type = db.Column(db.String(50))
    file_size = db.Column(db.Integer)  # Taille en octets
    description = db.Column(db.Text)
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relations
    classroom = db.relationship('Classroom', backref=db.backref('files', lazy='dynamic'))

    def __repr__(self):
        return f'<ClassFile {self.original_filename}>'


class Chapter(db.Model):
    """Modèle pour les chapitres"""
    __tablename__ = 'chapters'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    order_index = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relations
    user = db.relationship('User', backref=db.backref('chapters', lazy='dynamic'))
    classroom_chapters = db.relationship('ClassroomChapter', backref='chapter', lazy='dynamic', cascade='all, delete-orphan')

    def __repr__(self):
        return f'<Chapter {self.name}>'


class ClassroomChapter(db.Model):
    """Table de liaison entre Classroom et Chapter"""
    __tablename__ = 'classroom_chapters'

    id = db.Column(db.Integer, primary_key=True)
    classroom_id = db.Column(db.Integer, db.ForeignKey('classrooms.id'), nullable=False)
    chapter_id = db.Column(db.Integer, db.ForeignKey('chapters.id'), nullable=False)
    is_current = db.Column(db.Boolean, default=True)  # Indique si c'est un chapitre en cours
    start_date = db.Column(db.Date)
    end_date = db.Column(db.Date)

    # Relations
    classroom = db.relationship('Classroom', backref=db.backref('classroom_chapters', lazy='dynamic'))

    __table_args__ = (
        db.UniqueConstraint('classroom_id', 'chapter_id', name='_classroom_chapter_uc'),
    )

    def __repr__(self):
        return f'<ClassroomChapter {self.classroom_id}-{self.chapter_id}>'



================================================================================
FICHIER: user.py
LOCALISATION: models/user.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/models/user.py
================================================================================

from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from extensions import db, login_manager
from datetime import datetime

class User(UserMixin, db.Model):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(255))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Configuration initiale
    setup_completed = db.Column(db.Boolean, default=False)  # Configuration de base complétée
    schedule_completed = db.Column(db.Boolean, default=False)  # Horaire type complété
    school_year_start = db.Column(db.Date)
    school_year_end = db.Column(db.Date)

    # Horaires
    day_start_time = db.Column(db.Time)
    day_end_time = db.Column(db.Time)
    period_duration = db.Column(db.Integer)  # en minutes
    break_duration = db.Column(db.Integer)  # en minutes

    # Relations
    classrooms = db.relationship('Classroom', backref='teacher', lazy='dynamic', cascade='all, delete-orphan')
    holidays = db.relationship('Holiday', backref='teacher', lazy='dynamic', cascade='all, delete-orphan')
    breaks = db.relationship('Break', backref='teacher', lazy='dynamic', cascade='all, delete-orphan')
    schedules = db.relationship('Schedule', backref='teacher', lazy='dynamic', cascade='all, delete-orphan')

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.username}>'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

class Holiday(db.Model):
    __tablename__ = 'holidays'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date, nullable=False)

class Break(db.Model):
    __tablename__ = 'breaks'

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    start_time = db.Column(db.Time, nullable=False)
    end_time = db.Column(db.Time, nullable=False)
    is_major_break = db.Column(db.Boolean, default=False)  # Grande pause comme pause midi



================================================================================
FICHIER: calendar.css
LOCALISATION: static/css/calendar.css
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/css/calendar.css
================================================================================

/* Conteneur principal du calendrier */
.calendar-container {
    max-width: 1400px;
    margin: 0 auto;
}

/* En-tête du calendrier */
.calendar-header {
    background-color: var(--white);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 2rem;
}

.calendar-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
}

.nav-btn {
    width: 40px;
    height: 40px;
    border: none;
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.nav-btn:hover {
    background-color: var(--primary-color);
    color: var(--white);
}

.current-week-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0 1rem;
    min-width: 400px;
    text-align: center;
}

.btn-today {
    margin-left: 2rem;
}

/* Layout principal avec deux colonnes */
.calendar-main {
    display: grid;
    grid-template-columns: 1.8fr 1.2fr;
    gap: 2rem;
    transition: grid-template-columns 0.3s ease;
}

/* Mode vue étendue */
.calendar-main.extended-view {
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

/* Bouton de basculement de vue */
.btn-toggle-view {
    margin-left: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Vue hebdomadaire */
.weekly-view {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    position: relative;
    overflow: hidden;
}

/* En mode étendu, réduire la vue hebdomadaire */
.extended-view .weekly-view {
    padding: 1rem;
}

.extended-view .weekly-schedule {
    overflow-x: auto;
    font-size: 0.85rem;
}

.extended-view .schedule-table {
    min-width: unset;
    width: 100%;
}

.extended-view .schedule-table th,
.extended-view .schedule-table td {
    padding: 0.5rem 0.25rem;
    font-size: 0.8rem;
}

.extended-view .time-column {
    width: 60px;
}

.extended-view .day-name {
    font-size: 0.875rem;
}

.extended-view .day-date {
    font-size: 0.75rem;
}

.extended-view .period-number {
    font-size: 0.875rem;
}

.extended-view .period-time {
    font-size: 0.65rem;
}

.extended-view .weekly-view .section-title {
    font-size: 1rem;
}

.extended-view .weekly-view .schedule-table {
    font-size: 0.875rem;
}

.extended-view .weekly-view .class-name {
    font-size: 0.75rem;
}

.section-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    font-size: 1.25rem;
    color: var(--dark-color);
}

.weekly-schedule {
    overflow-x: auto;
}

.schedule-table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
}

.schedule-table td {
    padding: 0;
    border: 1px solid var(--light-gray);
    position: relative;
}

.schedule-table th {
    padding: 0.75rem;
    border: 1px solid var(--light-gray);
}

.schedule-table th {
    background-color: var(--light-gray);
    font-weight: 600;
    position: sticky;
    top: 0;
    z-index: 10;
}

.time-column {
    width: 100px;
    background-color: #F9FAFB;
}

.day-header {
    text-align: center;
}

.day-header.today {
    background-color: #FEF3C7;
}

.day-name {
    font-size: 1rem;
    font-weight: 600;
}

.day-date {
    font-size: 0.875rem;
    color: var(--gray-color);
}

.time-slot {
    background-color: #F9FAFB;
    font-weight: 500;
    text-align: center;
    padding: 0.75rem;
}

.period-number {
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.period-time {
    font-size: 0.75rem;
    color: var(--gray-color);
    line-height: 1.2;
}

.schedule-cell {
    position: relative;
    height: auto;
    min-height: 100px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    vertical-align: top;
    padding: 2px;
}

.extended-view .schedule-cell {
    min-height: 80px;
}

.schedule-cell:hover {
    background-color: var(--light-gray);
}

.schedule-cell.today {
    background-color: #FEF3C7;
}

.class-block {
    padding: 0.5rem;
    color: white;
    font-size: 0.875rem;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    gap: 0.25rem;
    overflow: visible;
    position: static;
    margin: 0;
    border-radius: 0.375rem;
    min-height: calc(100% - 4px);
}

.class-block.planned {
    opacity: 1;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.class-name {
    font-weight: 600;
    white-space: normal;
    word-wrap: break-word;
    line-height: 1.2;
}

.class-subject {
    font-size: 0.75rem;
    opacity: 0.9;
    white-space: normal;
    word-wrap: break-word;
    line-height: 1.2;
}

.planning-title {
    font-size: 0.75rem;
    margin-top: 0.25rem;
    white-space: normal;
    word-wrap: break-word;
    font-style: italic;
    opacity: 0.9;
    line-height: 1.2;
}

/* Styles pour les indicateurs de checklist */
.checklist-summary {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.65rem;
    margin-top: 0.125rem;
}

.checklist-icon {
    font-size: 0.75rem;
}

.checklist-icon.all-checked {
    color: #10B981;
}

.checklist-icon.partial {
    color: #F59E0B;
}

.checklist-icon.none-checked {
    color: #EF4444;
}

.checklist-count {
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
}

/* Vue annuelle */
.annual-view {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    overflow: hidden;
}

/* En mode étendu, agrandir la vue annuelle */
.extended-view .annual-view {
    padding: 1.5rem;
}

.extended-view .annual-calendar {
    max-height: 700px;
}

.extended-view .annual-grid {
    gap: 0.5rem;
}

.extended-view .annual-week {
    gap: 0.5rem;
    padding: 0.25rem 0;
}

.extended-view .week-info {
    min-width: 60px;
}

.extended-view .week-days {
    gap: 0.25rem;
}

.extended-view .week-date {
    font-size: 0.75rem;
}

.extended-view .week-number {
    font-size: 0.875rem;
}

.extended-view .holiday-label {
    font-size: 0.75rem;
}

.class-tabs {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    overflow-x: auto;
}

.tab-btn {
    padding: 0.5rem 1rem;
    border: none;
    background-color: var(--light-gray);
    border-radius: var(--border-radius) var(--border-radius) 0 0;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    border-bottom: 3px solid transparent;
    white-space: nowrap;
}

.tab-btn:hover {
    background-color: #E5E7EB;
}

.tab-btn.active {
    background-color: var(--white);
    border-bottom-width: 3px;
}

.annual-calendar {
    max-height: 650px;
    overflow-y: auto;
}

.annual-grid {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.annual-week {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.annual-week.current-week {
    background-color: #FEF3C7;
    padding: 0.25rem;
    border-radius: 0.25rem;
}

.annual-week.holiday-week {
    background-color: #F3F4F6;
    opacity: 0.8;
}

.week-info {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    min-width: 80px;
    margin-right: 0.25rem;
    flex-shrink: 0;
}

.week-date {
    font-size: 0.625rem;
    color: var(--gray-color);
    margin-bottom: 0.125rem;
}

.week-number {
    font-size: 0.75rem;
    color: var(--gray-color);
    text-align: right;
    font-weight: 500;
    width: 100%;
}

/* Style pour les numéros de semaine cliquables */
.week-number-link {
    cursor: pointer;
    padding: 2px 4px;
    border-radius: 3px;
    transition: all 0.2s ease;
    display: inline-block;
}

.week-number-link:hover {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

/* Indicateur visuel au survol de toute la zone cliquable */
.week-number[onclick] {
    cursor: pointer;
}

.week-number[onclick]:hover .week-number-link {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

.holiday-label {
    font-size: 0.5rem;
    color: var(--warning-color);
    font-style: italic;
    display: block;
    text-align: right;
    line-height: 1.1;
    word-wrap: break-word;
    hyphens: auto;
    max-width: 75px;
}

.week-days {
    display: flex;
    gap: 0.25rem;
    flex: 1;
}

.holiday-block {
    padding: 0.5rem;
    text-align: center;
    color: var(--warning-color);
    font-size: 0.75rem;
    font-style: italic;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.holiday-day-name {
    word-wrap: break-word;
    hyphens: auto;
}

.annual-day.holiday {
    opacity: 0.5;
    cursor: default;
}

.annual-day.holiday:hover {
    transform: none;
}

/* Animation de chargement pour la vue hebdomadaire */
.weekly-view-loading {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
}

.weekly-view.loading .weekly-view-loading {
    opacity: 1;
    pointer-events: all;
}

/* Animation de glissement pour la vue hebdomadaire */
@keyframes slideOutLeft {
    from {
        transform: translateX(0);
        opacity: 1;
    }
    to {
        transform: translateX(-20px);
        opacity: 0;
    }
}

@keyframes slideInRight {
    from {
        transform: translateX(20px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.weekly-view.slide-out .weekly-schedule {
    animation: slideOutLeft 0.3s ease-out;
}

.weekly-view.slide-in .weekly-schedule {
    animation: slideInRight 0.3s ease-out;
}

.annual-day {
    width: 45px;
    height: 45px;
    background-color: var(--light-gray);
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

/* Mode étendu - cases plus grandes */
.extended-view .annual-day {
    width: 72px;
    height: auto;
    min-height: 72px;
    border-radius: 0.375rem;
}

.annual-day.has-class {
    background-color: var(--primary-color);
    cursor: pointer;
}

/* Couleur personnalisée basée sur la classe sélectionnée */
.annual-grid[data-classroom-color] .annual-day.has-class {
    background-color: var(--classroom-color);
}

.annual-day.today {
    border: 2px solid var(--warning-color);
    box-shadow: 0 0 0 2px rgba(245, 158, 11, 0.2);
}

.annual-day:hover {
    transform: scale(1.1);
}

.annual-day.has-class:hover {
    filter: brightness(1.1);
}

/* Contenu des jours en vue annuelle */
.annual-day-content {
    width: 100%;
    height: 100%;
    position: relative;
    padding: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Plannings en mode normal - afficher comme des points */
.annual-plannings {
    display: flex;
    flex-wrap: wrap;
    gap: 2px;
    justify-content: center;
    align-items: center;
}

.annual-planning-item {
    width: 4px;
    height: 4px;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
}

.annual-planning-text {
    display: none;
}

.annual-planning-more {
    display: none;
}

/* Indicateurs de checklist pour la vue annuelle normale */
.annual-planning-checklist {
    display: flex;
    align-items: center;
    justify-content: center;
}

.annual-checklist-icon {
    font-size: 0.5rem;
    color: white;
}

/* Mode étendu - afficher le texte et les indicateurs */
.extended-view .annual-day-content {
    align-items: flex-start;
    justify-content: flex-start;
    padding: 3px;
    overflow: hidden;
    width: 100%;
    height: 100%;
}

.extended-view .annual-plannings {
    flex-direction: column;
    width: 100%;
    gap: 1px;
    max-height: none;
}

.extended-view .annual-planning-item {
    width: 100%;
    height: auto;
    background-color: rgba(255, 255, 255, 0.25);
    border-radius: 2px;
    padding: 3px 4px;
    margin-bottom: 2px;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    overflow: hidden;
}

.extended-view .annual-planning-checklist {
    flex-shrink: 0;
}

.extended-view .annual-planning-text {
    display: block;
    color: white;
    font-size: 0.5rem;
    line-height: 1.2;
    white-space: normal;
    word-wrap: break-word;
    word-break: break-word;
    overflow: hidden;
    font-weight: 500;
    max-width: 100%;
    flex: 1;
}

.extended-view .annual-planning-more {
    display: block;
    font-size: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-align: center;
    width: 100%;
}

.annual-legend {
    display: flex;
    gap: 1.5rem;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--light-gray);
    flex-wrap: wrap;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--gray-color);
}

.legend-box {
    width: 20px;
    height: 20px;
    border-radius: 0.25rem;
    background-color: var(--light-gray);
}

.legend-box.has-class {
    background-color: var(--primary-color);
}

.legend-box.today {
    border: 2px solid var(--warning-color);
}

/* Modal de planification */
.planning-modal {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    padding: 2rem;
}

.planning-modal.show {
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background-color: var(--white);
    border-radius: var(--border-radius);
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--shadow-lg);
    animation: slideUp 0.3s ease-out;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--light-gray);
}

.modal-header h3 {
    margin: 0;
}

.modal-close {
    width: 40px;
    height: 40px;
    border: none;
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.modal-close:hover {
    background-color: #E5E7EB;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid var(--light-gray);
}

/* Styles pour la planification journalière */
.period-planning-section {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    background-color: var(--light-gray);
    margin-bottom: 1rem;
}

.period-planning-section h4 {
    margin-bottom: 1rem;
    color: var(--gray-color);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1rem;
}

.period-planning-section .form-group {
    margin-bottom: 0.75rem;
}

.period-planning-section .form-group:last-child {
    margin-bottom: 0;
}

.loading-spinner {
    text-align: center;
    padding: 2rem;
    color: var(--gray-color);
}

.loading-spinner i {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

/* Styles pour l'affichage des périodes passées */
.past-period-description {
    background-color: #F9FAFB;
    border: 1px solid #E5E7EB;
    border-radius: 0.375rem;
    padding: 1rem;
    min-height: 60px;
}

.checklist-item {
    display: flex;
    align-items: center;
    margin: 0.5rem 0;
    padding: 0.25rem 0;
}

.checklist-item.completed {
    color: #10B981;
}

.checklist-item.not-completed {
    color: #EF4444;
}

.checklist-item i {
    margin-right: 0.5rem;
}

.checklist-help {
    font-size: 0.75rem;
    color: var(--gray-color);
    margin-top: 0.5rem;
    font-style: italic;
}

/* Animations */
@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes pulse {
    0% {
        opacity: 1;
    }
    50% {
        opacity: 0.7;
        transform: scale(0.98);
    }
    100% {
        opacity: 1;
        transform: scale(1);
    }
}

/* Responsive */
@media (max-width: 1024px) {
    .calendar-main {
        grid-template-columns: 1fr;
    }

    .calendar-main.extended-view {
        grid-template-columns: 1fr;
    }

    .annual-view {
        order: 2;
    }

    .btn-toggle-view {
        display: none;
    }
}

@media (max-width: 768px) {
    .calendar-nav {
        flex-direction: column;
    }

    .current-week-title {
        min-width: auto;
        font-size: 1.25rem;
    }

    .btn-today {
        margin-left: 0;
    }
}



================================================================================
FICHIER: file_manager.css
LOCALISATION: static/css/file_manager.css
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/css/file_manager.css
================================================================================

/* Conteneur principal */
.file-manager-container {
    max-width: 1400px;
    margin: 0 auto;
    min-height: calc(100vh - 200px);
}

/* En-tête */
.file-manager-header {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    margin-bottom: 1.5rem;
}

.header-top {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.header-top h1 {
    margin: 0;
    font-size: 1.75rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.header-actions {
    display: flex;
    gap: 1rem;
}

/* Fil d'ariane */
.breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--gray-color);
    margin-bottom: 1rem;
}

.breadcrumb-item {
    color: var(--gray-color);
    text-decoration: none;
    transition: color 0.2s ease;
}

.breadcrumb-item:hover {
    color: var(--primary-color);
}

.breadcrumb-separator {
    color: #D1D5DB;
}

/* Barre de stockage */
.storage-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.storage-bar {
    flex: 1;
    height: 8px;
    background-color: var(--light-gray);
    border-radius: 4px;
    overflow: hidden;
}

.storage-used {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    transition: width 0.3s ease;
}

.storage-text {
    font-size: 0.875rem;
    color: var(--gray-color);
}

/* Explorateur de fichiers */
.file-explorer {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    min-height: 500px;
    position: relative;
}

/* Zone de drop */
.drop-zone {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(79, 70, 229, 0.1);
    border: 3px dashed var(--primary-color);
    border-radius: var(--border-radius);
    display: none;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    gap: 1rem;
    z-index: 10;
}

.drop-zone.active {
    display: flex;
}

.drop-zone i {
    font-size: 4rem;
    color: var(--primary-color);
    opacity: 0.5;
}

.drop-zone p {
    font-size: 1.25rem;
    color: var(--primary-color);
    font-weight: 500;
}

/* Grille de fichiers */
.file-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    gap: 1rem;
}

/* Items (fichiers et dossiers) */
.file-item {
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    height: 180px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
}

.file-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    background-color: #E5E7EB;
}

.file-item.selected {
    border: 2px solid var(--primary-color);
    background-color: rgba(79, 70, 229, 0.1);
}

/* Icônes des items */
.item-icon {
    font-size: 3rem;
    margin-bottom: 0.75rem;
}

.item-icon .thumbnail {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 0.375rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Nom des items */
.item-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--dark-color);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
    margin-bottom: 0.25rem;
}

/* Info des items */
.item-info {
    font-size: 0.75rem;
    color: var(--gray-color);
}

/* Actions des items */
.item-actions {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    display: none;
    gap: 0.25rem;
    background-color: rgba(255, 255, 255, 0.95);
    padding: 0.25rem;
    border-radius: 0.375rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.file-item:hover .item-actions {
    display: flex;
}

.action-btn {
    width: 28px;
    height: 28px;
    border: none;
    background-color: transparent;
    color: var(--gray-color);
    border-radius: 0.25rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    text-decoration: none;
}

.action-btn:hover {
    background-color: var(--light-gray);
    color: var(--primary-color);
}

.action-btn.danger:hover {
    background-color: #FEE2E2;
    color: var(--danger-color);
}

/* État vide */
.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--gray-color);
}

.empty-state i {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.3;
}

.empty-state p {
    margin-bottom: 0.5rem;
}

.text-muted {
    font-size: 0.875rem;
    opacity: 0.7;
}

/* Modals */
.modal {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    padding: 2rem;
    align-items: center;
    justify-content: center;
}

.modal.show {
    display: flex;
}

.modal-content {
    background-color: var(--white);
    border-radius: var(--border-radius);
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: var(--shadow-lg);
    animation: slideUp 0.3s ease-out;
}

.modal-content.modal-large {
    max-width: 900px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--light-gray);
}

.modal-header h3 {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.modal-close {
    width: 40px;
    height: 40px;
    border: none;
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.modal-close:hover {
    background-color: #E5E7EB;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid var(--light-gray);
}

/* Sélecteur de couleur */
.color-picker-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.75rem;
}

.color-picker-grid input[type="radio"] {
    display: none;
}

.color-picker-grid label {
    width: 50px;
    height: 50px;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
}

.color-picker-grid label:hover {
    transform: scale(1.1);
}

.color-picker-grid input[type="radio"]:checked + label::after {
    content: '✓';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 1.5rem;
    font-weight: bold;
}

/* Aperçu de fichiers */
.preview-content {
    max-height: 600px;
    overflow: auto;
    text-align: center;
}

.preview-content img {
    max-width: 100%;
    height: auto;
    border-radius: var(--border-radius);
}

.preview-content iframe {
    width: 100%;
    height: 600px;
    border: none;
    border-radius: var(--border-radius);
}

/* Barre de progression d'upload */
.upload-progress {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow-lg);
    min-width: 300px;
    display: none;
    z-index: 1001;
}

.upload-progress.show {
    display: block;
    animation: slideUp 0.3s ease-out;
}

.progress-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.progress-bar {
    height: 8px;
    background-color: var(--light-gray);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.5rem;
}

.progress-fill {
    height: 100%;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
    width: 0%;
}

.progress-info {
    font-size: 0.875rem;
    color: var(--gray-color);
}

/* Animations */
@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Menu contextuel */
.context-menu {
    position: fixed;
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    padding: 0.5rem;
    min-width: 200px;
    display: none;
    z-index: 1002;
}

.context-menu.show {
    display: block;
}

.context-menu-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.context-menu-item:hover {
    background-color: var(--light-gray);
}

.context-menu-item.danger {
    color: var(--danger-color);
}

.context-menu-separator {
    height: 1px;
    background-color: var(--light-gray);
    margin: 0.5rem 0;
}

/* Responsive */
@media (max-width: 768px) {
    .header-top {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }

    .header-actions {
        width: 100%;
        justify-content: stretch;
    }

    .header-actions .btn {
        flex: 1;
    }

    .file-grid {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 0.75rem;
    }

    .file-item {
        height: 150px;
        padding: 0.75rem;
    }

    .item-icon {
        font-size: 2.5rem;
    }

    .item-icon .thumbnail {
        width: 60px;
        height: 60px;
    }

    .item-name {
        font-size: 0.75rem;
    }

    .modal {
        padding: 1rem;
    }

    .upload-progress {
        left: 1rem;
        right: 1rem;
        bottom: 1rem;
    }
}



================================================================================
FICHIER: style.css
LOCALISATION: static/css/style.css
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/css/style.css
================================================================================

/* Variables CSS */
:root {
    --primary-color: #4F46E5;
    --primary-hover: #4338CA;
    --secondary-color: #06B6D4;
    --success-color: #10B981;
    --warning-color: #F59E0B;
    --danger-color: #EF4444;
    --dark-color: #1F2937;
    --gray-color: #6B7280;
    --light-gray: #F3F4F6;
    --white: #FFFFFF;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    --border-radius: 0.5rem;
}

/* Reset et base */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    font-size: 16px;
    line-height: 1.6;
    color: var(--dark-color);
    background-color: #F9FAFB;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Navigation */
.navbar {
    background-color: var(--white);
    box-shadow: var(--shadow-sm);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav-brand {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary-color);
}

.nav-brand i {
    font-size: 1.75rem;
}

.nav-menu {
    display: flex;
    gap: 2rem;
}

.nav-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--gray-color);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-link:hover,
.nav-link.active {
    color: var(--primary-color);
}

.nav-auth {
    display: flex;
    gap: 1rem;
}

/* Boutons */
.btn {
    padding: 0.5rem 1.5rem;
    border-radius: var(--border-radius);
    font-weight: 500;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    font-size: 1rem;
}

.btn-primary {
    background-color: var(--primary-color);
    color: var(--white);
}

.btn-primary:hover {
    background-color: var(--primary-hover);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.btn-outline {
    background-color: transparent;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
}

.btn-outline:hover {
    background-color: var(--primary-color);
    color: var(--white);
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: var(--white);
}

.btn-success {
    background-color: var(--success-color);
    color: var(--white);
}

.btn-success:hover {
    background-color: #059669;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.btn-danger {
    background-color: var(--danger-color);
    color: var(--white);
}

.btn-danger:hover {
    background-color: #DC2626;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

/* User dropdown */
.user-dropdown {
    position: relative;
}

.user-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: var(--light-gray);
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-size: 1rem;
    color: var(--dark-color);
    transition: background-color 0.3s ease;
}

.user-btn:hover {
    background-color: #E5E7EB;
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    min-width: 200px;
    display: none;
    animation: slideDown 0.2s ease-out;
}

.user-dropdown:hover .dropdown-menu {
    display: block;
}

.dropdown-menu a {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: var(--dark-color);
    text-decoration: none;
    transition: background-color 0.2s ease;
}

.dropdown-menu a:hover {
    background-color: var(--light-gray);
}

/* Messages flash */
.flash-container {
    max-width: 1200px;
    margin: 1rem auto;
    padding: 0 2rem;
}

.flash-message {
    padding: 1rem;
    border-radius: var(--border-radius);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
    animation: slideInRight 0.3s ease-out;
}

.flash-success {
    background-color: #D1FAE5;
    color: #065F46;
    border: 1px solid #6EE7B7;
}

.flash-error {
    background-color: #FEE2E2;
    color: #991B1B;
    border: 1px solid #FCA5A5;
}

.flash-info {
    background-color: #DBEAFE;
    color: #1E40AF;
    border: 1px solid #93C5FD;
}

.flash-close {
    margin-left: auto;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.25rem;
    color: inherit;
    opacity: 0.7;
    transition: opacity 0.2s ease;
}

.flash-close:hover {
    opacity: 1;
}

/* Contenu principal */
.main-content {
    flex: 1;
    max-width: 1200px;
    width: 100%;
    margin: 2rem auto;
    padding: 0 2rem;
}

/* Cartes */
.card {
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    padding: 2rem;
    margin-bottom: 2rem;
}

.card-header {
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--light-gray);
}

.card-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--dark-color);
}

/* Formulaires */
.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--dark-color);
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #D1D5DB;
    border-radius: var(--border-radius);
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

.form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
}

/* Color picker personnalisé */
.color-picker-wrapper {
    position: relative;
}

.color-picker {
    width: 100%;
    height: 45px;
    padding: 0.25rem;
    border: 1px solid #D1D5DB;
    border-radius: var(--border-radius);
    cursor: pointer;
}

/* Footer */
.footer {
    background-color: var(--dark-color);
    color: var(--white);
    padding: 2rem 0;
    margin-top: auto;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    text-align: center;
}

.footer-content p {
    margin: 0.5rem 0;
}

/* Animations */
@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(20px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Responsive */
@media (max-width: 768px) {
    .nav-container {
        flex-wrap: wrap;
        padding: 1rem;
    }

    .nav-menu {
        width: 100%;
        order: 3;
        margin-top: 1rem;
        gap: 1rem;
        justify-content: center;
    }

    .main-content {
        padding: 0 1rem;
    }

    .form-row {
        grid-template-columns: 1fr;
    }
}

/* Ajoutez ces styles à la fin du fichier style.css existant */

/* Indication visuelle pour le cours actuel dans la navigation */
.nav-link.current-lesson {
    position: relative;
}

.nav-link.current-lesson::after {
    content: '';
    position: absolute;
    top: 50%;
    right: -10px;
    transform: translateY(-50%);
    width: 8px;
    height: 8px;
    background-color: var(--warning-color);
    border-radius: 50%;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        opacity: 1;
        transform: translateY(-50%) scale(1);
    }
    50% {
        opacity: 0.6;
        transform: translateY(-50%) scale(1.2);
    }
    100% {
        opacity: 1;
        transform: translateY(-50%) scale(1);
    }
}

/* Style spécial quand c'est le cours actuel */
.nav-link.lesson-active {
    color: var(--warning-color) !important;
    font-weight: 600;
}
/* Boutons de petite taille */
.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

.btn-outline.btn-sm {
    padding: 0.25rem 0.75rem;
}

/* Styles pour la page de gestion des classes */
.form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
}

/* Animation de chargement pour les futures requêtes AJAX */
.loading {
    position: relative;
    pointer-events: none;
    opacity: 0.6;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
}



================================================================================
FICHIER: calendar.js
LOCALISATION: static/js/calendar.js
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/js/calendar.js
================================================================================

// Fonctions utilitaires pour les calendriers

// Formater une date au format YYYY-MM-DD
function formatDateISO(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Obtenir le nom du jour en français
function getDayName(dayIndex) {
    const days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'];
    return days[dayIndex];
}

// Obtenir le nom du mois en français
function getMonthName(monthIndex) {
    const months = [
        'janvier', 'février', 'mars', 'avril', 'mai', 'juin',
        'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'
    ];
    return months[monthIndex];
}

// Calculer le numéro de semaine
function getWeekNumber(date) {
    const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    const dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}

// Obtenir les dates de la semaine
function getWeekDates(date) {
    const week = [];
    const startDate = new Date(date);
    const dayOfWeek = startDate.getDay();
    const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Ajuster pour commencer le lundi

    startDate.setDate(startDate.getDate() + diff);

    for (let i = 0; i < 5; i++) { // Lundi à Vendredi
        const day = new Date(startDate);
        day.setDate(startDate.getDate() + i);
        week.push(day);
    }

    return week;
}

// Vérifier si deux dates sont le même jour
function isSameDay(date1, date2) {
    return date1.getFullYear() === date2.getFullYear() &&
           date1.getMonth() === date2.getMonth() &&
           date1.getDate() === date2.getDate();
}

// Créer un élément de classe pour l'affichage
function createClassElement(classroom, title = null) {
    const div = document.createElement('div');
    div.className = 'class-block';
    div.style.backgroundColor = classroom.color;

    const nameDiv = document.createElement('div');
    nameDiv.className = 'class-name';
    nameDiv.textContent = classroom.name;
    div.appendChild(nameDiv);

    if (classroom.subject) {
        const subjectDiv = document.createElement('div');
        subjectDiv.className = 'class-subject';
        subjectDiv.textContent = classroom.subject;
        div.appendChild(subjectDiv);
    }

    if (title) {
        const titleDiv = document.createElement('div');
        titleDiv.className = 'planning-title';
        titleDiv.textContent = title;
        div.appendChild(titleDiv);
    }

    return div;
}

// Gestion des tooltips
function initTooltips() {
    const tooltipElements = document.querySelectorAll('[title]');
    tooltipElements.forEach(element => {
        const title = element.getAttribute('title');
        element.removeAttribute('title');

        element.addEventListener('mouseenter', (e) => {
            showTooltip(e.target, title);
        });

        element.addEventListener('mouseleave', () => {
            hideTooltip();
        });
    });
}

function showTooltip(element, text) {
    hideTooltip(); // Cacher tout tooltip existant

    const tooltip = document.createElement('div');
    tooltip.className = 'calendar-tooltip';
    tooltip.textContent = text;
    document.body.appendChild(tooltip);

    const rect = element.getBoundingClientRect();
    tooltip.style.left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + 'px';
    tooltip.style.top = rect.top - tooltip.offsetHeight - 5 + 'px';

    // Ajuster si le tooltip sort de l'écran
    if (tooltip.offsetLeft < 0) {
        tooltip.style.left = '5px';
    } else if (tooltip.offsetLeft + tooltip.offsetWidth > window.innerWidth) {
        tooltip.style.left = window.innerWidth - tooltip.offsetWidth - 5 + 'px';
    }

    if (tooltip.offsetTop < 0) {
        tooltip.style.top = rect.bottom + 5 + 'px';
    }
}

function hideTooltip() {
    const tooltip = document.querySelector('.calendar-tooltip');
    if (tooltip) {
        tooltip.remove();
    }
}

// Gestion du scroll synchronisé pour les vues multiples
function initSynchronizedScroll() {
    const scrollContainers = document.querySelectorAll('.sync-scroll');

    scrollContainers.forEach(container => {
        container.addEventListener('scroll', () => {
            const scrollTop = container.scrollTop;
            const scrollLeft = container.scrollLeft;

            scrollContainers.forEach(otherContainer => {
                if (otherContainer !== container) {
                    if (container.classList.contains('sync-vertical')) {
                        otherContainer.scrollTop = scrollTop;
                    }
                    if (container.classList.contains('sync-horizontal')) {
                        otherContainer.scrollLeft = scrollLeft;
                    }
                }
            });
        });
    });
}

// Raccourcis clavier
function initKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + flèches pour naviguer entre les semaines
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case 'ArrowLeft':
                    e.preventDefault();
                    if (typeof navigateWeek === 'function') {
                        navigateWeek('prev');
                    }
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    if (typeof navigateWeek === 'function') {
                        navigateWeek('next');
                    }
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    if (typeof navigateToToday === 'function') {
                        navigateToToday();
                    }
                    break;
            }
        }
    });
}

// Impression du calendrier
function printCalendar() {
    window.print();
}

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    initTooltips();
    initSynchronizedScroll();
    initKeyboardShortcuts();
});

// Export des fonctions pour utilisation dans d'autres scripts
window.calendarUtils = {
    formatDateISO,
    getDayName,
    getMonthName,
    getWeekNumber,
    getWeekDates,
    isSameDay,
    createClassElement,
    printCalendar
};



================================================================================
FICHIER: file_manager.js
LOCALISATION: static/js/file_manager.js
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/js/file_manager.js
================================================================================

// Variables globales
let selectedItems = [];
let uploadQueue = [];
let isUploading = false;

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
    initDragAndDrop();
    initContextMenu();
    initKeyboardShortcuts();
});

// Gestion du drag & drop
function initDragAndDrop() {
    const fileExplorer = document.getElementById('fileExplorer');
    const dropZone = document.getElementById('dropZone');

    // Prévenir le comportement par défaut
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        fileExplorer.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    // Afficher la zone de drop
    ['dragenter', 'dragover'].forEach(eventName => {
        fileExplorer.addEventListener(eventName, () => {
            dropZone.classList.add('active');
        });
    });

    ['dragleave', 'drop'].forEach(eventName => {
        fileExplorer.addEventListener(eventName, () => {
            dropZone.classList.remove('active');
        });
    });

    // Gérer le drop
    fileExplorer.addEventListener('drop', handleDrop);
}

// Gérer le drop de fichiers
function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;

    handleFiles(files);
}

// Gérer la sélection de fichiers
function handleFileSelect(e) {
    const files = e.target.files;
    handleFiles(files);
}

// Traiter les fichiers sélectionnés
function handleFiles(files) {
    ([...files]).forEach(file => {
        if (validateFile(file)) {
            uploadQueue.push(file);
        }
    });

    if (uploadQueue.length > 0) {
        processUploadQueue();
    }
}

// Valider un fichier
function validateFile(file) {
    const allowedTypes = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];
    const maxSize = 80 * 1024 * 1024; // 80 MB

    if (!allowedTypes.includes(file.type)) {
        showNotification('error', `Type de fichier non autorisé: ${file.name}`);
        return false;
    }

    if (file.size > maxSize) {
        showNotification('error', `Fichier trop volumineux: ${file.name} (max 80 MB)`);
        return false;
    }

    return true;
}

// Traiter la file d'upload
async function processUploadQueue() {
    if (isUploading || uploadQueue.length === 0) return;

    isUploading = true;
    showUploadProgress();

    while (uploadQueue.length > 0) {
        const file = uploadQueue.shift();
        await uploadFile(file);
    }

    isUploading = false;
    hideUploadProgress();

    // Recharger la page pour afficher les nouveaux fichiers
    location.reload();
}

// Uploader un fichier
async function uploadFile(file) {
    const formData = new FormData();
    formData.append('file', file);
    if (currentFolderId) {
        formData.append('folder_id', currentFolderId);
    }

    try {
        const xhr = new XMLHttpRequest();

        // Mise à jour de la progression
        xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
                const percentComplete = (e.loaded / e.total) * 100;
                updateUploadProgress(percentComplete, file.name);
            }
        });

        // Promesse pour gérer la réponse
        const response = await new Promise((resolve, reject) => {
            xhr.onload = () => {
                if (xhr.status === 200) {
                    resolve(JSON.parse(xhr.responseText));
                } else {
                    reject(new Error(`Upload failed: ${xhr.status}`));
                }
            };
            xhr.onerror = reject;

            xhr.open('POST', '/files/upload');
            xhr.send(formData);
        });

        if (response.success) {
            showNotification('success', `${file.name} uploadé avec succès`);
        } else {
            showNotification('error', response.message || `Erreur lors de l'upload de ${file.name}`);
        }
    } catch (error) {
        console.error('Erreur upload:', error);
        showNotification('error', `Erreur lors de l'upload de ${file.name}`);
    }
}

// Afficher la progression d'upload
function showUploadProgress() {
    const progress = document.getElementById('uploadProgress');
    progress.classList.add('show');
}

// Masquer la progression d'upload
function hideUploadProgress() {
    const progress = document.getElementById('uploadProgress');
    progress.classList.remove('show');

    // Réinitialiser
    document.getElementById('progressFill').style.width = '0%';
    document.getElementById('progressPercent').textContent = '0%';
    document.getElementById('progressInfo').textContent = '';
}

// Mettre à jour la progression
function updateUploadProgress(percent, filename) {
    document.getElementById('progressFill').style.width = percent + '%';
    document.getElementById('progressPercent').textContent = Math.round(percent) + '%';
    document.getElementById('progressInfo').textContent = filename;
}

// Créer un nouveau dossier
function showNewFolderModal() {
    document.getElementById('newFolderModal').classList.add('show');
    document.getElementById('folderName').focus();
}

// Créer le dossier
async function createFolder(e) {
    e.preventDefault();

    const name = document.getElementById('folderName').value;
    const color = document.querySelector('input[name="folderColor"]:checked').value;

    try {
        const response = await fetch('/files/create-folder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name: name,
                color: color,
                parent_id: currentFolderId
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);
            closeModal('newFolderModal');
            location.reload();
        } else {
            showNotification('error', result.message || 'Erreur lors de la création du dossier');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la création du dossier');
    }
}

// Ouvrir un dossier
function openFolder(folderId) {
    window.location.href = `/files?folder=${folderId}`;
}

// Afficher le sélecteur de couleur pour un dossier
function showColorPicker(folderId) {
    // Pour simplifier, on pourrait créer un petit modal de sélection de couleur
    const colors = ['#4F46E5', '#7C3AED', '#EC4899', '#F59E0B', '#10B981', '#3B82F6', '#6B7280', '#EF4444'];
    const color = prompt('Choisissez une couleur (hex):', '#4F46E5');

    if (color && colors.includes(color)) {
        updateFolderColor(folderId, color);
    }
}

// Mettre à jour la couleur d'un dossier
async function updateFolderColor(folderId, color) {
    try {
        const response = await fetch('/files/update-folder-color', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: folderId,
                color: color
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);
            location.reload();
        } else {
            showNotification('error', result.message || 'Erreur lors de la mise à jour');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la mise à jour');
    }
}

// Prévisualiser un fichier
function previewFile(fileId, fileType) {
    const modal = document.getElementById('previewModal');
    const content = document.getElementById('previewContent');
    const title = document.getElementById('previewTitle');

    title.textContent = 'Aperçu';

    if (fileType === 'pdf') {
        content.innerHTML = `<iframe src="/files/preview/${fileId}"></iframe>`;
    } else {
        content.innerHTML = `<img src="/files/preview/${fileId}" alt="Aperçu">`;
    }

    modal.classList.add('show');
}

// Renommer un élément
function renameItem(type, id, currentName) {
    const modal = document.getElementById('renameModal');
    document.getElementById('renameType').value = type;
    document.getElementById('renameId').value = id;
    document.getElementById('renameName').value = currentName;

    modal.classList.add('show');
    document.getElementById('renameName').focus();
    document.getElementById('renameName').select();
}

// Sauvegarder le renommage
async function saveRename(e) {
    e.preventDefault();

    const type = document.getElementById('renameType').value;
    const id = document.getElementById('renameId').value;
    const name = document.getElementById('renameName').value;

    try {
        const response = await fetch('/files/rename', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: type,
                id: id,
                name: name
            })
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);
            closeModal('renameModal');
            location.reload();
        } else {
            showNotification('error', result.message || 'Erreur lors du renommage');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors du renommage');
    }
}

// Supprimer un fichier
async function deleteFile(fileId) {
    if (!confirm('Êtes-vous sûr de vouloir supprimer ce fichier ?')) return;

    try {
        const response = await fetch(`/files/delete-file/${fileId}`, {
            method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);
            location.reload();
        } else {
            showNotification('error', result.message || 'Erreur lors de la suppression');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la suppression');
    }
}

// Supprimer un dossier
async function deleteFolder(folderId) {
    if (!confirm('Êtes-vous sûr de vouloir supprimer ce dossier et tout son contenu ?')) return;

    try {
        const response = await fetch(`/files/delete-folder/${folderId}`, {
            method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);
            location.reload();
        } else {
            showNotification('error', result.message || 'Erreur lors de la suppression');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la suppression');
    }
}

// Fermer un modal
function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('show');
}

// Menu contextuel
function initContextMenu() {
    const fileGrid = document.getElementById('fileGrid');

    fileGrid.addEventListener('contextmenu', (e) => {
        e.preventDefault();

        const item = e.target.closest('.file-item');
        if (item) {
            showContextMenu(e, item);
        }
    });

    // Fermer le menu en cliquant ailleurs
    document.addEventListener('click', () => {
        const menu = document.querySelector('.context-menu');
        if (menu) menu.remove();
    });
}

// Afficher le menu contextuel
function showContextMenu(e, item) {
    // Supprimer tout menu existant
    const existingMenu = document.querySelector('.context-menu');
    if (existingMenu) existingMenu.remove();

    const type = item.dataset.type;
    const id = item.dataset.id;
    const name = item.querySelector('.item-name').textContent;

    const menu = document.createElement('div');
    menu.className = 'context-menu show';
    menu.style.left = e.pageX + 'px';
    menu.style.top = e.pageY + 'px';

    if (type === 'folder') {
        menu.innerHTML = `
            <div class="context-menu-item" onclick="openFolder(${id})">
                <i class="fas fa-folder-open"></i> Ouvrir
            </div>
            <div class="context-menu-item" onclick="renameItem('folder', ${id}, '${name}')">
                <i class="fas fa-edit"></i> Renommer
            </div>
            <div class="context-menu-separator"></div>
            <div class="context-menu-item danger" onclick="deleteFolder(${id})">
                <i class="fas fa-trash"></i> Supprimer
            </div>
        `;
    } else {
        menu.innerHTML = `
            <div class="context-menu-item" onclick="previewFile(${id}, '${item.querySelector('.item-icon i').classList.contains('fa-file-pdf') ? 'pdf' : 'image'}')">
                <i class="fas fa-eye"></i> Aperçu
            </div>
            <a class="context-menu-item" href="/files/download/${id}">
                <i class="fas fa-download"></i> Télécharger
            </a>
            <div class="context-menu-item" onclick="renameItem('file', ${id}, '${name}')">
                <i class="fas fa-edit"></i> Renommer
            </div>
            <div class="context-menu-separator"></div>
            <div class="context-menu-item danger" onclick="deleteFile(${id})">
                <i class="fas fa-trash"></i> Supprimer
            </div>
        `;
    }

    document.body.appendChild(menu);
}

// Raccourcis clavier
function initKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        // Escape pour fermer les modals
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal.show');
            modals.forEach(modal => modal.classList.remove('show'));
        }

        // Ctrl/Cmd + N pour nouveau dossier
        if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
            e.preventDefault();
            showNewFolderModal();
        }

        // Ctrl/Cmd + U pour upload
        if ((e.ctrlKey || e.metaKey) && e.key === 'u') {
            e.preventDefault();
            document.getElementById('fileInput').click();
        }
    });
}

// Notifications
function showNotification(type, message) {
    // Utiliser la fonction existante ou en créer une simple
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        background-color: ${type === 'success' ? '#D1FAE5' : '#FEE2E2'};
        color: ${type === 'success' ? '#065F46' : '#991B1B'};
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        z-index: 1003;
        animation: slideInRight 0.3s ease;
    `;

    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
        <span>${message}</span>
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// Animations CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);



================================================================================
FICHIER: main.js
LOCALISATION: static/js/main.js
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/js/main.js
================================================================================

// Gestion des messages flash
document.addEventListener('DOMContentLoaded', function() {
    // Auto-fermeture des messages flash après 5 secondes
    const flashMessages = document.querySelectorAll('.flash-message');
    flashMessages.forEach(message => {
        setTimeout(() => {
            message.style.opacity = '0';
            setTimeout(() => message.remove(), 300);
        }, 5000);
    });

    // Gestion du dropdown utilisateur
    const userDropdown = document.querySelector('.user-dropdown');
    if (userDropdown) {
        const userBtn = userDropdown.querySelector('.user-btn');
        const dropdownMenu = userDropdown.querySelector('.dropdown-menu');

        userBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
        });

        // Fermer le dropdown en cliquant ailleurs
        document.addEventListener('click', () => {
            if (dropdownMenu) {
                dropdownMenu.style.display = 'none';
            }
        });
    }
});

// Fonction utilitaire pour les requêtes AJAX
async function fetchJSON(url, options = {}) {
    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    };

    try {
        const response = await fetch(url, { ...defaultOptions, ...options });
        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || 'Une erreur est survenue');
        }

        return data;
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', error.message);
        throw error;
    }
}

// Système de notifications
function showNotification(type, message) {
    const container = document.querySelector('.flash-container') || createFlashContainer();

    const notification = document.createElement('div');
    notification.className = `flash-message flash-${type}`;

    const icon = document.createElement('i');
    icon.className = `fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}`;

    const text = document.createElement('span');
    text.textContent = message;

    const closeBtn = document.createElement('button');
    closeBtn.className = 'flash-close';
    closeBtn.innerHTML = '<i class="fas fa-times"></i>';
    closeBtn.onclick = () => notification.remove();

    notification.appendChild(icon);
    notification.appendChild(text);
    notification.appendChild(closeBtn);

    container.appendChild(notification);

    // Auto-fermeture après 5 secondes
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

function createFlashContainer() {
    const container = document.createElement('div');
    container.className = 'flash-container';
    document.querySelector('.main-content').prepend(container);
    return container;
}

// Formattage des dates
function formatDate(dateString) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('fr-FR', options);
}

function formatTime(timeString) {
    return timeString.substring(0, 5); // Format HH:MM
}

// Gestion des couleurs
function initColorPickers() {
    const colorInputs = document.querySelectorAll('input[type="color"]');
    colorInputs.forEach(input => {
        // Afficher la valeur hex à côté du sélecteur
        const wrapper = input.closest('.color-picker-wrapper');
        if (wrapper) {
            const valueDisplay = document.createElement('span');
            valueDisplay.className = 'color-value';
            valueDisplay.textContent = input.value;
            wrapper.appendChild(valueDisplay);

            input.addEventListener('input', (e) => {
                valueDisplay.textContent = e.target.value;
            });
        }
    });
}

// Initialisation au chargement
document.addEventListener('DOMContentLoaded', initColorPickers);



================================================================================
FICHIER: planning.js
LOCALISATION: static/js/planning.js
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/static/js/planning.js
================================================================================

// Gestion de la planification des cours
let currentPlanningData = {};

// Ouvrir le modal de planification
function openPlanningModal(cell, fromAnnualView = false) {
    currentPlanningCell = cell;
    const date = cell.dataset.date;
    const period = cell.dataset.period;

    // Si c'est depuis la vue annuelle, ouvrir le modal de planification journalière
    if (fromAnnualView) {
        openDayPlanningModal(date);
        return;
    }

    // Vérifier si la période est passée de plus de 24h
    const isPastPeriod = isPeriodPast(date, period);

    // Récupérer les données existantes
    getPlanningData(date, period).then(data => {
        if (data.success && data.planning) {
            document.getElementById('modalClassroom').value = data.planning.classroom_id || '';
            document.getElementById('modalPlanningTitle').value = data.planning.title || '';

            // Si la période est passée, afficher la description avec les indicateurs
            if (isPastPeriod && data.planning.description) {
                displayPastPeriodDescription(data.planning.description, data.planning.checklist_states);
            } else {
                document.getElementById('modalDescription').value = data.planning.description || '';
            }
        } else {
            // Réinitialiser le formulaire
            document.getElementById('modalClassroom').value = '';
            document.getElementById('modalPlanningTitle').value = '';
            document.getElementById('modalDescription').value = '';
        }

        // Adapter l'interface selon si la période est passée ou non
        const descriptionContainer = document.querySelector('.modal-body .form-group:last-child');
        const saveButton = document.querySelector('.modal-footer .btn-primary');

        if (isPastPeriod) {
            // Mode lecture seule pour les périodes passées
            document.getElementById('modalClassroom').disabled = true;
            document.getElementById('modalPlanningTitle').disabled = true;
            descriptionContainer.innerHTML = `
                <label class="form-label">Description</label>
                <div id="pastPeriodDescription" class="past-period-description"></div>
            `;
            saveButton.style.display = 'none';
        } else {
            // Mode édition normal
            document.getElementById('modalClassroom').disabled = false;
            document.getElementById('modalPlanningTitle').disabled = false;
            if (!descriptionContainer.querySelector('textarea')) {
                descriptionContainer.innerHTML = `
                    <label class="form-label">Description</label>
                    <textarea id="modalDescription" class="form-control" rows="3"
                              placeholder="Détails du cours, exercices prévus..."></textarea>
                    <div class="checklist-help" style="font-size: 0.75rem; color: var(--gray-color); margin-top: 0.5rem; font-style: italic;">
                        Astuce : Commencez une ligne par "-" pour créer une case à cocher
                    </div>
                `;
                // Réattacher l'événement de conversion des tirets
                attachDashConversion();
            }
            saveButton.style.display = '';
        }

        // Mettre à jour le titre du modal
        const dateObj = new Date(date);
        const dateStr = dateObj.toLocaleDateString('fr-FR', {
            weekday: 'long',
            day: 'numeric',
            month: 'long'
        });
        document.getElementById('modalTitle').textContent = `Planifier - ${dateStr} - Période ${period}`;

        // Afficher le modal
        document.getElementById('planningModal').classList.add('show');
    });
}

// Vérifier si une période est passée de plus de 24h
function isPeriodPast(date, periodNumber) {
    const now = new Date();
    const periodDate = new Date(date);

    // Obtenir l'heure de fin de la période depuis les données
    const period = periodsData.find(p => p.number === parseInt(periodNumber));
    if (period) {
        const [hours, minutes] = period.end.split(':');
        periodDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
    }

    // Vérifier si c'est passé de plus de 24h
    const diffHours = (now - periodDate) / (1000 * 60 * 60);
    return diffHours > 24;
}

// Afficher la description pour une période passée avec indicateurs visuels
function displayPastPeriodDescription(description, checklistStates = {}) {
    const container = document.getElementById('pastPeriodDescription');
    if (!container) return;

    const lines = description.split('\n');
    let html = '';
    let checkboxIndex = 0;

    for (const line of lines) {
        const checkboxMatch = line.match(/^(\s*)\[([ x])\]\s*(.*)$/i);

        if (checkboxMatch) {
            const indent = checkboxMatch[1];
            const content = checkboxMatch[3];
            const isChecked = checklistStates[checkboxIndex.toString()] || false;

            if (isChecked) {
                html += `<div class="checklist-item completed" style="margin-left: ${indent.length * 20}px; color: #10B981;">
                    <i class="fas fa-check-circle" style="margin-right: 0.5rem;"></i>
                    <span style="text-decoration: line-through;">${escapeHtml(content)}</span>
                </div>`;
            } else {
                html += `<div class="checklist-item not-completed" style="margin-left: ${indent.length * 20}px; color: #EF4444;">
                    <i class="fas fa-times-circle" style="margin-right: 0.5rem;"></i>
                    <span>${escapeHtml(content)}</span>
                </div>`;
            }
            checkboxIndex++;
        } else {
            html += `<div style="margin: 0.5rem 0;">${escapeHtml(line)}</div>`;
        }
    }

    container.innerHTML = html || '<p style="color: var(--gray-color);">Aucune description</p>';
}

// Fonction pour échapper le HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

// Attacher l'événement de conversion des tirets en checkboxes
function attachDashConversion() {
    const textarea = document.getElementById('modalDescription');
    if (!textarea) return;

    textarea.addEventListener('input', function(e) {
        const cursorPos = textarea.selectionStart;
        const value = textarea.value;

        // Vérifier si on vient de taper un tiret en début de ligne
        if (e.inputType === 'insertText' && e.data === '-') {
            const lines = value.substring(0, cursorPos).split('\n');
            const currentLine = lines[lines.length - 1];

            // Si le tiret est au début de la ligne (avec éventuellement des espaces avant)
            if (currentLine.trim() === '-') {
                e.preventDefault();

                // Remplacer le tiret par [ ]
                const beforeCursor = value.substring(0, cursorPos - 1);
                const afterCursor = value.substring(cursorPos);
                const spaces = currentLine.match(/^\s*/)[0]; // Préserver l'indentation

                textarea.value = beforeCursor + spaces + '[ ] ' + afterCursor;

                // Placer le curseur après [ ]
                const newCursorPos = cursorPos - 1 + spaces.length + 4;
                textarea.setSelectionRange(newCursorPos, newCursorPos);
            }
        }
    });
}

// Ouvrir le modal de planification journalière
function openDayPlanningModal(date, classroomId = null) {
    // Créer un modal pour planifier toute la journée
    const modal = document.createElement('div');
    modal.className = 'planning-modal show';
    modal.style.zIndex = '1001';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 600px; max-height: 90vh; overflow-y: auto;">
            <div class="modal-header">
                <h3>Planifier pour le ${new Date(date).toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'long' })}</h3>
                <button class="modal-close" onclick="closeDayPlanningModal(this)">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div id="dayPlanningContainer" style="display: flex; flex-direction: column; gap: 1.5rem;">
                    <div class="loading-spinner" style="text-align: center; padding: 2rem;">
                        <i class="fas fa-spinner fa-spin fa-2x"></i>
                        <p>Chargement des périodes...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeDayPlanningModal(this)">Annuler</button>
                <button class="btn btn-primary" onclick="saveDayPlanning('${date}', this)">
                    <i class="fas fa-save"></i> Enregistrer tout
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // Charger les périodes et les plannings existants
    loadDayPeriods(date, classroomId);
}

// Charger les périodes de la journée
async function loadDayPeriods(date, filterByClassroomId = null) {
    try {
        const response = await fetch(`/planning/get_available_periods/${date}`);
        const data = await response.json();

        const container = document.getElementById('dayPlanningContainer');
        container.innerHTML = '';

        if (data.success && data.periods) {
            const weekday = new Date(date).getDay();
            const adjustedWeekday = weekday === 0 ? 6 : weekday - 1; // Convertir dimanche=0 en 6, lundi=1 en 0, etc.

            // Si on filtre par classe, on récupère le nom de la classe
            let classroomName = '';
            if (filterByClassroomId) {
                const classroom = classrooms.find(c => c.id === parseInt(filterByClassroomId));
                if (classroom) {
                    classroomName = classroom.name;

                    // Ajouter un titre indiquant la classe
                    const titleDiv = document.createElement('div');
                    titleDiv.style.cssText = 'padding: 1rem; background-color: #EFF6FF; border-radius: 0.5rem; margin-bottom: 1rem;';
                    titleDiv.innerHTML = `
                        <p style="margin: 0; color: #1E40AF; font-weight: 500;">
                            <i class="fas fa-info-circle"></i>
                            Planification pour la classe <strong>${classroom.name} - ${classroom.subject}</strong>
                        </p>
                    `;
                    container.appendChild(titleDiv);
                }
            }

            // Debug: afficher les informations reçues
            console.log('FilterByClassroomId:', filterByClassroomId);
            console.log('Periods data:', data.periods);

            let hasRelevantPeriods = false;

            for (const period of data.periods) {
                // Debug: afficher les informations de chaque période
                console.log(`Period ${period.number}:`, {
                    hasSchedule: period.hasSchedule,
                    defaultClassroom: period.defaultClassroom,
                    filterByClassroomId: filterByClassroomId
                });

                // Si on filtre par classe, vérifier si cette période a cette classe dans l'horaire type
                if (filterByClassroomId) {
                    // Comparer en s'assurant que les deux valeurs sont du même type
                    const periodClassroomId = period.defaultClassroom ? parseInt(period.defaultClassroom) : null;
                    const filterClassroomId = parseInt(filterByClassroomId);

                    if (!period.hasSchedule || periodClassroomId !== filterClassroomId) {
                        console.log(`Skipping period ${period.number} - no match`);
                        continue; // Passer cette période si ce n'est pas la bonne classe
                    }
                }

                hasRelevantPeriods = true;

                // Vérifier si cette période est passée
                const isPast = isPeriodPast(date, period.number);

                // Charger les données existantes pour chaque période
                const planningResponse = await fetch(`/planning/get_planning/${date}/${period.number}`);
                const planningData = await planningResponse.json();

                let existingClassroomId = '';
                let existingTitle = '';
                let existingDescription = '';
                let existingChecklistStates = {};

                if (planningData.success && planningData.planning) {
                    existingClassroomId = planningData.planning.classroom_id || '';
                    existingTitle = planningData.planning.title || '';
                    existingDescription = planningData.planning.description || '';
                    existingChecklistStates = planningData.planning.checklist_states || {};
                } else if (period.hasSchedule && period.defaultClassroom) {
                    // Utiliser l'horaire type par défaut
                    existingClassroomId = period.defaultClassroom;
                }

                // Si on filtre par classe, pré-sélectionner cette classe
                if (filterByClassroomId && !existingClassroomId) {
                    existingClassroomId = filterByClassroomId;
                }

                const periodDiv = document.createElement('div');
                periodDiv.className = 'period-planning-section';
                periodDiv.style.cssText = 'border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background-color: #f9fafb;';

                if (isPast) {
                    // Affichage pour période passée
                    periodDiv.innerHTML = `
                        <h4 style="margin-bottom: 1rem; color: #4b5563; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-clock"></i>
                            Période ${period.number} (${period.start} - ${period.end})
                            <span style="font-size: 0.75rem; color: #6B7280; margin-left: auto;">Période terminée</span>
                        </h4>

                        <div class="form-group">
                            <label class="form-label">Classe</label>
                            <input type="text" class="form-control" value="${classrooms.find(c => c.id == existingClassroomId)?.name || 'Aucune classe'}" disabled>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Titre du cours</label>
                            <input type="text" class="form-control" value="${existingTitle}" disabled>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <div class="past-period-description" id="past-desc-${period.number}"></div>
                        </div>
                    `;

                    container.appendChild(periodDiv);

                    // Afficher la description formatée pour période passée
                    if (existingDescription) {
                        setTimeout(() => {
                            displayPastPeriodDescriptionInContainer(existingDescription, existingChecklistStates, `past-desc-${period.number}`);
                        }, 0);
                    }
                } else {
                    // Affichage normal pour période future
                    periodDiv.innerHTML = `
                        <h4 style="margin-bottom: 1rem; color: #4b5563; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-clock"></i>
                            Période ${period.number} (${period.start} - ${period.end})
                        </h4>

                        <div class="form-group">
                            <label class="form-label">Classe</label>
                            <select class="form-control" data-period="${period.number}" data-field="classroom">
                                <option value="">-- Pas de cours --</option>
                                ${classrooms.map(c => `
                                    <option value="${c.id}" ${existingClassroomId == c.id ? 'selected' : ''}>
                                        ${c.name} - ${c.subject}
                                    </option>
                                `).join('')}
                            </select>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Titre du cours</label>
                            <input type="text" class="form-control"
                                   data-period="${period.number}"
                                   data-field="title"
                                   value="${existingTitle}"
                                   placeholder="Ex: Introduction aux fractions">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control day-planning-description" rows="2"
                                      data-period="${period.number}"
                                      data-field="description"
                                      placeholder="Détails du cours, exercices prévus...">${existingDescription}</textarea>
                            <div class="checklist-help" style="font-size: 0.75rem; color: var(--gray-color); margin-top: 0.5rem; font-style: italic;">
                                Astuce : Commencez une ligne par "-" pour créer une case à cocher
                            </div>
                        </div>
                    `;

                    container.appendChild(periodDiv);
                }
            }

            // Attacher les événements de conversion des tirets pour toutes les textareas
            attachDashConversionToAll();

            if (!hasRelevantPeriods && filterByClassroomId) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 2rem; color: #6B7280;">
                        <i class="fas fa-calendar-times" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                        <p>Aucune période avec ${classroomName || 'cette classe'} ce jour-là selon votre horaire type.</p>
                        <p style="font-size: 0.875rem; margin-top: 0.5rem;">Vérifiez que vous avez bien configuré cette classe dans votre horaire type pour ce jour de la semaine.</p>
                    </div>
                `;
            } else if (!hasRelevantPeriods) {
                container.innerHTML = '<p>Aucune période disponible pour cette date.</p>';
            }
        } else {
            container.innerHTML = '<p>Aucune période disponible pour cette date.</p>';
        }
    } catch (error) {
        console.error('Erreur lors du chargement des périodes:', error);
        document.getElementById('dayPlanningContainer').innerHTML = '<p>Erreur lors du chargement des périodes.</p>';
    }
}

// Afficher la description formatée dans un container spécifique
function displayPastPeriodDescriptionInContainer(description, checklistStates, containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    const lines = description.split('\n');
    let html = '';
    let checkboxIndex = 0;

    for (const line of lines) {
        const checkboxMatch = line.match(/^(\s*)\[([ x])\]\s*(.*)$/i);

        if (checkboxMatch) {
            const indent = checkboxMatch[1];
            const content = checkboxMatch[3];
            const isChecked = checklistStates[checkboxIndex.toString()] || false;

            if (isChecked) {
                html += `<div class="checklist-item completed" style="margin-left: ${indent.length * 20}px; color: #10B981;">
                    <i class="fas fa-check-circle" style="margin-right: 0.5rem;"></i>
                    <span style="text-decoration: line-through;">${escapeHtml(content)}</span>
                </div>`;
            } else {
                html += `<div class="checklist-item not-completed" style="margin-left: ${indent.length * 20}px; color: #EF4444;">
                    <i class="fas fa-times-circle" style="margin-right: 0.5rem;"></i>
                    <span>${escapeHtml(content)}</span>
                </div>`;
            }
            checkboxIndex++;
        } else {
            html += `<div style="margin: 0.5rem 0;">${escapeHtml(line)}</div>`;
        }
    }

    container.innerHTML = html || '<p style="color: var(--gray-color);">Aucune description</p>';
}

// Attacher la conversion des tirets à toutes les textareas de planification journalière
function attachDashConversionToAll() {
    const textareas = document.querySelectorAll('.day-planning-description');
    textareas.forEach(textarea => {
        textarea.addEventListener('input', function(e) {
            const cursorPos = textarea.selectionStart;
            const value = textarea.value;

            // Vérifier si on vient de taper un tiret en début de ligne
            if (e.inputType === 'insertText' && e.data === '-') {
                const lines = value.substring(0, cursorPos).split('\n');
                const currentLine = lines[lines.length - 1];

                // Si le tiret est au début de la ligne (avec éventuellement des espaces avant)
                if (currentLine.trim() === '-') {
                    e.preventDefault();

                    // Remplacer le tiret par [ ]
                    const beforeCursor = value.substring(0, cursorPos - 1);
                    const afterCursor = value.substring(cursorPos);
                    const spaces = currentLine.match(/^\s*/)[0]; // Préserver l'indentation

                    textarea.value = beforeCursor + spaces + '[ ] ' + afterCursor;

                    // Placer le curseur après [ ]
                    const newCursorPos = cursorPos - 1 + spaces.length + 4;
                    textarea.setSelectionRange(newCursorPos, newCursorPos);
                }
            }
        });
    });
}

// Fermer le modal de planification journalière
function closeDayPlanningModal(element) {
    element.closest('.planning-modal').remove();
}

// Sauvegarder toutes les planifications de la journée
async function saveDayPlanning(date, buttonElement) {
    const modal = buttonElement.closest('.planning-modal');
    const container = modal.querySelector('#dayPlanningContainer');

    // Désactiver le bouton pendant la sauvegarde
    buttonElement.disabled = true;
    buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';

    let hasErrors = false;

    // Parcourir toutes les périodes
    const periodSections = container.querySelectorAll('.period-planning-section');

    for (const section of periodSections) {
        const classroomSelect = section.querySelector('select[data-field="classroom"]');
        const titleInput = section.querySelector('input[data-field="title"]');
        const descriptionTextarea = section.querySelector('textarea[data-field="description"]');

        // Ignorer les sections en lecture seule (périodes passées)
        if (!classroomSelect || !titleInput || !descriptionTextarea) {
            continue;
        }

        const period = classroomSelect.dataset.period;
        const classroomId = classroomSelect.value;
        const title = titleInput.value;
        const description = descriptionTextarea.value;

        // Calculer les états des checkboxes
        const checklistStates = calculateChecklistStates(description);

        // Sauvegarder uniquement si une classe est sélectionnée
        if (classroomId || title || description) {
            try {
                const response = await fetch('/planning/save_planning', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        date: date,
                        period_number: parseInt(period),
                        classroom_id: classroomId ? parseInt(classroomId) : null,
                        title: title,
                        description: description,
                        checklist_states: checklistStates
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    hasErrors = true;
                    console.error(`Erreur pour la période ${period}:`, result.message);
                }
            } catch (error) {
                hasErrors = true;
                console.error(`Erreur lors de la sauvegarde de la période ${period}:`, error);
            }
        }
    }

    if (hasErrors) {
        showNotification('error', 'Certaines planifications n\'ont pas pu être sauvegardées');
        buttonElement.disabled = false;
        buttonElement.innerHTML = '<i class="fas fa-save"></i> Enregistrer tout';
    } else {
        showNotification('success', 'Toutes les planifications ont été enregistrées');
        modal.remove();
        // Recharger la page pour afficher les changements
        location.reload();
    }
}

// Calculer les états initiaux des checkboxes (tous non cochés par défaut)
function calculateChecklistStates(description) {
    const states = {};
    if (!description) return states;

    const lines = description.split('\n');
    let checkboxIndex = 0;

    for (const line of lines) {
        if (line.match(/^(\s*)\[([ x])\]\s*(.*)$/i)) {
            // Par défaut, les nouvelles checkboxes sont non cochées
            states[checkboxIndex.toString()] = false;
            checkboxIndex++;
        }
    }

    return states;
}

// Fermer le modal
function closePlanningModal() {
    document.getElementById('planningModal').classList.remove('show');
    currentPlanningCell = null;
}

// Sauvegarder la planification
async function savePlanning() {
    if (!currentPlanningCell) return;

    const date = currentPlanningCell.dataset.date;
    const period = currentPlanningCell.dataset.period;
    const classroomId = document.getElementById('modalClassroom').value;
    const title = document.getElementById('modalPlanningTitle').value;
    const description = document.getElementById('modalDescription').value;

    // Calculer les états des checkboxes
    const checklistStates = calculateChecklistStates(description);

    try {
        const response = await fetch('/planning/save_planning', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                date: date,
                period_number: parseInt(period),
                classroom_id: classroomId ? parseInt(classroomId) : null,
                title: title,
                description: description,
                checklist_states: checklistStates
            })
        });

        const result = await response.json();

        if (result.success) {
            // Recharger la page pour afficher les changements
            location.reload();
        } else {
            showNotification('error', result.message || 'Erreur lors de la sauvegarde');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la sauvegarde');
    }
}

// Récupérer les données de planification
async function getPlanningData(date, period) {
    try {
        const response = await fetch(`/planning/get_planning/${date}/${period}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        return await response.json();
    } catch (error) {
        console.error('Erreur:', error);
        return { success: false };
    }
}

// Charger les planifications de la semaine
function loadWeeklyPlannings() {
    // Cette fonction peut être étendue pour charger dynamiquement
    // les planifications via AJAX si nécessaire
}

// Gérer le clic en dehors du modal
document.addEventListener('click', (e) => {
    const modal = document.getElementById('planningModal');
    if (e.target === modal) {
        closePlanningModal();
    }
});

// Gérer la touche Escape
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        closePlanningModal();
    }
});

// Mettre à jour la couleur de fond du select en fonction de la classe sélectionnée
document.addEventListener('DOMContentLoaded', function() {
    const classroomSelect = document.getElementById('modalClassroom');
    if (classroomSelect) {
        classroomSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption && selectedOption.dataset.color) {
                this.style.backgroundColor = selectedOption.dataset.color + '20'; // Ajouter transparence
            } else {
                this.style.backgroundColor = '';
            }
        });
    }

    // Attacher la conversion des tirets au modal principal
    attachDashConversion();
});

// Fonction pour synchroniser les vues
function syncViews(date, period, classroomId) {
    // Cette fonction peut être étendue pour synchroniser
    // la vue hebdomadaire et annuelle en temps réel

    // Pour l'instant, on recharge la page
    // Dans une version plus avancée, on pourrait utiliser WebSockets
    // ou des requêtes AJAX pour une mise à jour en temps réel
}

// Gestion du drag & drop (pour une future amélioration)
function initDragAndDrop() {
    // Permettre de glisser-déposer des planifications
    // entre différentes cellules
}

// Export des planifications (pour une future amélioration)
function exportPlannings(format) {
    // Exporter en PDF, Excel ou iCal
}

// Import des planifications (pour une future amélioration)
function importPlannings() {
    // Importer depuis un fichier
}



================================================================================
FICHIER: base.html
LOCALISATION: templates/base.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/base.html
================================================================================

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}TeacherPlanner - Planification simplifiée{% endblock %}</title>

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- CSS personnalisé -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-brand">
                <i class="fas fa-calendar-alt"></i>
                <span>TeacherPlanner</span>
            </div>

            {% if current_user.is_authenticated %}
            <div class="nav-menu">
                <a href="{{ url_for('planning.dashboard') }}" class="nav-link {% if request.endpoint == 'planning.dashboard' %}active{% endif %}">
                    <i class="fas fa-home"></i> Tableau de bord
                </a>
                <a href="{{ url_for('planning.lesson_view') }}" class="nav-link {% if request.endpoint == 'planning.lesson_view' %}active{% endif %} {% if global_has_current_lesson %}lesson-active current-lesson{% endif %}">
                    <i class="fas fa-graduation-cap"></i>
                    {% if global_has_current_lesson %}
                        Cours actuel
                    {% else %}
                        Prochain cours
                    {% endif %}
                </a>
                <a href="{{ url_for('schedule.weekly_schedule') }}" class="nav-link {% if request.endpoint == 'schedule.weekly_schedule' %}active{% endif %}">
                    <i class="fas fa-clock"></i> Horaire type
                </a>
                <a href="{{ url_for('planning.calendar_view') }}" class="nav-link {% if request.endpoint == 'planning.calendar_view' %}active{% endif %}">
                    <i class="fas fa-calendar"></i> Calendrier
                </a>
            </div>

            <div class="nav-user">
                <div class="user-dropdown">
                    <button class="user-btn">
                        <i class="fas fa-user-circle"></i>
                        <span>{{ current_user.username }}</span>
                        <i class="fas fa-chevron-down"></i>
                    </button>
                    <div class="dropdown-menu">
                        <a href="{{ url_for('setup.initial_setup') }}">
                            <i class="fas fa-cog"></i> Paramètres
                        </a>
                        <a href="{{ url_for('auth.logout') }}">
                            <i class="fas fa-sign-out-alt"></i> Déconnexion
                        </a>
                    </div>
                </div>
            </div>
            {% else %}
            <div class="nav-auth">
                <a href="{{ url_for('auth.login') }}" class="btn btn-outline">Connexion</a>
                <a href="{{ url_for('auth.register') }}" class="btn btn-primary">Inscription</a>
            </div>
            {% endif %}
        </div>
    </nav>

    <!-- Messages flash -->
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            <div class="flash-container">
                {% for category, message in messages %}
                    <div class="flash-message flash-{{ category }}">
                        <i class="fas fa-{% if category == 'success' %}check-circle{% elif category == 'error' %}exclamation-circle{% else %}info-circle{% endif %}"></i>
                        <span>{{ message }}</span>
                        <button class="flash-close" onclick="this.parentElement.remove()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

    <!-- Contenu principal -->
    <main class="main-content">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2024 TeacherPlanner. Tous droits réservés.</p>
            <p>Conçu avec <i class="fas fa-heart" style="color: #e74c3c;"></i> pour les enseignants</p>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>



================================================================================
FICHIER: login.html
LOCALISATION: templates/auth/login.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/auth/login.html
================================================================================

{% extends "base.html" %}

{% block title %}Connexion - TeacherPlanner{% endblock %}

{% block content %}
<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <i class="fas fa-calendar-alt auth-icon"></i>
            <h1 class="auth-title">Connexion</h1>
            <p class="auth-subtitle">Accédez à votre espace de planification</p>
        </div>
        
        <form method="POST" action="{{ url_for('auth.login') }}" class="auth-form">
            {{ form.hidden_tag() }}
            
            <div class="form-group">
                {{ form.email.label(class="form-label") }}
                <div class="input-group">
                    <i class="fas fa-envelope input-icon"></i>
                    {{ form.email(class="form-control", placeholder="votre@email.com") }}
                </div>
                {% if form.email.errors %}
                    <div class="form-error">
                        {% for error in form.email.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
            
            <div class="form-group">
                {{ form.password.label(class="form-label") }}
                <div class="input-group">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form.password(class="form-control", placeholder="••••••••") }}
                    <button type="button" class="toggle-password" onclick="togglePassword(this)">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                {% if form.password.errors %}
                    <div class="form-error">
                        {% for error in form.password.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
            
            <div class="form-actions">
                {{ form.submit(class="btn btn-primary btn-block") }}
            </div>
        </form>
        
        <div class="auth-footer">
            <p>Pas encore de compte ? <a href="{{ url_for('auth.register') }}">Inscrivez-vous</a></p>
        </div>
    </div>
</div>

<style>
.auth-container {
    max-width: 400px;
    margin: 4rem auto;
}

.auth-card {
    background-color: var(--white);
    border-radius: 1rem;
    box-shadow: var(--shadow-lg);
    padding: 3rem;
}

.auth-header {
    text-align: center;
    margin-bottom: 2rem;
}

.auth-icon {
    font-size: 3rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
    display: block;
}

.auth-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--dark-color);
    margin-bottom: 0.5rem;
}

.auth-subtitle {
    color: var(--gray-color);
}

.auth-form {
    margin-bottom: 2rem;
}

.input-group {
    position: relative;
}

.input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gray-color);
}

.input-group .form-control {
    padding-left: 3rem;
}

.toggle-password {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--gray-color);
    cursor: pointer;
    padding: 0.5rem;
}

.toggle-password:hover {
    color: var(--primary-color);
}

.form-error {
    color: var(--danger-color);
    margin-top: 0.25rem;
    font-size: 0.875rem;
}

.btn-block {
    width: 100%;
    padding: 0.75rem;
    font-size: 1.1rem;
}

.auth-footer {
    text-align: center;
    color: var(--gray-color);
}

.auth-footer a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
}

.auth-footer a:hover {
    text-decoration: underline;
}
</style>

<script>
function togglePassword(button) {
    const input = button.previousElementSibling;
    const icon = button.querySelector('i');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}
</script>
{% endblock %}



================================================================================
FICHIER: register.html
LOCALISATION: templates/auth/register.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/auth/register.html
================================================================================

{% extends "base.html" %}

{% block title %}Inscription - TeacherPlanner{% endblock %}

{% block content %}
<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <i class="fas fa-user-plus auth-icon"></i>
            <h1 class="auth-title">Inscription</h1>
            <p class="auth-subtitle">Créez votre compte gratuitement</p>
        </div>
        
        <form method="POST" action="{{ url_for('auth.register') }}" class="auth-form">
            {{ form.hidden_tag() }}
            
            <div class="form-group">
                {{ form.username.label(class="form-label") }}
                <div class="input-group">
                    <i class="fas fa-user input-icon"></i>
                    {{ form.username(class="form-control", placeholder="Jean Dupont") }}
                </div>
                {% if form.username.errors %}
                    <div class="form-error">
                        {% for error in form.username.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
            
            <div class="form-group">
                {{ form.email.label(class="form-label") }}
                <div class="input-group">
                    <i class="fas fa-envelope input-icon"></i>
                    {{ form.email(class="form-control", placeholder="votre@email.com") }}
                </div>
                {% if form.email.errors %}
                    <div class="form-error">
                        {% for error in form.email.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
            
            <div class="form-group">
                {{ form.password.label(class="form-label") }}
                <div class="input-group">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form.password(class="form-control", placeholder="••••••••") }}
                    <button type="button" class="toggle-password" onclick="togglePassword(this)">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                {% if form.password.errors %}
                    <div class="form-error">
                        {% for error in form.password.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
                <div class="password-strength" id="password-strength"></div>
            </div>
            
            <div class="form-group">
                {{ form.password_confirm.label(class="form-label") }}
                <div class="input-group">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form.password_confirm(class="form-control", placeholder="••••••••") }}
                </div>
                {% if form.password_confirm.errors %}
                    <div class="form-error">
                        {% for error in form.password_confirm.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>
            
            <div class="form-group">
                <div class="features-list">
                    <h3>Avec TeacherPlanner, vous pourrez :</h3>
                    <ul>
                        <li><i class="fas fa-check"></i> Créer votre emploi du temps personnalisé</li>
                        <li><i class="fas fa-check"></i> Planifier vos cours sur toute l'année</li>
                        <li><i class="fas fa-check"></i> Gérer plusieurs classes facilement</li>
                        <li><i class="fas fa-check"></i> Synchroniser vos calendriers</li>
                    </ul>
                </div>
            </div>
            
            <div class="form-actions">
                {{ form.submit(class="btn btn-primary btn-block") }}
            </div>
        </form>
        
        <div class="auth-footer">
            <p>Déjà inscrit ? <a href="{{ url_for('auth.login') }}">Connectez-vous</a></p>
        </div>
    </div>
</div>

<style>
/* Styles supplémentaires pour l'inscription */
.features-list {
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-top: 1rem;
}

.features-list h3 {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--dark-color);
    margin-bottom: 0.75rem;
}

.features-list ul {
    list-style: none;
    padding: 0;
}

.features-list li {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--gray-color);
    margin-bottom: 0.5rem;
}

.features-list li i {
    color: var(--success-color);
    font-size: 0.75rem;
}

.password-strength {
    margin-top: 0.5rem;
    height: 4px;
    background-color: var(--light-gray);
    border-radius: 2px;
    overflow: hidden;
    display: none;
}

.password-strength.show {
    display: block;
}

.password-strength-bar {
    height: 100%;
    transition: width 0.3s ease, background-color 0.3s ease;
}

.strength-weak {
    width: 33%;
    background-color: var(--danger-color);
}

.strength-medium {
    width: 66%;
    background-color: var(--warning-color);
}

.strength-strong {
    width: 100%;
    background-color: var(--success-color);
}
</style>

<script>
function togglePassword(button) {
    const input = button.previousElementSibling;
    const icon = button.querySelector('i');
    
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}

// Vérification de la force du mot de passe
document.addEventListener('DOMContentLoaded', function() {
    const passwordInput = document.getElementById('password');
    const strengthContainer = document.getElementById('password-strength');
    
    if (passwordInput) {
        passwordInput.addEventListener('input', function() {
            const password = this.value;
            let strength = 0;
            
            if (password.length >= 6) strength++;
            if (password.length >= 10) strength++;
            if (/[A-Z]/.test(password)) strength++;
            if (/[0-9]/.test(password)) strength++;
            if (/[^A-Za-z0-9]/.test(password)) strength++;
            
            strengthContainer.innerHTML = '';
            
            if (password.length > 0) {
                strengthContainer.classList.add('show');
                const bar = document.createElement('div');
                bar.className = 'password-strength-bar';
                
                if (strength <= 2) {
                    bar.classList.add('strength-weak');
                } else if (strength <= 3) {
                    bar.classList.add('strength-medium');
                } else {
                    bar.classList.add('strength-strong');
                }
                
                strengthContainer.appendChild(bar);
            } else {
                strengthContainer.classList.remove('show');
            }
        });
    }
});
</script>
{% endblock %}



================================================================================
FICHIER: initial_setup.html
LOCALISATION: templates/setup/initial_setup.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/setup/initial_setup.html
================================================================================

{% extends "base.html" %}

{% block title %}Configuration initiale - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.setup-container {
    max-width: 800px;
    margin: 0 auto;
}

.setup-progress {
    display: flex;
    justify-content: space-between;
    margin-bottom: 3rem;
    position: relative;
}

.setup-progress::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--light-gray);
    z-index: 0;
}

.progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 1;
}

.progress-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--light-gray);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: var(--gray-color);
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.progress-step.active .progress-circle {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

.progress-step.completed .progress-circle {
    background-color: var(--success-color);
    color: var(--white);
}

.progress-label {
    font-size: 0.875rem;
    color: var(--gray-color);
    text-align: center;
}

.setup-section {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    margin-bottom: 2rem;
}

.section-icon {
    font-size: 2rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.section-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--dark-color);
}

.section-description {
    color: var(--gray-color);
    margin-bottom: 2rem;
}

.time-input-group {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    gap: 1rem;
}

.time-separator {
    font-size: 1.5rem;
    color: var(--gray-color);
}

.form-help {
    font-size: 0.875rem;
    color: var(--gray-color);
    margin-top: 0.25rem;
}

.action-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 3rem;
}
</style>
{% endblock %}

{% block content %}
<div class="setup-container">
    <!-- Barre de progression -->
    <div class="setup-progress">
        <div class="progress-step active">
            <div class="progress-circle">1</div>
            <span class="progress-label">Configuration</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">2</div>
            <span class="progress-label">Classes</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">3</div>
            <span class="progress-label">Vacances</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">4</div>
            <span class="progress-label">Pauses</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">5</div>
            <span class="progress-label">Horaire type</span>
        </div>
    </div>

    <form method="POST" action="{{ url_for('setup.initial_setup') }}">
        {{ form.hidden_tag() }}
        
        <!-- Section Année scolaire -->
        <div class="setup-section">
            <i class="fas fa-calendar-alt section-icon"></i>
            <h2 class="section-title">Année scolaire</h2>
            <p class="section-description">Définissez les dates de début et de fin de votre année scolaire.</p>
            
            <div class="form-row">
                <div class="form-group">
                    {{ form.school_year_start.label(class="form-label") }}
                    {{ form.school_year_start(class="form-control", type="date") }}
                    {% if form.school_year_start.errors %}
                        <div class="form-error">
                            {% for error in form.school_year_start.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="form-group">
                    {{ form.school_year_end.label(class="form-label") }}
                    {{ form.school_year_end(class="form-control", type="date") }}
                    {% if form.school_year_end.errors %}
                        <div class="form-error">
                            {% for error in form.school_year_end.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
        
        <!-- Section Horaires quotidiens -->
        <div class="setup-section">
            <i class="fas fa-clock section-icon"></i>
            <h2 class="section-title">Horaires quotidiens</h2>
            <p class="section-description">Configurez vos heures de cours et la durée des périodes.</p>
            
            <div class="form-group">
                <label class="form-label">Heures de cours</label>
                <div class="time-input-group">
                    {{ form.day_start_time(class="form-control", type="time") }}
                    <span class="time-separator">à</span>
                    {{ form.day_end_time(class="form-control", type="time") }}
                </div>
                <p class="form-help">Définissez l'heure de début et de fin de votre journée de cours.</p>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    {{ form.period_duration.label(class="form-label") }}
                    <div class="input-with-addon">
                        {{ form.period_duration(class="form-control", type="number", min="30", max="120") }}
                        <span class="input-addon">minutes</span>
                    </div>
                    <p class="form-help">Durée d'une période de cours (entre 30 et 120 minutes).</p>
                    {% if form.period_duration.errors %}
                        <div class="form-error">
                            {% for error in form.period_duration.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="form-group">
                    {{ form.break_duration.label(class="form-label") }}
                    <div class="input-with-addon">
                        {{ form.break_duration(class="form-control", type="number", min="5", max="30") }}
                        <span class="input-addon">minutes</span>
                    </div>
                    <p class="form-help">Durée de la pause entre les cours (entre 5 et 30 minutes).</p>
                    {% if form.break_duration.errors %}
                        <div class="form-error">
                            {% for error in form.break_duration.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
        
        <!-- Boutons d'action -->
        <div class="action-buttons">
            {% if current_user.setup_completed %}
                <a href="{{ url_for('planning.dashboard') }}" class="btn btn-outline">
                    <i class="fas fa-arrow-left"></i> Retour au tableau de bord
                </a>
            {% else %}
                <div></div>
            {% endif %}
            
            <button type="submit" class="btn btn-primary">
                Suivant <i class="fas fa-arrow-right"></i>
            </button>
        </div>
    </form>
</div>

<style>
.input-with-addon {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.input-addon {
    color: var(--gray-color);
    font-size: 0.875rem;
}
</style>
{% endblock %}



================================================================================
FICHIER: manage_breaks.html
LOCALISATION: templates/setup/manage_breaks.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/setup/manage_breaks.html
================================================================================

{% extends "base.html" %}

{% block title %}Gestion des pauses - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.setup-container {
    max-width: 800px;
    margin: 0 auto;
}

.setup-progress {
    display: flex;
    justify-content: space-between;
    margin-bottom: 3rem;
    position: relative;
}

.setup-progress::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--primary-color);
    z-index: 0;
    width: 60%; /* 3/5 pour l'étape 4 */
}

.progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 1;
}

.progress-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--light-gray);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: var(--gray-color);
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.progress-step.active .progress-circle {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

.progress-step.completed .progress-circle {
    background-color: var(--success-color);
    color: var(--white);
}

.break-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.break-item:hover {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-sm);
}

.break-item.major-break {
    border-color: #FCA5A5;
    background-color: #FEF2F2;
}

.break-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.break-icon {
    width: 40px;
    height: 40px;
    background-color: #E0E7FF;
    color: #4F46E5;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--border-radius);
    font-size: 1.25rem;
}

.break-item.major-break .break-icon {
    background-color: #FEE2E2;
    color: #EF4444;
}

.break-details h3 {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
}

.break-details p {
    margin: 0;
    color: var(--gray-color);
    font-size: 0.875rem;
}

.major-break-badge {
    display: inline-block;
    background-color: #EF4444;
    color: white;
    font-size: 0.75rem;
    padding: 0.125rem 0.5rem;
    border-radius: 9999px;
    margin-left: 0.5rem;
}

.time-input-wrapper {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.time-separator {
    color: var(--gray-color);
}

.checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
}

.checkbox-group input[type="checkbox"] {
    width: 1.25rem;
    height: 1.25rem;
    cursor: pointer;
}

.checkbox-group label {
    cursor: pointer;
    user-select: none;
}

.info-box {
    background-color: #EFF6FF;
    border: 1px solid #DBEAFE;
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: start;
    gap: 0.75rem;
}

.info-box i {
    color: #3B82F6;
    margin-top: 0.125rem;
}

.info-box p {
    margin: 0;
    color: #1E40AF;
    font-size: 0.875rem;
}
</style>
{% endblock %}

{% block content %}
<div class="setup-container">
    <!-- Barre de progression -->
    <div class="setup-progress">
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Configuration</span>
        </div>
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Classes</span>
        </div>
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Vacances</span>
        </div>
        <div class="progress-step active">
            <div class="progress-circle">4</div>
            <span class="progress-label">Pauses</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">5</div>
            <span class="progress-label">Horaire type</span>
        </div>
    </div>

    <!-- Information -->
    <div class="info-box">
        <i class="fas fa-info-circle"></i>
        <p>Définissez vos grandes pauses (comme la pause de midi). Si une période se termine au début d'une grande pause, la pause intercours ne sera pas comptée.</p>
    </div>

    <!-- Formulaire d'ajout de pause -->
    <div class="add-classroom-section">
        <h2><i class="fas fa-coffee"></i> Ajouter une pause</h2>
        <form method="POST" action="{{ url_for('setup.manage_breaks') }}">
            {{ form.hidden_tag() }}

            <div class="form-group">
                {{ form.name.label(class="form-label") }}
                {{ form.name(class="form-control", placeholder="Ex: Pause de midi") }}
                {% if form.name.errors %}
                    <div class="form-error">
                        {% for error in form.name.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            <div class="form-group">
                <label class="form-label">Horaire de la pause</label>
                <div class="time-input-wrapper">
                    {{ form.start_time(class="form-control", type="time") }}
                    <span class="time-separator">à</span>
                    {{ form.end_time(class="form-control", type="time") }}
                </div>
                {% if form.start_time.errors %}
                    <div class="form-error">
                        {% for error in form.start_time.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
                {% if form.end_time.errors %}
                    <div class="form-error">
                        {% for error in form.end_time.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            <div class="checkbox-group">
                {{ form.is_major_break() }}
                {{ form.is_major_break.label }}
            </div>

            <button type="submit" class="btn btn-primary" style="margin-top: 1.5rem;">
                <i class="fas fa-plus"></i> Ajouter la pause
            </button>
        </form>
    </div>

    <!-- Liste des pauses -->
    <div class="classrooms-list">
        <h2><i class="fas fa-mug-hot"></i> Mes pauses</h2>

        {% if breaks %}
            {% for break in breaks %}
            <div class="break-item {% if break.is_major_break %}major-break{% endif %}">
                <div class="break-info">
                    <div class="break-icon">
                        <i class="fas {% if break.is_major_break %}fa-utensils{% else %}fa-coffee{% endif %}"></i>
                    </div>
                    <div class="break-details">
                        <h3>
                            {{ break.name }}
                            {% if break.is_major_break %}
                            <span class="major-break-badge">Grande pause</span>
                            {% endif %}
                        </h3>
                        <p>De {{ break.start_time.strftime('%H:%M') }} à {{ break.end_time.strftime('%H:%M') }}</p>
                    </div>
                </div>

                <form method="POST" action="{{ url_for('setup.delete_break', id=break.id) }}" style="margin: 0;">
                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette pause ?');">
                        <i class="fas fa-trash"></i>
                    </button>
                </form>
            </div>
            {% endfor %}
        {% else %}
            <div class="empty-state">
                <i class="fas fa-coffee"></i>
                <p>Aucune pause ajoutée.</p>
                <p>Vous pouvez passer cette étape si vous n'avez pas de grandes pauses.</p>
            </div>
        {% endif %}
    </div>

    <!-- Boutons de navigation -->
    <div class="action-buttons" style="margin-top: 2rem;">
        <a href="{{ url_for('setup.manage_holidays') }}" class="btn btn-outline">
            <i class="fas fa-arrow-left"></i> Précédent
        </a>

        {% if not current_user.setup_completed %}
        <form method="POST" action="{{ url_for('setup.validate_setup') }}" style="margin: 0;">
            <button type="submit" class="btn btn-success">
                <i class="fas fa-check"></i> Valider la configuration et passer à l'horaire type
            </button>
        </form>
        {% else %}
        <a href="{{ url_for('schedule.weekly_schedule') }}" class="btn btn-primary">
            Suivant <i class="fas fa-arrow-right"></i>
        </a>
        {% endif %}
    </div>
</div>
{% endblock %}



================================================================================
FICHIER: manage_classrooms.html
LOCALISATION: templates/setup/manage_classrooms.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/setup/manage_classrooms.html
================================================================================

{% extends "base.html" %}

{% block title %}Gestion des classes - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.setup-container {
    max-width: 800px;
    margin: 0 auto;
}

.setup-progress {
    display: flex;
    justify-content: space-between;
    margin-bottom: 3rem;
    position: relative;
}

.setup-progress::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--primary-color);
    z-index: 0;
    width: 20%; /* 1/5 pour l'étape 2 */
}

.progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 1;
}

.progress-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--light-gray);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: var(--gray-color);
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.progress-step.active .progress-circle {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

.progress-step.completed .progress-circle {
    background-color: var(--success-color);
    color: var(--white);
}

.add-classroom-section {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    margin-bottom: 2rem;
}

.classrooms-list {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 2rem;
    box-shadow: var(--shadow-sm);
}

.classroom-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.classroom-item:hover {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-sm);
}

.classroom-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.classroom-color {
    width: 40px;
    height: 40px;
    border-radius: var(--border-radius);
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
}

.classroom-details h3 {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
}

.classroom-details p {
    margin: 0;
    color: var(--gray-color);
    font-size: 0.875rem;
}

.color-picker-wrapper {
    position: relative;
    display: inline-block;
}

.color-value {
    position: absolute;
    right: -80px;
    top: 50%;
    transform: translateY(-50%);
    font-family: monospace;
    font-size: 0.875rem;
    color: var(--gray-color);
}

.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--gray-color);
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}
</style>
{% endblock %}

{% block content %}
<div class="setup-container">
    <!-- Barre de progression -->
    <div class="setup-progress">
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Configuration</span>
        </div>
        <div class="progress-step active">
            <div class="progress-circle">2</div>
            <span class="progress-label">Classes</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">3</div>
            <span class="progress-label">Vacances</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">4</div>
            <span class="progress-label">Pauses</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">5</div>
            <span class="progress-label">Horaire type</span>
        </div>
    </div>

    <!-- Formulaire d'ajout de classe -->
    <div class="add-classroom-section">
        <h2><i class="fas fa-plus-circle"></i> Ajouter une classe</h2>
        <form method="POST" action="{{ url_for('setup.manage_classrooms') }}">
            {{ form.hidden_tag() }}
            
            <div class="form-row">
                <div class="form-group">
                    {{ form.name.label(class="form-label") }}
                    {{ form.name(class="form-control", placeholder="Ex: 6ème A") }}
                    {% if form.name.errors %}
                        <div class="form-error">
                            {% for error in form.name.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="form-group">
                    {{ form.subject.label(class="form-label") }}
                    {{ form.subject(class="form-control", placeholder="Ex: Mathématiques") }}
                    {% if form.subject.errors %}
                        <div class="form-error">
                            {% for error in form.subject.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="form-group">
                    {{ form.color.label(class="form-label") }}
                    <div class="color-picker-wrapper">
                        {{ form.color(class="form-control color-picker", type="color") }}
                    </div>
                </div>
            </div>
            
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus"></i> Ajouter la classe
            </button>
        </form>
    </div>

    <!-- Liste des classes -->
    <div class="classrooms-list">
        <h2><i class="fas fa-list"></i> Mes classes</h2>
        
        {% if classrooms %}
            {% for classroom in classrooms %}
            <div class="classroom-item">
                <div class="classroom-info">
                    <div class="classroom-color" style="background-color: {{ classroom.color }};"></div>
                    <div class="classroom-details">
                        <h3>{{ classroom.name }}</h3>
                        <p>{{ classroom.subject }}</p>
                    </div>
                </div>
                
                <form method="POST" action="{{ url_for('setup.delete_classroom', id=classroom.id) }}" style="margin: 0;">
                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette classe ?');">
                        <i class="fas fa-trash"></i>
                    </button>
                </form>
            </div>
            {% endfor %}
        {% else %}
            <div class="empty-state">
                <i class="fas fa-chalkboard-teacher"></i>
                <p>Aucune classe ajoutée pour le moment.</p>
                <p>Commencez par ajouter vos classes ci-dessus.</p>
            </div>
        {% endif %}
    </div>

    <!-- Boutons de navigation -->
    <div class="action-buttons" style="margin-top: 2rem;">
        <a href="{{ url_for('setup.initial_setup') }}" class="btn btn-outline">
            <i class="fas fa-arrow-left"></i> Précédent
        </a>
        
        {% if classrooms %}
        <a href="{{ url_for('setup.manage_holidays') }}" class="btn btn-primary">
            Suivant <i class="fas fa-arrow-right"></i>
        </a>
        {% endif %}
    </div>
</div>

<style>
.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}
</style>
{% endblock %}



================================================================================
FICHIER: manage_holidays.html
LOCALISATION: templates/setup/manage_holidays.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/setup/manage_holidays.html
================================================================================

{% extends "base.html" %}

{% block title %}Gestion des vacances - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.setup-container {
    max-width: 800px;
    margin: 0 auto;
}

.setup-progress {
    display: flex;
    justify-content: space-between;
    margin-bottom: 3rem;
    position: relative;
}

.setup-progress::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--primary-color);
    z-index: 0;
    width: 40%; /* 2/5 pour l'étape 3 */
}

.progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 1;
}

.progress-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--light-gray);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: var(--gray-color);
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.progress-step.active .progress-circle {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

.progress-step.completed .progress-circle {
    background-color: var(--success-color);
    color: var(--white);
}

.holiday-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.holiday-item:hover {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-sm);
}

.holiday-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.holiday-icon {
    width: 40px;
    height: 40px;
    background-color: #FEF3C7;
    color: #F59E0B;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--border-radius);
    font-size: 1.25rem;
}

.holiday-details h3 {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
}

.holiday-details p {
    margin: 0;
    color: var(--gray-color);
    font-size: 0.875rem;
}

.date-range {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.date-separator {
    color: var(--gray-color);
}

.info-box {
    background-color: #EFF6FF;
    border: 1px solid #DBEAFE;
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: start;
    gap: 0.75rem;
}

.info-box i {
    color: #3B82F6;
    margin-top: 0.125rem;
}

.info-box p {
    margin: 0;
    color: #1E40AF;
    font-size: 0.875rem;
}

.import-section {
    background-color: #F0FDF4;
    border: 1px solid #BBF7D0;
    border-radius: var(--border-radius);
    padding: 1.5rem;
    margin-bottom: 2rem;
}

.import-section h3 {
    color: #15803D;
    margin-bottom: 0.5rem;
    font-size: 1.125rem;
}

.import-section p {
    color: #166534;
    margin-bottom: 1rem;
    font-size: 0.875rem;
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: var(--white);
}

.btn-secondary:hover {
    background-color: #0891B2;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}
</style>
{% endblock %}

{% block content %}
<div class="setup-container">
    <!-- Barre de progression -->
    <div class="setup-progress">
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Configuration</span>
        </div>
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Classes</span>
        </div>
        <div class="progress-step active">
            <div class="progress-circle">3</div>
            <span class="progress-label">Vacances</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">4</div>
            <span class="progress-label">Pauses</span>
        </div>
        <div class="progress-step">
            <div class="progress-circle">5</div>
            <span class="progress-label">Horaire type</span>
        </div>
    </div>

    <!-- Information -->
    <div class="info-box">
        <i class="fas fa-info-circle"></i>
        <p>Les périodes de vacances seront automatiquement exclues de votre planification. Vous pouvez ajouter toutes les vacances scolaires et jours fériés.</p>
    </div>

    <!-- Import automatique des vacances vaudoises -->
    {% if current_user.school_year_start %}
    <div class="import-section">
        <h3><i class="fas fa-download"></i> Import rapide</h3>
        <p>Importez automatiquement les vacances scolaires du canton de Vaud pour votre année scolaire.</p>
        <form method="POST" action="{{ url_for('setup.import_vaud_holidays') }}" style="display: flex; gap: 1rem; align-items: center;">
            <label class="checkbox-group" style="margin: 0;">
                <input type="checkbox" name="replace_existing" value="true">
                <span>Remplacer les vacances existantes</span>
            </label>
            <button type="submit" class="btn btn-secondary">
                <i class="fas fa-magic"></i> Importer les vacances vaudoises
            </button>
        </form>
    </div>
    {% endif %}

    <!-- Formulaire d'ajout de vacances -->
    <div class="add-classroom-section">
        <h2><i class="fas fa-umbrella-beach"></i> Ajouter des vacances</h2>
        <form method="POST" action="{{ url_for('setup.manage_holidays') }}">
            {{ form.hidden_tag() }}

            <div class="form-group">
                {{ form.name.label(class="form-label") }}
                {{ form.name(class="form-control", placeholder="Ex: Vacances de Noël") }}
                {% if form.name.errors %}
                    <div class="form-error">
                        {% for error in form.name.errors %}
                            <small>{{ error }}</small>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            <div class="form-row">
                <div class="form-group">
                    {{ form.start_date.label(class="form-label") }}
                    {{ form.start_date(class="form-control", type="date") }}
                    {% if form.start_date.errors %}
                        <div class="form-error">
                            {% for error in form.start_date.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>

                <div class="form-group">
                    {{ form.end_date.label(class="form-label") }}
                    {{ form.end_date(class="form-control", type="date") }}
                    {% if form.end_date.errors %}
                        <div class="form-error">
                            {% for error in form.end_date.errors %}
                                <small>{{ error }}</small>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
            </div>

            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus"></i> Ajouter les vacances
            </button>
        </form>
    </div>

    <!-- Liste des vacances -->
    <div class="classrooms-list">
        <h2><i class="fas fa-calendar-times"></i> Périodes de vacances</h2>

        {% if holidays %}
            {% for holiday in holidays %}
            <div class="holiday-item">
                <div class="holiday-info">
                    <div class="holiday-icon">
                        <i class="fas fa-umbrella-beach"></i>
                    </div>
                    <div class="holiday-details">
                        <h3>{{ holiday.name }}</h3>
                        <p>Du {{ holiday.start_date.strftime('%d/%m/%Y') }} au {{ holiday.end_date.strftime('%d/%m/%Y') }}</p>
                    </div>
                </div>

                <form method="POST" action="{{ url_for('setup.delete_holiday', id=holiday.id) }}" style="margin: 0;">
                    <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Êtes-vous sûr de vouloir supprimer ces vacances ?');">
                        <i class="fas fa-trash"></i>
                    </button>
                </form>
            </div>
            {% endfor %}
        {% else %}
            <div class="empty-state">
                <i class="fas fa-calendar-times"></i>
                <p>Aucune période de vacances ajoutée.</p>
                <p>Vous pouvez passer cette étape si vous le souhaitez.</p>
            </div>
        {% endif %}
    </div>

    <!-- Boutons de navigation -->
    <div class="action-buttons" style="margin-top: 2rem;">
        <a href="{{ url_for('setup.manage_classrooms') }}" class="btn btn-outline">
            <i class="fas fa-arrow-left"></i> Précédent
        </a>

        <a href="{{ url_for('setup.manage_breaks') }}" class="btn btn-primary">
            Suivant <i class="fas fa-arrow-right"></i>
        </a>
    </div>
</div>
{% endblock %}



================================================================================
FICHIER: weekly_schedule.html
LOCALISATION: templates/setup/weekly_schedule.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/setup/weekly_schedule.html
================================================================================

{% extends "base.html" %}

{% block title %}Horaire type - TeacherPlanner{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/calendar.css') }}">
<style>
.setup-container {
    max-width: 1200px;
    margin: 0 auto;
}

.setup-progress {
    display: flex;
    justify-content: space-between;
    margin-bottom: 3rem;
    position: relative;
}

.setup-progress::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 0;
    right: 0;
    height: 2px;
    background-color: var(--primary-color);
    z-index: 0;
    width: 80%; /* 4/5 pour l'étape 5 */
}

.progress-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    z-index: 1;
}

.progress-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--light-gray);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: var(--gray-color);
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.progress-step.active .progress-circle {
    background-color: var(--primary-color);
    color: var(--white);
    transform: scale(1.1);
}

.progress-step.completed .progress-circle {
    background-color: var(--success-color);
    color: var(--white);
}

.schedule-header {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    margin-bottom: 2rem;
}

.schedule-title {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.schedule-title h1 {
    margin: 0;
}

.schedule-title i {
    font-size: 2rem;
    color: var(--primary-color);
}

.schedule-grid {
    background-color: var(--white);
    border-radius: var(--border-radius);
    padding: 1rem;
    box-shadow: var(--shadow-sm);
    overflow-x: auto;
}

.schedule-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 800px;
}

.schedule-table th,
.schedule-table td {
    padding: 0.75rem;
    text-align: center;
    border: 1px solid var(--light-gray);
}

.schedule-table th {
    background-color: var(--light-gray);
    font-weight: 600;
    color: var(--dark-color);
}

.schedule-table th:first-child {
    width: 120px;
}

.time-slot {
    font-size: 0.875rem;
    color: var(--gray-color);
    font-weight: 500;
}

.schedule-cell {
    position: relative;
    height: 60px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.schedule-cell:hover {
    background-color: var(--light-gray);
}

.schedule-cell.selected {
    background-color: var(--selected-color, #E0E7FF);
    border: 2px solid var(--selected-border-color, #4F46E5);
}

.class-block {
    padding: 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: white;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.class-name {
    font-weight: 600;
}

.class-subject {
    font-size: 0.75rem;
    opacity: 0.9;
}

.class-selector {
    position: absolute;
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    padding: 1rem;
    display: none;
    z-index: 1000;
    width: 280px;
    max-height: 400px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.class-selector.show {
    display: flex;
}

.class-selector h3 {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    flex-shrink: 0;
}

.class-options-container {
    overflow-y: auto;
    max-height: 300px;
    margin-bottom: 0.5rem;
}

.class-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    margin-bottom: 0.25rem;
}

.class-option:hover {
    background-color: var(--light-gray);
}

.class-color-dot {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    flex-shrink: 0;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);
}

.class-option-info {
    flex: 1;
    min-width: 0;
}

.class-option-name {
    font-weight: 600;
    font-size: 0.875rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.class-option-subject {
    font-size: 0.75rem;
    color: var(--gray-color);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.remove-option {
    padding: 0.75rem;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: var(--danger-color);
    border-top: 1px solid var(--light-gray);
    text-align: center;
    font-size: 0.875rem;
    flex-shrink: 0;
}

.remove-option:hover {
    background-color: #FEF2F2;
}

/* Scrollbar personnalisée pour le sélecteur */
.class-options-container::-webkit-scrollbar {
    width: 8px;
}

.class-options-container::-webkit-scrollbar-track {
    background: var(--light-gray);
    border-radius: 4px;
}

.class-options-container::-webkit-scrollbar-thumb {
    background: #CBD5E1;
    border-radius: 4px;
}

.class-options-container::-webkit-scrollbar-thumb:hover {
    background: #94A3B8;
}

.action-buttons {
    margin-top: 2rem;
    display: flex;
    justify-content: space-between;
}

.legend {
    display: flex;
    gap: 2rem;
    margin-top: 1rem;
    flex-wrap: wrap;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.legend-color {
    width: 20px;
    height: 20px;
    border-radius: 0.25rem;
}
</style>
{% endblock %}

{% block content %}
<div class="setup-container">
    <!-- Barre de progression -->
    <div class="setup-progress">
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Configuration</span>
        </div>
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Classes</span>
        </div>
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Vacances</span>
        </div>
        <div class="progress-step completed">
            <div class="progress-circle"><i class="fas fa-check"></i></div>
            <span class="progress-label">Pauses</span>
        </div>
        <div class="progress-step active">
            <div class="progress-circle">5</div>
            <span class="progress-label">Horaire type</span>
        </div>
    </div>

    <!-- En-tête -->
    <div class="schedule-header">
        <div class="schedule-title">
            <i class="fas fa-calendar-week"></i>
            <h1>Créez votre horaire type</h1>
        </div>
        <p>Cliquez sur les cases pour assigner vos classes à chaque période. Cet horaire sera utilisé comme modèle pour toute l'année.</p>

        {% if not current_user.schedule_completed %}
        <div class="info-box" style="margin-top: 1rem; background-color: #FEF3C7; border-color: #FDE68A;">
            <i class="fas fa-info-circle" style="color: #D97706;"></i>
            <p style="color: #92400E;">Dernière étape ! Une fois votre horaire type créé, cliquez sur "Valider l'horaire" pour accéder à votre calendrier complet.</p>
        </div>
        {% endif %}

        <!-- Légende des classes -->
        <div class="legend">
            {% for classroom in classrooms %}
            <div class="legend-item">
                <div class="legend-color" style="background-color: {{ classroom.color }};"></div>
                <span>{{ classroom.name }} - {{ classroom.subject }}</span>
            </div>
            {% endfor %}
        </div>
    </div>

    <!-- Grille horaire -->
    <div class="schedule-grid">
        <table class="schedule-table">
            <thead>
                <tr>
                    <th>Période</th>
                    {% for day in days %}
                    <th>{{ day }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
                {% for period in periods %}
                <tr>
                    <td class="time-slot">
                        <strong>Période {{ period.number }}</strong><br>
                        {{ period.start.strftime('%H:%M') }} - {{ period.end.strftime('%H:%M') }}
                    </td>
                    {% for day_index in range(5) %}
                    <td class="schedule-cell"
                        data-weekday="{{ day_index }}"
                        data-period="{{ period.number }}"
                        onclick="openClassSelector(this, event)">
                        {% set key = day_index|string + '_' + period.number|string %}
                        {% if key in schedule_grid %}
                            {% set schedule = schedule_grid[key] %}
                            <div class="class-block" style="background-color: {{ schedule.classroom.color }};">
                                <div class="class-name">{{ schedule.classroom.name }}</div>
                                <div class="class-subject">{{ schedule.classroom.subject }}</div>
                            </div>
                        {% endif %}
                    </td>
                    {% endfor %}
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Boutons d'action -->
    <div class="action-buttons">
        <a href="{{ url_for('setup.manage_breaks') }}" class="btn btn-outline">
            <i class="fas fa-arrow-left"></i> Précédent
        </a>

        <form method="POST" action="{{ url_for('schedule.validate_schedule') }}" style="margin: 0;">
            <button type="submit" class="btn btn-success">
                <i class="fas fa-check"></i> Valider l'horaire
            </button>
        </form>
    </div>
</div>

<!-- Sélecteur de classe -->
<div class="class-selector" id="classSelector">
    <h3>Sélectionner une classe</h3>
    <div class="class-options-container" id="classOptions"></div>
    <div class="remove-option" onclick="removeClass()">
        <i class="fas fa-times"></i> Retirer la classe
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/calendar.js') }}"></script>
<script>
const classrooms = {{ classrooms_json | tojson }};
let currentCell = null;

function openClassSelector(cell, event) {
    event.stopPropagation();
    currentCell = cell;

    const selector = document.getElementById('classSelector');
    const optionsContainer = document.getElementById('classOptions');

    // Vider et remplir les options
    optionsContainer.innerHTML = '';
    classrooms.forEach(classroom => {
        const option = document.createElement('div');
        option.className = 'class-option';
        option.onclick = () => selectClass(classroom.id);

        option.innerHTML = `
            <div class="class-color-dot" style="background-color: ${classroom.color};"></div>
            <div class="class-option-info">
                <div class="class-option-name">${classroom.name}</div>
                <div class="class-option-subject">${classroom.subject}</div>
            </div>
        `;

        optionsContainer.appendChild(option);
    });

    // Positionner le sélecteur
    const rect = cell.getBoundingClientRect();
    const selectorHeight = 400; // Hauteur maximale du sélecteur
    const spaceBelow = window.innerHeight - rect.bottom;
    const spaceAbove = rect.top;

    // Position horizontale - centrer sous la cellule
    let left = rect.left + (rect.width / 2) - 140; // 140 = moitié de la largeur du sélecteur

    // S'assurer que le sélecteur ne sort pas de l'écran horizontalement
    if (left < 10) {
        left = 10;
    } else if (left + 280 > window.innerWidth - 10) {
        left = window.innerWidth - 290;
    }

    selector.style.left = left + 'px';

    // Position verticale - privilégier en dessous, sinon au-dessus
    if (spaceBelow >= selectorHeight || spaceBelow > spaceAbove) {
        // Afficher en dessous
        selector.style.top = (rect.bottom + 5 + window.scrollY) + 'px';
        selector.style.bottom = 'auto';
    } else {
        // Afficher au-dessus
        selector.style.bottom = (window.innerHeight - rect.top + 5 - window.scrollY) + 'px';
        selector.style.top = 'auto';
    }

    selector.classList.add('show');
}

function selectClass(classroomId) {
    if (!currentCell) return;

    const weekday = currentCell.dataset.weekday;
    const period = currentCell.dataset.period;
    const classroom = classrooms.find(c => c.id === classroomId);

    // Sauvegarder via AJAX
    saveSchedule(weekday, period, classroomId).then(result => {
        if (result.success) {
            // Mettre à jour l'affichage
            currentCell.innerHTML = `
                <div class="class-block" style="background-color: ${classroom.color};">
                    <div class="class-name">${classroom.name}</div>
                    <div class="class-subject">${classroom.subject}</div>
                </div>
            `;
            closeClassSelector();
        }
    });
}

function removeClass() {
    if (!currentCell) return;

    const weekday = currentCell.dataset.weekday;
    const period = currentCell.dataset.period;

    // Sauvegarder via AJAX (sans classroom_id pour supprimer)
    saveSchedule(weekday, period, null).then(result => {
        if (result.success) {
            currentCell.innerHTML = '';
            closeClassSelector();
        }
    });
}

function closeClassSelector() {
    document.getElementById('classSelector').classList.remove('show');
    currentCell = null;
}

async function saveSchedule(weekday, periodNumber, classroomId) {
    try {
        const response = await fetch('{{ url_for("schedule.save_schedule") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                weekday: parseInt(weekday),
                period_number: parseInt(periodNumber),
                classroom_id: classroomId
            })
        });

        return await response.json();
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la sauvegarde');
        return { success: false };
    }
}

// Fermer le sélecteur en cliquant ailleurs
document.addEventListener('click', (e) => {
    if (!e.target.closest('.class-selector') && !e.target.closest('.schedule-cell')) {
        closeClassSelector();
    }
});
</script>
{% endblock %}



================================================================================
FICHIER: calendar_view.html
LOCALISATION: templates/planning/calendar_view.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/planning/calendar_view.html
================================================================================

{% extends "base.html" %}

{% block title %}Calendrier - TeacherPlanner{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/calendar.css') }}">
<style>
/* Styles additionnels pour les indicateurs de checklist */
.checklist-summary {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.65rem;
    margin-top: 0.125rem;
}

.checklist-icon {
    font-size: 0.75rem;
}

.checklist-icon.all-checked {
    color: #10B981;
}

.checklist-icon.partial {
    color: #F59E0B;
}

.checklist-icon.none-checked {
    color: #EF4444;
}

.checklist-count {
    color: rgba(255, 255, 255, 0.8);
    font-weight: 500;
}

/* Pour la vue annuelle */
.annual-planning-checklist {
    display: flex;
    align-items: center;
    gap: 0.125rem;
    font-size: 0.5rem;
    margin-bottom: 0.125rem;
}

.annual-checklist-icon {
    font-size: 0.5rem;
}
</style>
{% endblock %}

{% block content %}
<div class="calendar-container">
    <!-- En-tête avec navigation -->
    <div class="calendar-header">
        <div class="calendar-nav">
            <button class="nav-btn" onclick="navigateWeek('prev')">
                <i class="fas fa-chevron-left"></i>
            </button>

            <h2 class="current-week-title">
                Semaine du {{ week_dates[0] | format_date_full }} au {{ week_dates[4] | format_date }}
            </h2>

            <button class="nav-btn" onclick="navigateWeek('next')">
                <i class="fas fa-chevron-right"></i>
            </button>

            <button class="btn btn-primary btn-today" onclick="navigateToToday()">
                <i class="fas fa-calendar-day"></i> Aujourd'hui
            </button>

            <button class="btn btn-outline btn-toggle-view" onclick="toggleViewMode()" title="Basculer la vue">
                <i class="fas fa-expand-alt" id="toggleIcon"></i>
                <span id="toggleText">Vue étendue</span>
            </button>
        </div>
    </div>

    <!-- Conteneur principal avec deux colonnes -->
    <div class="calendar-main">
        <!-- Vue hebdomadaire -->
        <div class="weekly-view">
            <div class="weekly-view-loading">
                <i class="fas fa-spinner fa-spin fa-2x"></i>
            </div>
            <h3 class="section-title">
                <i class="fas fa-calendar-week"></i> Vue hebdomadaire
            </h3>

            <div class="weekly-schedule">
                <table class="schedule-table">
                    <thead>
                        <tr>
                            <th class="time-column">Heure</th>
                            {% for date in week_dates %}
                            <th class="day-header {% if date == today %}today{% endif %}">
                                <div class="day-name">{{ days[loop.index0] }}</div>
                                <div class="day-date">{{ date.strftime('%d/%m') }}</div>
                            </th>
                            {% endfor %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for period in periods %}
                        <tr>
                            <td class="time-slot">
                                <div class="period-number">P{{ period.number }}</div>
                                <div class="period-time">
                                    {{ period.start.strftime('%H:%M') }}<br>
                                    {{ period.end.strftime('%H:%M') }}
                                </div>
                            </td>
                            {% for date in week_dates %}
                            {% set i = loop.index0 %}
                            <td class="schedule-cell {% if date == today %}today{% endif %}"
                                data-date="{{ date.strftime('%Y-%m-%d') }}"
                                data-period="{{ period.number }}"
                                onclick="openPlanningModal(this)">

                                {% set planning_key = date.strftime('%Y-%m-%d') + '_' + period.number|string %}
                                {% set schedule_key = i|string + '_' + period.number|string %}
                                {% set holiday_info = holidays_info[date.strftime('%Y-%m-%d')] %}

                                {% if holiday_info.is_holiday %}
                                    <!-- Jour férié -->
                                    <div class="holiday-block">
                                        <div class="holiday-day-name">{{ holiday_info.name }}</div>
                                    </div>
                                {% elif date >= current_user.school_year_start and date <= current_user.school_year_end %}
                                    {% if planning_key in planning_grid %}
                                        <!-- Planification spécifique -->
                                        {% set planning = planning_grid[planning_key] %}
                                        <div class="class-block planned" style="background-color: {{ planning.classroom.color }};">
                                            <div class="class-name">{{ planning.classroom.name }}</div>
                                            <div class="class-subject">{{ planning.classroom.subject }}</div>
                                            {% if planning.title %}
                                            <div class="planning-title">
                                                {{ planning.title }}
                                            </div>
                                            {% endif %}
                                            {% if planning.checklist_summary %}
                                            <div class="checklist-summary">
                                                {% if planning.checklist_summary.all_checked %}
                                                    <i class="fas fa-check-circle checklist-icon all-checked"></i>
                                                {% elif planning.checklist_summary.checked > 0 %}
                                                    <i class="fas fa-tasks checklist-icon partial"></i>
                                                {% else %}
                                                    <i class="fas fa-times-circle checklist-icon none-checked"></i>
                                                {% endif %}
                                                <span class="checklist-count">{{ planning.checklist_summary.checked }}/{{ planning.checklist_summary.total }}</span>
                                            </div>
                                            {% endif %}
                                        </div>
                                    {% elif schedule_key in schedule_grid %}
                                        <!-- Horaire type -->
                                        {% set schedule = schedule_grid[schedule_key] %}
                                        <div class="class-block" style="background-color: {{ schedule.classroom.color }}; opacity: 0.7;">
                                            <div class="class-name">{{ schedule.classroom.name }}</div>
                                            <div class="class-subject">{{ schedule.classroom.subject }}</div>
                                        </div>
                                    {% endif %}
                                {% endif %}
                            </td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Vue annuelle par classe -->
        <div class="annual-view">
            <h3 class="section-title">
                <i class="fas fa-calendar-alt"></i> Vue annuelle
            </h3>

            <!-- Onglets des classes -->
            <div class="class-tabs">
                {% for classroom in classrooms %}
                <button class="tab-btn {% if classroom.id == selected_classroom_id %}active{% endif %}"
                        onclick="selectClassroom({{ classroom.id }})"
                        style="border-bottom-color: {{ classroom.color }};">
                    {{ classroom.name }}
                </button>
                {% endfor %}
            </div>

            <!-- Calendrier annuel -->
            <div class="annual-calendar">
                {% if selected_classroom_id and selected_classroom_id in annual_data %}
                    {% set selected_classroom = classrooms | selectattr('id', 'equalto', selected_classroom_id) | first %}
                    <div class="annual-grid" data-classroom-color="{{ selected_classroom.color if selected_classroom else '#4F46E5' }}">
                        {% for week in annual_data[selected_classroom_id] %}
                        <div class="annual-week {% if week.start_date <= today and today <= week.dates[4] %}current-week{% endif %} {% if week.is_holiday %}holiday-week{% endif %}">
                            <div class="week-info">
                                <div class="week-date">{{ week.formatted_date }}</div>
                                <div class="week-number" {% if not week.is_holiday %}onclick="navigateToWeek('{{ week.start_date.strftime('%Y-%m-%d') }}')" title="Cliquez pour voir cette semaine"{% endif %}>
                                    {% if week.is_holiday %}
                                        <span class="holiday-label" title="{{ week.holiday_name }}">
                                            {% if week.holiday_name_short %}
                                                {{ week.holiday_name_short }}
                                            {% else %}
                                                {% set holiday_parts = week.holiday_name.split(' ') %}
                                                {% if holiday_parts|length > 1 and week.holiday_name|length > 12 %}
                                                    {{ holiday_parts[0] }}<br>{{ holiday_parts[1:] | join(' ') }}
                                                {% else %}
                                                    {{ week.holiday_name }}
                                                {% endif %}
                                            {% endif %}
                                        </span>
                                    {% else %}
                                        <span class="week-number-link">S{{ week.week_number }}</span>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="week-days">
                                {% for has_class in week.has_class %}
                                {% set i = loop.index0 %}
                                {% set date = week.dates[i] %}
                                {% set date_str = date.strftime('%Y-%m-%d') %}
                                {% set holiday_name = week.holidays_by_day[i] %}
                                <div class="annual-day {% if has_class %}has-class{% endif %} {% if date == today %}today{% endif %} {% if holiday_name %}holiday single-day-holiday{% endif %}"
                                     data-date="{{ date_str }}"
                                     data-weekday="{{ i }}"
                                     data-has-class="{{ 'true' if has_class else 'false' }}"
                                     onclick="{% if has_class and not holiday_name %}handleAnnualDayClick(this, '{{ date_str }}'){% endif %}"
                                     title="{{ days[i] }} {{ date.strftime('%d/%m') }}{% if holiday_name %} - {{ holiday_name }}{% endif %}">
                                    <div class="annual-day-content">
                                        {% if holiday_name %}
                                            <div class="annual-holiday-name">{{ holiday_name[:3] }}</div>
                                        {% elif week.plannings and date_str in week.plannings %}
                                            <div class="annual-plannings">
                                                {% for planning in week.plannings[date_str][:3] %}
                                                    <div class="annual-planning-item" title="{{ planning.title }}">
                                                        {% if planning.checklist_summary %}
                                                        <div class="annual-planning-checklist">
                                                            {% if planning.checklist_summary.all_checked %}
                                                                <i class="fas fa-check-circle annual-checklist-icon all-checked"></i>
                                                            {% elif planning.checklist_summary.checked > 0 %}
                                                                <i class="fas fa-tasks annual-checklist-icon partial"></i>
                                                            {% else %}
                                                                <i class="fas fa-times-circle annual-checklist-icon none-checked"></i>
                                                            {% endif %}
                                                        </div>
                                                        {% endif %}
                                                        <span class="annual-planning-text">{{ planning.title }}</span>
                                                    </div>
                                                {% endfor %}
                                                {% if week.plannings[date_str]|length > 3 %}
                                                    <div class="annual-planning-more">+{{ week.plannings[date_str]|length - 3 }}</div>
                                                {% endif %}
                                            </div>
                                        {% endif %}
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                {% endif %}
            </div>

            <!-- Légende -->
            <div class="annual-legend">
                <div class="legend-item">
                    <div class="legend-box has-class"></div>
                    <span>Jour avec cours</span>
                </div>
                <div class="legend-item">
                    <div class="legend-box"></div>
                    <span>Jour sans cours</span>
                </div>
                <div class="legend-item">
                    <div class="legend-box today"></div>
                    <span>Aujourd'hui</span>
                </div>
                <div class="legend-item">
                    <i class="fas fa-check-circle" style="color: #10B981;"></i>
                    <span>Tâches complétées</span>
                </div>
                <div class="legend-item">
                    <i class="fas fa-tasks" style="color: #F59E0B;"></i>
                    <span>Tâches en cours</span>
                </div>
                <div class="legend-item">
                    <i class="fas fa-times-circle" style="color: #EF4444;"></i>
                    <span>Tâches non commencées</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de planification -->
<div class="planning-modal" id="planningModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modalTitle">Planifier le cours</h3>
            <button class="modal-close" onclick="closePlanningModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="modal-body">
            <div class="form-group">
                <label class="form-label">Classe</label>
                <select id="modalClassroom" class="form-control">
                    <option value="">-- Sélectionner une classe --</option>
                    {% for classroom in classrooms %}
                    <option value="{{ classroom.id }}" data-color="{{ classroom.color }}">
                        {{ classroom.name }} - {{ classroom.subject }}
                    </option>
                    {% endfor %}
                </select>
            </div>

            <div class="form-group">
                <label class="form-label">Titre du cours</label>
                <input type="text" id="modalPlanningTitle" class="form-control"
                       placeholder="Ex: Introduction aux fractions">
            </div>

            <div class="form-group">
                <label class="form-label">Description</label>
                <textarea id="modalDescription" class="form-control" rows="3"
                          placeholder="Détails du cours, exercices prévus..."></textarea>
            </div>
        </div>

        <div class="modal-footer">
            <button class="btn btn-outline" onclick="closePlanningModal()">Annuler</button>
            <button class="btn btn-primary" onclick="savePlanning()">
                <i class="fas fa-save"></i> Enregistrer
            </button>
        </div>
    </div>
</div>

<form id="weekNavigationForm" method="GET" style="display: none;">
    <input type="hidden" name="week" id="weekInput">
    <input type="hidden" name="classroom" value="{{ selected_classroom_id }}">
</form>

{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/planning.js') }}"></script>
<script>
const currentWeek = '{{ current_week.strftime("%Y-%m-%d") }}';
const selectedClassroomId = {{ selected_classroom_id or 'null' }};
const periodsData = {{ periods_json | tojson }};
const classrooms = {{ classrooms_json | tojson }};
let currentPlanningCell = null;
let isExtendedView = false;

// Gérer le clic sur une case de la vue annuelle
function handleAnnualDayClick(element, dateStr) {
    if (element.dataset.hasClass !== 'true' || element.classList.contains('single-day-holiday')) return;

    // Récupérer l'ID de la classe actuellement sélectionnée dans la vue annuelle
    const classroomId = selectedClassroomId;

    // Ouvrir le modal de planification journalière avec filtrage par classe
    openDayPlanningModal(dateStr, classroomId);
}

function navigateToWeek(weekStartDate) {
    // Ajouter un effet visuel de chargement sur la vue hebdomadaire uniquement
    const weeklyView = document.querySelector('.weekly-view');
    weeklyView.classList.add('loading');

    // Utiliser le formulaire existant avec la date de début de semaine
    document.getElementById('weekInput').value = weekStartDate;

    // Soumettre le formulaire
    document.getElementById('weekNavigationForm').submit();
}

function navigateWeek(direction) {
    // Ajouter un effet de chargement sur la vue hebdomadaire
    const weeklyView = document.querySelector('.weekly-view');
    weeklyView.classList.add('loading');

    const currentDate = new Date('{{ current_week }}');
    if (direction === 'prev') {
        currentDate.setDate(currentDate.getDate() - 7);
    } else {
        currentDate.setDate(currentDate.getDate() + 7);
    }

    document.getElementById('weekInput').value = formatDate(currentDate);
    document.getElementById('weekNavigationForm').submit();
}

function navigateToToday() {
    // Ajouter un effet de chargement sur la vue hebdomadaire
    const weeklyView = document.querySelector('.weekly-view');
    weeklyView.classList.add('loading');

    const today = new Date();
    document.getElementById('weekInput').value = formatDate(today);
    document.getElementById('weekNavigationForm').submit();
}

function selectClassroom(classroomId) {
    const url = new URL(window.location);
    url.searchParams.set('classroom', classroomId);
    window.location = url;
}

function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Basculer entre vue normale et vue étendue
function toggleViewMode() {
    const calendarMain = document.querySelector('.calendar-main');
    const toggleIcon = document.getElementById('toggleIcon');
    const toggleText = document.getElementById('toggleText');

    isExtendedView = !isExtendedView;

    if (isExtendedView) {
        calendarMain.classList.add('extended-view');
        toggleIcon.className = 'fas fa-compress-alt';
        toggleText.textContent = 'Vue normale';
    } else {
        calendarMain.classList.remove('extended-view');
        toggleIcon.className = 'fas fa-expand-alt';
        toggleText.textContent = 'Vue étendue';
    }

    // Sauvegarder la préférence
    localStorage.setItem('calendarViewMode', isExtendedView ? 'extended' : 'normal');
}

// Appliquer la couleur de la classe sélectionnée
function applyClassroomColor() {
    const selectedClassroom = {{ classrooms_json | tojson }}.find(c => c.id === selectedClassroomId);
    if (selectedClassroom && selectedClassroom.color) {
        const annualGrid = document.querySelector('.annual-grid');
        if (annualGrid) {
            // Appliquer la couleur comme variable CSS
            annualGrid.style.setProperty('--classroom-color', selectedClassroom.color);
        }
    }
}

// Initialiser les données de planification au chargement
document.addEventListener('DOMContentLoaded', function() {
    loadWeeklyPlannings();
    applyClassroomColor();

    // Restaurer la préférence de vue
    const savedViewMode = localStorage.getItem('calendarViewMode');
    if (savedViewMode === 'extended' && !isExtendedView) {
        toggleViewMode();
    }
});

<!-- Ajoutez ce script dans calendar_view.html après le script existant dans le bloc extra_js -->


// Ajout des styles CSS inline pour les éléments de période passée
const styleSheet = document.createElement('style');
styleSheet.textContent = `
    .past-period-description {
        background-color: #F9FAFB;
        border: 1px solid #E5E7EB;
        border-radius: 0.375rem;
        padding: 1rem;
        min-height: 60px;
        line-height: 1.5;
    }

    .checklist-item {
        display: flex;
        align-items: center;
        margin: 0.5rem 0;
        padding: 0.25rem 0;
    }

    .checklist-item.completed {
        color: #10B981;
    }

    .checklist-item.completed span {
        text-decoration: line-through;
    }

    .checklist-item.not-completed {
        color: #EF4444;
    }

    .checklist-item i {
        margin-right: 0.5rem;
        font-size: 1rem;
    }

    .modal-body .form-control:disabled {
        background-color: #F3F4F6;
        cursor: not-allowed;
    }

    .checklist-help {
        font-size: 0.75rem;
        color: var(--gray-color);
        margin-top: 0.5rem;
        font-style: italic;
    }
`;
document.head.appendChild(styleSheet);

// S'assurer que la notification est disponible
if (typeof showNotification === 'undefined') {
    window.showNotification = function(type, message) {
        // Créer le conteneur de notifications s'il n'existe pas
        let container = document.querySelector('.notifications-container');
        if (!container) {
            container = document.createElement('div');
            container.className = 'notifications-container';
            container.style.cssText = 'position: fixed; top: 80px; right: 20px; z-index: 1000;';
            document.body.appendChild(container);
        }

        // Créer la notification
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            background-color: ${type === 'success' ? '#D1FAE5' : '#FEE2E2'};
            color: ${type === 'success' ? '#065F46' : '#991B1B'};
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideInNotification 0.3s ease;
            max-width: 400px;
        `;

        const icon = document.createElement('i');
        icon.className = `fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}`;

        const text = document.createElement('span');
        text.textContent = message;

        notification.appendChild(icon);
        notification.appendChild(text);
        container.appendChild(notification);

        // Supprimer la notification après 5 secondes
        setTimeout(() => {
            notification.style.animation = 'slideOutNotification 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 5000);
    };
}

</script>
{% endblock %}



================================================================================
FICHIER: dashboard.html
LOCALISATION: templates/planning/dashboard.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/planning/dashboard.html
================================================================================

{% extends "base.html" %}

{% block title %}Tableau de bord - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.dashboard-container {
    max-width: 1200px;
    margin: 0 auto;
}

.welcome-section {
    background: linear-gradient(135deg, var(--primary-color) 0%, #6366F1 100%);
    color: white;
    padding: 3rem;
    border-radius: 1rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow-lg);
}

.welcome-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.welcome-text h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
}

.welcome-text p {
    font-size: 1.25rem;
    opacity: 0.9;
}

.today-date {
    text-align: right;
}

.today-date .date {
    font-size: 2rem;
    font-weight: 700;
}

.today-date .day {
    font-size: 1.125rem;
    opacity: 0.9;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    margin-bottom: 1rem;
}

.stat-icon.primary {
    background-color: #EDE9FE;
    color: var(--primary-color);
}

.stat-icon.success {
    background-color: #D1FAE5;
    color: var(--success-color);
}

.stat-icon.warning {
    background-color: #FEF3C7;
    color: var(--warning-color);
}

.stat-icon.info {
    background-color: #DBEAFE;
    color: #3B82F6;
}

.stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--dark-color);
    margin-bottom: 0.25rem;
}

.stat-label {
    color: var(--gray-color);
    font-size: 0.875rem;
}

.quick-actions {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 2rem;
}

.quick-actions h2 {
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.action-buttons-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
}

.action-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding: 1.5rem;
    border: 2px solid var(--light-gray);
    border-radius: var(--border-radius);
    text-decoration: none;
    color: var(--dark-color);
    transition: all 0.3s ease;
    text-align: center;
}

.action-button:hover {
    border-color: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

.action-button i {
    font-size: 2rem;
    color: var(--primary-color);
}

.action-button span {
    font-weight: 500;
}

.action-button.current-lesson {
    background-color: #FEF3C7;
    border-color: var(--warning-color);
}

.action-button.current-lesson i {
    color: var(--warning-color);
}

.recent-activity {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
}

.recent-activity h2 {
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.activity-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.activity-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
}

.activity-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.125rem;
}

.activity-icon.planning {
    background-color: #E0E7FF;
    color: var(--primary-color);
}

.activity-details {
    flex: 1;
}

.activity-title {
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.activity-time {
    font-size: 0.875rem;
    color: var(--gray-color);
}

.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--gray-color);
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

@media (max-width: 768px) {
    .welcome-content {
        flex-direction: column;
        text-align: center;
        gap: 2rem;
    }

    .today-date {
        text-align: center;
    }

    .stats-grid {
        grid-template-columns: 1fr;
    }
}
</style>
{% endblock %}

{% block content %}
<div class="dashboard-container">
    <!-- Section de bienvenue -->
    <div class="welcome-section">
        <div class="welcome-content">
            <div class="welcome-text">
                <h1>Bonjour, {{ current_user.username }} !</h1>
                <p>Bienvenue dans votre espace de planification</p>
            </div>
            <div class="today-date">
                <div class="date">{{ today.day }}</div>
                <div class="day">{{ today.strftime('%B %Y') if today else 'Date non disponible' }}</div>
            </div>
        </div>
    </div>

    <!-- Statistiques -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon primary">
                <i class="fas fa-chalkboard-teacher"></i>
            </div>
            <div class="stat-value">{{ classrooms_count }}</div>
            <div class="stat-label">Classes configurées</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon success">
                <i class="fas fa-calendar-check"></i>
            </div>
            <div class="stat-value">{{ schedules_count }}</div>
            <div class="stat-label">Créneaux dans l'horaire type</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon warning">
                <i class="fas fa-calendar-week"></i>
            </div>
            <div class="stat-value">{{ week_plannings_count }}</div>
            <div class="stat-label">Planifications cette semaine</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon info">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-value">{{ current_user.period_duration }}</div>
            <div class="stat-label">Minutes par période</div>
        </div>
    </div>

    <!-- Actions rapides -->
   <!-- Remplacez la section "Actions rapides" dans templates/planning/dashboard.html par cette version mise à jour -->

<!-- Actions rapides -->
<div class="quick-actions">
    <h2><i class="fas fa-bolt"></i> Actions rapides</h2>
    <div class="action-buttons-grid">
        {% if current_lesson %}
        <a href="{{ url_for('planning.lesson_view') }}" class="action-button current-lesson">
            <i class="fas fa-graduation-cap"></i>
            <span>Cours actuel</span>
            <small style="font-size: 0.75rem; color: var(--gray-color); margin-top: 0.25rem;">
                {{ current_lesson.classroom.name }} - P{{ current_lesson.period_number }}
            </small>
        </a>
        {% elif next_lesson %}
        <a href="{{ url_for('planning.lesson_view') }}" class="action-button">
            <i class="fas fa-clock"></i>
            <span>Prochain cours</span>
            <small style="font-size: 0.75rem; color: var(--gray-color); margin-top: 0.25rem;">
                {{ next_lesson.classroom.name }} - {{ next_lesson.start_time.strftime('%H:%M') }}
            </small>
        </a>
        {% else %}
        <a href="{{ url_for('planning.lesson_view') }}" class="action-button">
            <i class="fas fa-calendar-alt"></i>
            <span>Prochain cours</span>
        </a>
        {% endif %}

        <a href="{{ url_for('planning.calendar_view') }}" class="action-button">
            <i class="fas fa-calendar"></i>
            <span>Voir le calendrier</span>
        </a>

        <a href="{{ url_for('schedule.weekly_schedule') }}" class="action-button">
            <i class="fas fa-edit"></i>
            <span>Modifier l'horaire type</span>
        </a>

        <!-- Nouveau bouton pour le gestionnaire de fichiers -->
        <a href="{{ url_for('file_manager.index') }}" class="action-button" style="background-color: #F0F9FF; border-color: #3B82F6;">
            <i class="fas fa-folder-open" style="color: #3B82F6;"></i>
            <span>Gestionnaire de fichiers</span>
        </a>

        <a href="{{ url_for('setup.initial_setup') }}" class="action-button">
            <i class="fas fa-cog"></i>
            <span>Paramètres</span>
        </a>

        <a href="{{ url_for('planning.manage_classes') }}" class="action-button">
            <i class="fas fa-users"></i>
            <span>Gérer les classes</span>
        </a>
    </div>
</div>
    <!-- Activité récente -->
    <div class="recent-activity">
        <h2><i class="fas fa-history"></i> Activité récente</h2>

        {% if week_plannings_count > 0 %}
        <div class="activity-list">
            <div class="activity-item">
                <div class="activity-icon planning">
                    <i class="fas fa-calendar-plus"></i>
                </div>
                <div class="activity-details">
                    <div class="activity-title">{{ week_plannings_count }} planifications cette semaine</div>
                    <div class="activity-time">Continuez votre excellent travail de planification !</div>
                </div>
            </div>
        </div>
        {% else %}
        <div class="empty-state">
            <i class="fas fa-calendar-times"></i>
            <p>Aucune planification cette semaine</p>
            <p>Commencez à planifier vos cours dès maintenant !</p>
            <a href="{{ url_for('planning.calendar_view') }}" class="btn btn-primary" style="margin-top: 1rem;">
                <i class="fas fa-calendar-plus"></i> Planifier mes cours
            </a>
        </div>
        {% endif %}
    </div>
</div>
{% endblock %}



================================================================================
FICHIER: lesson_view.html
LOCALISATION: templates/planning/lesson_view.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/planning/lesson_view.html
================================================================================

{% extends "base.html" %}

{% block title %}{% if is_current %}Leçon en cours{% else %}Prochain cours{% endif %} - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.lesson-container {
    max-width: 1400px;
    margin: 0 auto;
    padding-bottom: 2rem;
    min-height: calc(100vh - 200px);
}

.lesson-header {
    background-color: var(--white);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 1.5rem;
}

.lesson-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.lesson-title h1 {
    margin: 0;
    font-size: 1.75rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.lesson-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
}

.lesson-badge.current {
    background-color: #FEF3C7;
    color: #92400E;
}

.lesson-badge.next {
    background-color: #DBEAFE;
    color: #1E40AF;
}

.lesson-details {
    display: flex;
    gap: 2rem;
    margin-top: 0.5rem;
    color: var(--gray-color);
}

.lesson-detail {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.lesson-main {
    display: grid;
    grid-template-columns: 1.5fr 1fr 1fr;
    gap: 1.5rem;
    min-height: 500px;
    margin-bottom: 2rem;
}

.planning-section, .resources-section, .attendance-section {
    background-color: var(--white);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    min-height: 400px;
    height: auto;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--light-gray);
}

.section-title {
    font-size: 1.25rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.planning-content {
    flex: 1;
    overflow-y: auto;
}

.planning-item {
    margin-bottom: 2rem;
}

.planning-item h3 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
    font-size: 1.125rem;
}

.planning-description {
    color: var(--gray-color);
    line-height: 1.6;
    white-space: pre-wrap;
}

/* Styles pour les checkboxes dans la planification */
.planning-checklist-item {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    margin: 0.5rem 0;
    min-height: 1.5rem;
}

.planning-checkbox {
    margin-top: 0.125rem;
    cursor: pointer;
    width: 1rem;
    height: 1rem;
}

.planning-checkbox-label {
    flex: 1;
    cursor: pointer;
    user-select: none;
}

.planning-checkbox:checked + .planning-checkbox-label {
    text-decoration: line-through;
    opacity: 0.7;
}

#planningDescription {
    font-family: monospace;
    tab-size: 4;
}

.checklist-help {
    font-size: 0.75rem;
    color: var(--gray-color);
    margin-top: 0.5rem;
    font-style: italic;
}

.resources-content {
    flex: 1;
    overflow-y: auto;
}

.no-resources {
    text-align: center;
    padding: 3rem;
    color: var(--gray-color);
}

.no-resources i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

/* Styles pour la section présences */
.attendance-content {
    flex: 1;
    overflow-y: auto;
}

.attendance-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.stat-item {
    text-align: center;
    padding: 0.5rem;
    border-radius: 0.375rem;
    background-color: var(--light-gray);
}

.stat-item.present {
    background-color: #D1FAE5;
    color: #065F46;
}

.stat-item.absent {
    background-color: #FEE2E2;
    color: #991B1B;
}

.stat-item.late {
    background-color: #FEF3C7;
    color: #92400E;
}

.stat-value {
    font-size: 1.5rem;
    font-weight: 700;
}

.stat-label {
    font-size: 0.75rem;
}

.students-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.student-attendance {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 0.375rem;
    background-color: var(--light-gray);
    transition: all 0.2s ease;
}

.student-attendance.present {
    background-color: #D1FAE5;
}

.student-attendance.absent {
    background-color: #FEE2E2;
}

.student-attendance.late {
    background-color: #FEF3C7;
}

.student-info {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    user-select: none;
}

.student-avatar {
    width: 32px;
    height: 32px;
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 600;
}

.student-attendance.absent .student-avatar {
    background-color: var(--danger-color);
}

.student-attendance.late .student-avatar {
    background-color: var(--warning-color);
}

.student-name {
    font-weight: 500;
}

.student-attendance.absent .student-name {
    color: var(--danger-color);
    text-decoration: line-through;
}

.student-attendance.late .student-name {
    color: var(--warning-color);
}

.late-controls {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.late-minutes {
    width: 60px;
    padding: 0.25rem;
    border: 1px solid #D1D5DB;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    text-align: center;
}

.late-minutes:focus {
    outline: none;
    border-color: var(--warning-color);
}

.btn-late {
    width: 32px;
    height: 32px;
    border: none;
    background-color: #F3F4F6;
    color: var(--gray-color);
    border-radius: 0.25rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.btn-late:hover {
    background-color: var(--warning-color);
    color: white;
}

.student-attendance.late .btn-late {
    background-color: var(--warning-color);
    color: white;
}

.timer-widget {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem 1.5rem;
    background-color: var(--light-gray);
    border-radius: var(--border-radius);
}

.timer-display {
    font-size: 1.5rem;
    font-weight: 600;
    font-family: monospace;
}

.timer-controls {
    display: flex;
    gap: 0.5rem;
}

.timer-btn {
    width: 36px;
    height: 36px;
    border: none;
    background-color: var(--white);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
}

.timer-btn:hover {
    transform: scale(1.1);
    box-shadow: var(--shadow-sm);
}

/* Indicateur de sauvegarde */
.saving-indicator {
    position: fixed;
    top: 80px;
    right: 20px;
    background-color: #3B82F6;
    color: white;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    display: none;
    align-items: center;
    gap: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

.saving-indicator.show {
    display: flex;
}

.saving-indicator.success {
    background-color: #10B981;
}

.saving-indicator.error {
    background-color: #EF4444;
}

@media (max-width: 1200px) {
    .lesson-main {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .lesson-container {
        min-height: auto;
        padding-bottom: 2rem;
    }

    .planning-section, .resources-section, .attendance-section {
        min-height: 300px;
    }
}
</style>
{% endblock %}

{% block content %}
<div class="lesson-container">
    <!-- En-tête de la leçon -->
    <div class="lesson-header">
        <div class="lesson-info">
            <div>
                <div class="lesson-title">
                    <h1>
                        {% if is_current %}
                        <span class="lesson-badge current">
                            <i class="fas fa-circle"></i> En cours
                        </span>
                        {% else %}
                        <span class="lesson-badge next">
                            <i class="fas fa-clock"></i> Prochain cours
                        </span>
                        {% endif %}
                        {{ lesson.classroom.name }} - {{ lesson.classroom.subject }}
                    </h1>
                </div>
                <div class="lesson-details">
                    <div class="lesson-detail">
                        <i class="fas fa-calendar"></i>
                        <span>{{ lesson_date.strftime('%A %d %B %Y') }}</span>
                    </div>
                    <div class="lesson-detail">
                        <i class="fas fa-clock"></i>
                        <span>Période {{ lesson.period_number }} ({{ lesson.start_time.strftime('%H:%M') }} - {{ lesson.end_time.strftime('%H:%M') }})</span>
                    </div>
                </div>
            </div>

            {% if is_current %}
            <div class="timer-widget">
                <div class="timer-display" id="lessonTimer">{{ time_remaining }}</div>
                <div class="timer-controls">
                    <button class="timer-btn" onclick="toggleTimer()" title="Pause/Reprendre">
                        <i class="fas fa-pause" id="timerIcon"></i>
                    </button>
                </div>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Contenu principal -->
    <div class="lesson-main">
        <!-- Section planification -->
        <div class="planning-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-clipboard-list"></i> Planification du cours
                </h2>
                <button class="edit-planning-btn" onclick="togglePlanningEdit()">
                    <i class="fas fa-edit"></i> <span id="editBtnText">Modifier</span>
                </button>
            </div>

            <div class="planning-content">
                <!-- Vue de lecture -->
                <div id="planningView" {% if not planning %}style="display: none;"{% endif %}>
                    <div class="planning-item">
                        <h3 id="planningTitleDisplay">{{ planning.title if planning else 'Cours sans titre' }}</h3>
                        <div class="planning-description" id="planningDescriptionDisplay">
                            {% if planning %}
                                {{ render_planning_with_checkboxes(planning) | safe }}
                            {% else %}
                                Aucune description
                            {% endif %}
                        </div>
                    </div>
                </div>

                <!-- Formulaire d'édition -->
                <div id="planningEdit" style="{% if planning %}display: none;{% endif %}">
                    <form id="planningForm" onsubmit="savePlanning(event)">
                        <div class="form-group">
                            <label class="form-label">Titre du cours</label>
                            <input type="text"
                                   id="planningTitle"
                                   class="form-control"
                                   placeholder="Ex: Introduction aux fractions"
                                   value="{{ planning.title if planning else '' }}">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Description détaillée</label>
                            <textarea id="planningDescription"
                                      class="form-control"
                                      rows="8"
                                      placeholder="Objectifs du cours, activités prévues, exercices, devoirs...">{{ planning.description if planning else '' }}</textarea>
                            <div class="checklist-help">
                                Astuce : Commencez une ligne par "-" pour créer une case à cocher
                            </div>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Enregistrer
                            </button>
                            <button type="button" class="btn btn-outline" onclick="cancelPlanningEdit()">
                                Annuler
                            </button>
                        </div>
                    </form>
                </div>

                <!-- État vide -->
                {% if not planning %}
                <div id="emptyPlanning" class="no-resources">
                    <i class="fas fa-clipboard"></i>
                    <p>Aucune planification pour ce cours</p>
                    <button class="btn btn-primary" onclick="togglePlanningEdit()">
                        <i class="fas fa-plus"></i> Créer une planification
                    </button>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Section présences -->
        <div class="attendance-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-user-check"></i> Présences
                </h2>
            </div>

            <div class="attendance-content">
                <!-- Statistiques -->
                <div class="attendance-stats">
                    <div class="stat-item present">
                        <div class="stat-value" id="presentCount">0</div>
                        <div class="stat-label">Présents</div>
                    </div>
                    <div class="stat-item absent">
                        <div class="stat-value" id="absentCount">0</div>
                        <div class="stat-label">Absents</div>
                    </div>
                    <div class="stat-item late">
                        <div class="stat-value" id="lateCount">0</div>
                        <div class="stat-label">Retards</div>
                    </div>
                </div>

                <!-- Liste des élèves -->
                <div class="students-list">
                    {% for student in students %}
                    {% set attendance = attendance_records.get(student.id, {}) %}
                    {% set status = attendance.get('status', 'present') %}
                    {% set late_minutes = attendance.get('late_minutes', 0) %}

                    <div class="student-attendance {{ status }}"
                         id="student-{{ student.id }}"
                         data-student-id="{{ student.id }}"
                         data-status="{{ status }}">

                        <div class="student-info" onclick="toggleAttendance({{ student.id }})">
                            <div class="student-avatar">
                                {{ student.first_name[0] }}{{ student.last_name[0] if student.last_name else '' }}
                            </div>
                            <span class="student-name">{{ student.full_name }}</span>
                        </div>

                        <div class="late-controls">
                            <input type="number"
                                   class="late-minutes"
                                   id="late-{{ student.id }}"
                                   value="{{ late_minutes if status == 'late' else '' }}"
                                   min="1"
                                   max="120"
                                   placeholder="min">
                            <button class="btn-late"
                                    onclick="setLateStatus({{ student.id }})"
                                    title="Marquer en retard">
                                <i class="fas fa-clock"></i>
                            </button>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Section ressources -->
        <div class="resources-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-folder-open"></i> Ressources du cours
                </h2>
                <a href="#" class="add-resource-btn" onclick="alert('Fonctionnalité à venir : upload de fichiers')">
                    <i class="fas fa-plus"></i> Ajouter
                </a>
            </div>

            <div class="resources-content">
                <div class="no-resources">
                    <i class="fas fa-file-pdf"></i>
                    <p>Aucune ressource disponible</p>
                    <p style="font-size: 0.875rem; margin-top: 0.5rem;">La gestion des fichiers sera bientôt disponible</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Indicateur de sauvegarde -->
<div class="saving-indicator" id="savingIndicator">
    <i class="fas fa-spinner fa-spin"></i>
    <span id="savingText">Sauvegarde...</span>
</div>

<script>
// Variables globales
const lessonDate = '{{ lesson_date.strftime("%Y-%m-%d") }}';
const periodNumber = {{ lesson.period_number }};
const classroomId = {{ lesson.classroom_id }};
let isEditingPlanning = false;
let checklistStates = {{ (planning.get_checklist_states() if planning else {}) | tojson }};
let checkboxUpdateTimeout = null;

// Fonction pour basculer l'édition de la planification
function togglePlanningEdit() {
    isEditingPlanning = !isEditingPlanning;

    const planningView = document.getElementById('planningView');
    const planningEdit = document.getElementById('planningEdit');
    const emptyPlanning = document.getElementById('emptyPlanning');
    const editBtn = document.querySelector('.edit-planning-btn');
    const editBtnText = document.getElementById('editBtnText');

    if (isEditingPlanning) {
        // Passer en mode édition
        if (planningView) planningView.style.display = 'none';
        if (emptyPlanning) emptyPlanning.style.display = 'none';
        planningEdit.style.display = 'block';
        editBtnText.textContent = 'Fermer';

        // Focus sur le titre
        document.getElementById('planningTitle').focus();
    } else {
        // Passer en mode lecture
        planningEdit.style.display = 'none';
        if (planningView && document.getElementById('planningTitleDisplay').textContent !== 'Cours sans titre') {
            planningView.style.display = 'block';
        } else if (emptyPlanning) {
            emptyPlanning.style.display = 'block';
        }
        editBtnText.textContent = 'Modifier';
    }
}

// Fonction pour gérer l'auto-conversion des tirets en checkboxes
document.getElementById('planningDescription').addEventListener('input', function(e) {
    const textarea = e.target;
    const cursorPos = textarea.selectionStart;
    const value = textarea.value;

    // Vérifier si on vient de taper un tiret en début de ligne
    if (e.inputType === 'insertText' && e.data === '-') {
        const lines = value.substring(0, cursorPos).split('\n');
        const currentLine = lines[lines.length - 1];

        // Si le tiret est au début de la ligne (avec éventuellement des espaces avant)
        if (currentLine.trim() === '-') {
            e.preventDefault();

            // Remplacer le tiret par [ ]
            const beforeCursor = value.substring(0, cursorPos - 1);
            const afterCursor = value.substring(cursorPos);
            const spaces = currentLine.match(/^\s*/)[0]; // Préserver l'indentation

            textarea.value = beforeCursor + spaces + '[ ] ' + afterCursor;

            // Placer le curseur après [ ]
            const newCursorPos = cursorPos - 1 + spaces.length + 4;
            textarea.setSelectionRange(newCursorPos, newCursorPos);
        }
    }
});

// Fonction pour échapper le HTML
function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

// Fonction pour mettre à jour l'état d'une checkbox
async function updateCheckboxState(index, checked) {
    // Mettre à jour l'état local immédiatement
    checklistStates[index] = checked;

    // Afficher l'indicateur de sauvegarde
    showSavingIndicator();

    // Annuler le timeout précédent s'il existe
    if (checkboxUpdateTimeout) {
        clearTimeout(checkboxUpdateTimeout);
    }

    // Sauvegarder avec un petit délai pour éviter trop de requêtes
    checkboxUpdateTimeout = setTimeout(async () => {
        try {
            const response = await fetch('{{ url_for("planning.update_checklist_states") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    date: lessonDate,
                    period_number: periodNumber,
                    checklist_states: checklistStates
                })
            });

            const result = await response.json();

            if (result.success) {
                showSavingIndicator('success', 'Sauvegardé');
            } else {
                // En cas d'erreur, rétablir l'état précédent
                checklistStates[index] = !checked;
                const checkbox = document.getElementById(`checkbox-${index}`);
                if (checkbox) {
                    checkbox.checked = !checked;
                }
                showSavingIndicator('error', 'Erreur de sauvegarde');
            }
        } catch (error) {
            console.error('Erreur:', error);
            // En cas d'erreur, rétablir l'état précédent
            checklistStates[index] = !checked;
            const checkbox = document.getElementById(`checkbox-${index}`);
            if (checkbox) {
                checkbox.checked = !checked;
            }
            showSavingIndicator('error', 'Erreur de connexion');
        }
    }, 500); // Délai de 500ms pour regrouper les changements
}

// Fonction pour afficher l'indicateur de sauvegarde
function showSavingIndicator(status = 'saving', message = 'Sauvegarde...') {
    const indicator = document.getElementById('savingIndicator');
    const text = document.getElementById('savingText');
    const icon = indicator.querySelector('i');

    // Réinitialiser les classes
    indicator.className = 'saving-indicator show';

    if (status === 'saving') {
        icon.className = 'fas fa-spinner fa-spin';
        text.textContent = message;
    } else if (status === 'success') {
        indicator.classList.add('success');
        icon.className = 'fas fa-check';
        text.textContent = message;
    } else if (status === 'error') {
        indicator.classList.add('error');
        icon.className = 'fas fa-exclamation-triangle';
        text.textContent = message;
    }

    // Masquer après 2 secondes si c'est un succès ou une erreur
    if (status !== 'saving') {
        setTimeout(() => {
            indicator.classList.remove('show');
        }, 2000);
    }
}

// Fonction pour annuler l'édition
function cancelPlanningEdit() {
    // Restaurer les valeurs d'origine
    const titleDisplay = document.getElementById('planningTitleDisplay');
    const descriptionDisplay = document.getElementById('planningDescriptionDisplay');

    if (titleDisplay && titleDisplay.textContent !== 'Cours sans titre') {
        document.getElementById('planningTitle').value = titleDisplay.textContent;

        // Récupérer la description originale depuis les données du serveur
        {% if planning %}
        document.getElementById('planningDescription').value = {{ planning.description | tojson }};
        {% else %}
        document.getElementById('planningDescription').value = '';
        {% endif %}
    }

    togglePlanningEdit();
}

// Fonction pour sauvegarder la planification
async function savePlanning(event) {
    event.preventDefault();

    const title = document.getElementById('planningTitle').value.trim();
    const description = document.getElementById('planningDescription').value.trim();

    const submitButton = event.target.querySelector('button[type="submit"]');
    const originalText = submitButton.innerHTML;

    // Désactiver le bouton et afficher un loader
    submitButton.disabled = true;
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';

    try {
        const response = await fetch('{{ url_for("planning.save_lesson_planning") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                date: lessonDate,
                period_number: periodNumber,
                classroom_id: classroomId,
                title: title,
                description: description,
                checklist_states: checklistStates
            })
        });

        const result = await response.json();

        if (result.success) {
            // Recharger la page pour afficher les changements
            window.location.reload();
        } else {
            showPlanningNotification('error', result.message || 'Erreur lors de l\'enregistrement');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showPlanningNotification('error', 'Erreur lors de la communication avec le serveur');
    } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = originalText;
    }
}

// Fonction pour afficher une notification
function showPlanningNotification(type, message) {
    // Créer le conteneur de notifications s'il n'existe pas
    let container = document.querySelector('.notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'notifications-container';
        container.style.cssText = 'position: fixed; top: 80px; right: 20px; z-index: 1000;';
        document.body.appendChild(container);
    }

    // Créer la notification
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        background-color: ${type === 'success' ? '#D1FAE5' : '#FEE2E2'};
        color: ${type === 'success' ? '#065F46' : '#991B1B'};
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: slideInNotification 0.3s ease;
        max-width: 400px;
    `;

    const icon = document.createElement('i');
    icon.className = `fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}`;

    const text = document.createElement('span');
    text.textContent = message;

    notification.appendChild(icon);
    notification.appendChild(text);
    container.appendChild(notification);

    // Supprimer la notification après 5 secondes
    setTimeout(() => {
        notification.style.animation = 'slideOutNotification 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// Fonction pour basculer entre présent/absent
async function toggleAttendance(studentId) {
    const studentElement = document.getElementById(`student-${studentId}`);
    const currentStatus = studentElement.dataset.status;
    let newStatus;

    // Cycle: present -> absent -> present (ignorer late dans le cycle)
    if (currentStatus === 'present' || currentStatus === 'late') {
        newStatus = 'absent';
    } else {
        newStatus = 'present';
    }

    // Réinitialiser le champ de retard
    const lateInput = document.getElementById(`late-${studentId}`);
    lateInput.value = '';

    await updateAttendance(studentId, newStatus, null);
}

// Fonction pour marquer un élève en retard
async function setLateStatus(studentId) {
    const lateInput = document.getElementById(`late-${studentId}`);
    const minutes = lateInput.value;

    if (!minutes || minutes <= 0) {
        alert('Veuillez entrer le nombre de minutes de retard');
        lateInput.focus();
        return;
    }

    await updateAttendance(studentId, 'late', parseInt(minutes));
}

// Fonction pour envoyer la mise à jour au serveur
async function updateAttendance(studentId, status, lateMinutes) {
    try {
        const response = await fetch('{{ url_for("planning.update_attendance") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                student_id: studentId,
                classroom_id: classroomId,
                date: lessonDate,
                period_number: periodNumber,
                status: status,
                late_minutes: lateMinutes
            })
        });

        const result = await response.json();

        if (result.success) {
            // Mettre à jour l'interface
            const studentElement = document.getElementById(`student-${studentId}`);
            const lateInput = document.getElementById(`late-${studentId}`);

            // Retirer toutes les classes de statut
            studentElement.classList.remove('present', 'absent', 'late');

            // Ajouter la nouvelle classe
            studentElement.classList.add(status);
            studentElement.dataset.status = status;

            // Si ce n'est pas un retard, vider le champ
            if (status !== 'late') {
                lateInput.value = '';
            }

            // Mettre à jour les statistiques
            updateStats();

            // Afficher une notification visuelle
            showQuickNotification(studentElement, status);
        } else {
            alert('Erreur lors de la mise à jour de la présence');
        }
    } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la communication avec le serveur');
    }
}

// Fonction pour afficher une notification rapide
function showQuickNotification(element, status) {
    element.style.transform = 'scale(0.95)';
    setTimeout(() => {
        element.style.transform = 'scale(1)';
    }, 200);
}

// Permettre d'entrer le retard avec Enter
document.addEventListener('DOMContentLoaded', function() {
    // Initialiser les statistiques
    updateStats();

    // Ajouter l'événement Enter sur tous les champs de retard
    document.querySelectorAll('.late-minutes').forEach(input => {
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const studentId = this.id.replace('late-', '');
                setLateStatus(parseInt(studentId));
            }
        });
    });

    // Gérer les raccourcis clavier pour la planification
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + E pour éditer la planification
        if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
            e.preventDefault();
            if (!isEditingPlanning) {
                togglePlanningEdit();
            }
        }

        // Escape pour annuler l'édition
        if (e.key === 'Escape' && isEditingPlanning) {
            cancelPlanningEdit();
        }
    });
});

// Fonction pour mettre à jour les statistiques
function updateStats() {
    let present = 0;
    let absent = 0;
    let late = 0;

    document.querySelectorAll('.student-attendance').forEach(student => {
        const status = student.dataset.status;
        if (status === 'present') present++;
        else if (status === 'absent') absent++;
        else if (status === 'late') late++;
    });

    document.getElementById('presentCount').textContent = present;
    document.getElementById('absentCount').textContent = absent;
    document.getElementById('lateCount').textContent = late;
}

{% if is_current %}
// Gestion du timer
let timerInterval;
let isPaused = false;
let remainingSeconds = {{ remaining_seconds }};

function updateTimer() {
    if (!isPaused && remainingSeconds > 0) {
        remainingSeconds--;

        const hours = Math.floor(remainingSeconds / 3600);
        const minutes = Math.floor((remainingSeconds % 3600) / 60);
        const seconds = remainingSeconds % 60;

        let display = '';
        if (hours > 0) {
            display = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        } else {
            display = `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        document.getElementById('lessonTimer').textContent = display;

        if (remainingSeconds === 0) {
            clearInterval(timerInterval);
            alert('Le cours est terminé !');
        }
    }
}

function toggleTimer() {
    isPaused = !isPaused;
    const icon = document.getElementById('timerIcon');
    icon.className = isPaused ? 'fas fa-play' : 'fas fa-pause';
}

// Démarrer le timer
timerInterval = setInterval(updateTimer, 1000);

// Nettoyer à la fermeture de la page
window.addEventListener('beforeunload', () => {
    clearInterval(timerInterval);
});
{% endif %}
</script>

<style>
.add-resource-btn, .edit-planning-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.375rem 0.75rem;
    background-color: transparent;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    border-radius: var(--border-radius);
    text-decoration: none;
    font-size: 0.875rem;
    transition: all 0.3s ease;
    cursor: pointer;
}

.add-resource-btn:hover, .edit-planning-btn:hover {
    background-color: var(--primary-color);
    color: white;
}

.add-resource-btn {
    background-color: var(--primary-color);
    color: white;
}

.add-resource-btn:hover {
    background-color: var(--primary-hover);
}

/* Styles pour le formulaire de planification */
#planningEdit {
    animation: fadeIn 0.3s ease;
}

#planningForm .form-group {
    margin-bottom: 1rem;
}

#planningForm .form-label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--dark-color);
}

#planningForm .form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #D1D5DB;
    border-radius: var(--border-radius);
    font-size: 1rem;
    transition: border-color 0.3s ease;
    font-family: inherit;
}

#planningForm .form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
}

#planningForm textarea.form-control {
    resize: vertical;
    min-height: 120px;
}

.form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 1.5rem;
}

.form-actions button {
    flex: 1;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes slideInNotification {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOutNotification {
    from {
        transform: translateX(0);
        opacity: 1;
    }
    to {
        transform: translateX(100%);
        opacity: 0;
    }
}

/* Animation pour le changement de vue */
.planning-content > div {
    transition: opacity 0.2s ease;
}
</style>
{% endblock %}



================================================================================
FICHIER: manage_classes.html
LOCALISATION: templates/planning/manage_classes.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/planning/manage_classes.html
================================================================================

{% extends "base.html" %}

{% block title %}Gestion des classes - TeacherPlanner{% endblock %}

{% block extra_css %}
<style>
.manage-classes-container {
    max-width: 1400px;
    margin: 0 auto;
}

.classes-header {
    background-color: var(--white);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    margin-bottom: 2rem;
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.header-title {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.header-title h1 {
    margin: 0;
    font-size: 1.75rem;
}

.class-selector {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.class-selector select {
    padding: 0.5rem 1rem;
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    font-size: 1rem;
    background-color: var(--white);
}

/* Tabs */
.tabs-container {
    border-bottom: 2px solid var(--light-gray);
    margin-bottom: 2rem;
}

.tabs {
    display: flex;
    gap: 0;
}

.tab-button {
    padding: 1rem 2rem;
    background: none;
    border: none;
    border-bottom: 3px solid transparent;
    color: var(--gray-color);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.tab-button:hover {
    color: var(--primary-color);
}

.tab-button.active {
    color: var(--primary-color);
    border-bottom-color: var(--primary-color);
}

.tab-content {
    display: none;
    animation: fadeIn 0.3s ease;
}

.tab-content.active {
    display: block;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Students section */
.students-section {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.section-title {
    font-size: 1.25rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.students-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.student-card {
    background-color: var(--light-gray);
    padding: 1rem;
    border-radius: var(--border-radius);
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.2s ease;
}

.student-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

.student-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.student-avatar {
    width: 40px;
    height: 40px;
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
}

.student-details h4 {
    margin: 0;
    font-size: 1rem;
}

.student-details p {
    margin: 0;
    font-size: 0.875rem;
    color: var(--gray-color);
}

.student-actions {
    display: flex;
    gap: 0.5rem;
}

.btn-icon {
    width: 36px;
    height: 36px;
    border: none;
    background-color: transparent;
    color: var(--gray-color);
    border-radius: var(--border-radius);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.btn-icon:hover {
    background-color: var(--light-gray);
    color: var(--primary-color);
}

.btn-icon.danger:hover {
    background-color: #FEE2E2;
    color: var(--danger-color);
}

/* Add student form */
.add-student-form {
    background-color: #F9FAFB;
    padding: 1.5rem;
    border-radius: var(--border-radius);
    border: 2px dashed var(--primary-color);
    margin-bottom: 2rem;
}

.form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

/* Grades section */
.grades-section {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
}

.grades-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.stat-box {
    background-color: var(--light-gray);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    text-align: center;
}

.stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
}

.stat-label {
    font-size: 0.875rem;
    color: var(--gray-color);
}

.grades-table {
    width: 100%;
    background-color: var(--white);
    border-radius: var(--border-radius);
    overflow: hidden;
}

.grades-table table {
    width: 100%;
    border-collapse: collapse;
}

.grades-table th {
    background-color: var(--light-gray);
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: var(--dark-color);
}

.grades-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--light-gray);
}

.grades-table tr:hover {
    background-color: #F9FAFB;
}

.grade-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 600;
}

.grade-badge.excellent {
    background-color: #D1FAE5;
    color: #065F46;
}

.grade-badge.good {
    background-color: #DBEAFE;
    color: #1E40AF;
}

.grade-badge.average {
    background-color: #FEF3C7;
    color: #92400E;
}

.grade-badge.poor {
    background-color: #FEE2E2;
    color: #991B1B;
}

/* Files section */
.files-section {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
}

.upload-zone {
    border: 2px dashed var(--primary-color);
    border-radius: var(--border-radius);
    padding: 3rem;
    text-align: center;
    background-color: #F9FAFB;
    margin-bottom: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.upload-zone:hover {
    background-color: #EFF6FF;
    border-color: var(--primary-hover);
}

.upload-zone i {
    font-size: 3rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.files-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
}

.file-card {
    background-color: var(--light-gray);
    padding: 1rem;
    border-radius: var(--border-radius);
    text-align: center;
    transition: all 0.2s ease;
    cursor: pointer;
}

.file-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

.file-icon {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
}

.file-icon.pdf { color: #DC2626; }
.file-icon.doc { color: #2563EB; }
.file-icon.img { color: #059669; }
.file-icon.other { color: #6B7280; }

.file-name {
    font-size: 0.875rem;
    font-weight: 500;
    margin-bottom: 0.25rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.file-size {
    font-size: 0.75rem;
    color: var(--gray-color);
}

/* Chapters section */
.chapters-section {
    background-color: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
}

.chapters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
}

.chapter-card {
    background-color: var(--light-gray);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    position: relative;
}

.chapter-card.current {
    background-color: #EFF6FF;
    border: 2px solid var(--primary-color);
}

.chapter-number {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 30px;
    height: 30px;
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 0.875rem;
}

.chapter-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.chapter-description {
    font-size: 0.875rem;
    color: var(--gray-color);
    margin-bottom: 1rem;
}

.chapter-actions {
    display: flex;
    gap: 0.5rem;
}

.current-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background-color: var(--primary-color);
    color: white;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
}

/* Empty states */
.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--gray-color);
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.empty-state p {
    margin-bottom: 1rem;
}

/* Responsive */
@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        gap: 1rem;
    }

    .tabs {
        overflow-x: auto;
    }

    .tab-button {
        padding: 0.75rem 1rem;
        font-size: 0.875rem;
    }
}
</style>
{% endblock %}

{% block content %}
<div class="manage-classes-container">
    <!-- En-tête -->
    <div class="classes-header">
        <div class="header-content">
            <div class="header-title">
                <h1><i class="fas fa-users"></i> Gestion des classes</h1>
            </div>
            <div class="class-selector">
                <label for="classSelect">Classe :</label>
                <select id="classSelect" onchange="changeClass(this.value)">
                    {% for classroom in classrooms %}
                    <option value="{{ classroom.id }}" {% if classroom.id == selected_classroom_id %}selected{% endif %}>
                        {{ classroom.name }} - {{ classroom.subject }}
                    </option>
                    {% endfor %}
                </select>
            </div>
        </div>

        <!-- Tabs -->
        <div class="tabs-container">
            <div class="tabs">
                <button class="tab-button active" onclick="showTab('students')">
                    <i class="fas fa-user-graduate"></i> Élèves
                </button>
                <button class="tab-button" onclick="showTab('grades')">
                    <i class="fas fa-clipboard-check"></i> Notes
                </button>
                <button class="tab-button" onclick="showTab('files')">
                    <i class="fas fa-folder-open"></i> Fichiers
                </button>
                <button class="tab-button" onclick="showTab('chapters')">
                    <i class="fas fa-book"></i> Chapitres
                </button>
            </div>
        </div>
    </div>

    <!-- Contenu des onglets -->
    <!-- Onglet Élèves -->
    <div id="students-tab" class="tab-content active">
        <div class="students-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-user-graduate"></i> Liste des élèves
                </h2>
                <button class="btn btn-primary" onclick="toggleAddStudentForm()">
                    <i class="fas fa-plus"></i> Ajouter un élève
                </button>
            </div>

            <!-- Formulaire d'ajout d'élève (caché par défaut) -->
            <div id="addStudentForm" class="add-student-form" style="display: none;">
                <h3>Nouvel élève</h3>
                <form id="studentForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Prénom <span style="color: var(--danger-color);">*</span></label>
                            <input type="text" class="form-control" id="studentFirstName" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Nom de famille</label>
                            <input type="text" class="form-control" id="studentLastName">
                            <small style="color: var(--gray-color); font-size: 0.75rem;">Obligatoire uniquement si un élève a déjà ce prénom</small>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Email (optionnel)</label>
                            <input type="email" class="form-control" id="studentEmail">
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Enregistrer
                        </button>
                        <button type="button" class="btn btn-outline" onclick="toggleAddStudentForm()">
                            Annuler
                        </button>
                    </div>
                </form>
            </div>

            <!-- Liste des élèves -->
            {% if students %}
            <div class="students-grid">
                {% for student in students %}
                <div class="student-card" id="student-{{ student.id }}">
                    <div class="student-info">
                        <div class="student-avatar">
                            {{ student.first_name[0] }}{{ student.last_name[0] if student.last_name else '' }}
                        </div>
                        <div class="student-details">
                            <h4>{{ student.full_name }}</h4>
                            {% if student.email %}
                            <p>{{ student.email }}</p>
                            {% endif %}
                        </div>
                    </div>
                    <div class="student-actions">
                        <button class="btn-icon" title="Modifier" onclick="editStudent({{ student.id }})">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-icon danger" title="Supprimer" onclick="deleteStudent({{ student.id }}, '{{ student.full_name }}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>
            {% else %}
            <div class="empty-state">
                <i class="fas fa-user-graduate"></i>
                <p>Aucun élève dans cette classe</p>
                <button class="btn btn-primary" onclick="toggleAddStudentForm()">
                    <i class="fas fa-plus"></i> Ajouter le premier élève
                </button>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Onglet Notes -->
    <div id="grades-tab" class="tab-content">
        <div class="grades-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-clipboard-check"></i> Gestion des notes
                </h2>
                <button class="btn btn-primary">
                    <i class="fas fa-plus"></i> Nouvelle évaluation
                </button>
            </div>

            <!-- Statistiques -->
            <div class="grades-stats">
                <div class="stat-box">
                    <div class="stat-value">{{ students|length }}</div>
                    <div class="stat-label">Élèves</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value">{{ recent_grades|length }}</div>
                    <div class="stat-label">Évaluations</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value">-</div>
                    <div class="stat-label">Moyenne classe</div>
                </div>
            </div>

            <!-- Tableau des notes récentes -->
            {% if recent_grades %}
            <div class="grades-table">
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Évaluation</th>
                            <th>Élève</th>
                            <th>Note</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for grade in recent_grades %}
                        <tr>
                            <td>{{ grade.date.strftime('%d/%m/%Y') }}</td>
                            <td>{{ grade.title }}</td>
                            <td>{{ grade.student.full_name }}</td>
                            <td>
                                <span class="grade-badge {% if grade.percentage >= 80 %}excellent{% elif grade.percentage >= 60 %}good{% elif grade.percentage >= 40 %}average{% else %}poor{% endif %}">
                                    {{ grade.grade }}/{{ grade.max_grade }}
                                </span>
                            </td>
                            <td>
                                <button class="btn-icon" title="Modifier">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="empty-state">
                <i class="fas fa-clipboard-check"></i>
                <p>Aucune note enregistrée</p>
                <button class="btn btn-primary">
                    <i class="fas fa-plus"></i> Créer une première évaluation
                </button>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Onglet Fichiers -->
    <div id="files-tab" class="tab-content">
        <div class="files-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-folder-open"></i> Fichiers de la classe
                </h2>
            </div>

            <!-- Zone d'upload -->
            <div class="upload-zone" onclick="alert('Fonctionnalité d\'upload à venir')">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Glissez vos fichiers ici ou cliquez pour parcourir</p>
                <p style="font-size: 0.875rem; color: var(--gray-color);">
                    PDF, Word, Images • Max 10 MB
                </p>
            </div>

            <!-- Grille de fichiers (exemple) -->
            <div class="empty-state">
                <i class="fas fa-folder-open"></i>
                <p>Aucun fichier pour cette classe</p>
                <p style="font-size: 0.875rem;">Les fichiers uploadés apparaîtront ici</p>
            </div>
        </div>
    </div>

    <!-- Onglet Chapitres -->
    <div id="chapters-tab" class="tab-content">
        <div class="chapters-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-book"></i> Chapitres en cours
                </h2>
                <button class="btn btn-primary">
                    <i class="fas fa-plus"></i> Nouveau chapitre
                </button>
            </div>

            {% if all_chapters %}
            <div class="chapters-grid">
                {% for chapter in all_chapters %}
                <div class="chapter-card {% if chapter.id in current_chapters|map(attribute='chapter_id')|list %}current{% endif %}">
                    <div class="chapter-number">{{ loop.index }}</div>
                    <h3 class="chapter-title">{{ chapter.name }}</h3>
                    {% if chapter.description %}
                    <p class="chapter-description">{{ chapter.description }}</p>
                    {% endif %}
                    <div class="chapter-actions">
                        {% if chapter.id in current_chapters|map(attribute='chapter_id')|list %}
                        <span class="current-badge">En cours</span>
                        {% else %}
                        <button class="btn btn-sm btn-outline">
                            Marquer comme en cours
                        </button>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>
            {% else %}
            <div class="empty-state">
                <i class="fas fa-book"></i>
                <p>Aucun chapitre créé</p>
                <button class="btn btn-primary">
                    <i class="fas fa-plus"></i> Créer le premier chapitre
                </button>
            </div>
            {% endif %}
        </div>
    </div>
</div>

<script>
// Variables globales
let editingStudentId = null;

// Gestion des onglets
function showTab(tabName) {
    // Masquer tous les contenus
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });

    // Désactiver tous les boutons
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
    });

    // Afficher le contenu sélectionné
    document.getElementById(tabName + '-tab').classList.add('active');

    // Activer le bouton correspondant
    event.target.closest('.tab-button').classList.add('active');
}

// Changer de classe
function changeClass(classroomId) {
    window.location.href = `{{ url_for('planning.manage_classes') }}?classroom=${classroomId}`;
}

// Afficher/masquer le formulaire d'ajout d'élève
function toggleAddStudentForm() {
    const form = document.getElementById('addStudentForm');
    form.style.display = form.style.display === 'none' ? 'block' : 'none';

    // Réinitialiser le formulaire si on le cache
    if (form.style.display === 'none') {
        resetStudentForm();
    }
}

// Réinitialiser le formulaire
function resetStudentForm() {
    document.getElementById('studentForm').reset();
    editingStudentId = null;
    document.querySelector('#addStudentForm h3').textContent = 'Nouvel élève';
    document.querySelector('#studentForm button[type="submit"]').innerHTML = '<i class="fas fa-save"></i> Enregistrer';
}

// Gestion du formulaire d'ajout/modification d'élève
document.getElementById('studentForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const submitButton = e.target.querySelector('button[type="submit"]');
    const originalText = submitButton.innerHTML;

    // Désactiver le bouton et afficher un loader
    submitButton.disabled = true;
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enregistrement...';

    const data = {
        classroom_id: {{ selected_classroom_id }},
        first_name: document.getElementById('studentFirstName').value,
        last_name: document.getElementById('studentLastName').value,
        email: document.getElementById('studentEmail').value
    };

    try {
        let url, method;

        if (editingStudentId) {
            // Mode modification
            data.student_id = editingStudentId;
            url = '{{ url_for("planning.update_student") }}';
            method = 'PUT';
        } else {
            // Mode ajout
            url = '{{ url_for("planning.add_student") }}';
            method = 'POST';
        }

        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);

            if (editingStudentId) {
                // En mode modification, mettre à jour la carte de l'élève
                updateStudentCard(result.student);
                toggleAddStudentForm();
            } else {
                // En mode ajout, ajouter la nouvelle carte
                addStudentCard(result.student);
                // Réinitialiser le formulaire mais le garder ouvert
                document.getElementById('studentForm').reset();
                document.getElementById('studentFirstName').focus();
            }
        } else {
            showNotification('error', result.message || 'Erreur lors de l\'enregistrement');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la communication avec le serveur');
    } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = originalText;
    }
});

// Ajouter une carte d'élève au DOM
function addStudentCard(student) {
    const studentsGrid = document.querySelector('.students-grid');

    // Si c'est le premier élève, remplacer l'état vide
    const emptyState = document.querySelector('.students-section .empty-state');
    if (emptyState) {
        emptyState.remove();
        // Créer la grille si elle n'existe pas
        if (!studentsGrid) {
            const newGrid = document.createElement('div');
            newGrid.className = 'students-grid';
            document.querySelector('.students-section').appendChild(newGrid);
        }
    }

    const studentCard = document.createElement('div');
    studentCard.className = 'student-card';
    studentCard.id = `student-${student.id}`;
    studentCard.style.animation = 'slideIn 0.3s ease';

    studentCard.innerHTML = `
        <div class="student-info">
            <div class="student-avatar">
                ${student.initials}
            </div>
            <div class="student-details">
                <h4>${student.full_name}</h4>
                ${student.email ? `<p>${student.email}</p>` : ''}
            </div>
        </div>
        <div class="student-actions">
            <button class="btn-icon" title="Modifier" onclick="editStudent(${student.id})">
                <i class="fas fa-edit"></i>
            </button>
            <button class="btn-icon danger" title="Supprimer" onclick="deleteStudent(${student.id}, '${student.full_name}')">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `;

    const grid = document.querySelector('.students-grid');
    if (grid) {
        grid.appendChild(studentCard);
    }
}

// Mettre à jour une carte d'élève existante
function updateStudentCard(student) {
    const card = document.getElementById(`student-${student.id}`);
    if (card) {
        const avatar = card.querySelector('.student-avatar');
        avatar.textContent = student.initials;

        const details = card.querySelector('.student-details');
        details.innerHTML = `
            <h4>${student.full_name}</h4>
            ${student.email ? `<p>${student.email}</p>` : ''}
        `;

        // Mettre à jour le bouton de suppression avec le nouveau nom
        const deleteBtn = card.querySelector('.btn-icon.danger');
        deleteBtn.setAttribute('onclick', `deleteStudent(${student.id}, '${student.full_name}')`);

        // Animation de mise à jour
        card.style.animation = 'pulse 0.5s ease';
    }
}

// Modifier un élève
async function editStudent(studentId) {
    try {
        const response = await fetch(`{{ url_for("planning.get_student", student_id=0) }}`.replace('0', studentId), {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const result = await response.json();

        if (result.success) {
            // Remplir le formulaire avec les données de l'élève
            document.getElementById('studentFirstName').value = result.student.first_name;
            document.getElementById('studentLastName').value = result.student.last_name;
            document.getElementById('studentEmail').value = result.student.email;

            // Mettre à jour le titre et le bouton
            document.querySelector('#addStudentForm h3').textContent = 'Modifier l\'élève';
            document.querySelector('#studentForm button[type="submit"]').innerHTML = '<i class="fas fa-save"></i> Modifier';

            // Stocker l'ID de l'élève en cours de modification
            editingStudentId = studentId;

            // Afficher le formulaire
            document.getElementById('addStudentForm').style.display = 'block';

            // Focus sur le premier champ
            document.getElementById('studentFirstName').focus();
        } else {
            showNotification('error', result.message || 'Erreur lors du chargement des données');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la communication avec le serveur');
    }
}

// Supprimer un élève
async function deleteStudent(studentId, studentName) {
    if (!confirm(`Êtes-vous sûr de vouloir supprimer ${studentName} ?\n\nCette action supprimera également toutes les notes de cet élève.`)) {
        return;
    }

    try {
        const response = await fetch(`{{ url_for("planning.delete_student", student_id=0) }}`.replace('0', studentId), {
            method: 'DELETE',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const result = await response.json();

        if (result.success) {
            showNotification('success', result.message);

            // Supprimer la carte de l'élève avec une animation
            const studentCard = document.getElementById(`student-${studentId}`);
            if (studentCard) {
                studentCard.style.transition = 'all 0.3s ease';
                studentCard.style.opacity = '0';
                studentCard.style.transform = 'scale(0.9)';

                setTimeout(() => {
                    studentCard.remove();

                    // Vérifier s'il reste des élèves
                    const remainingStudents = document.querySelectorAll('.student-card').length;
                    if (remainingStudents === 0) {
                        // Afficher l'état vide
                        const studentsSection = document.querySelector('.students-section');
                        const emptyState = document.createElement('div');
                        emptyState.className = 'empty-state';
                        emptyState.innerHTML = `
                            <i class="fas fa-user-graduate"></i>
                            <p>Aucun élève dans cette classe</p>
                            <button class="btn btn-primary" onclick="toggleAddStudentForm()">
                                <i class="fas fa-plus"></i> Ajouter le premier élève
                            </button>
                        `;
                        studentsSection.appendChild(emptyState);
                    }
                }, 300);
            }
        } else {
            showNotification('error', result.message || 'Erreur lors de la suppression');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showNotification('error', 'Erreur lors de la communication avec le serveur');
    }
}

// Fonction pour afficher les notifications
function showNotification(type, message) {
    // Créer le conteneur de notifications s'il n'existe pas
    let container = document.querySelector('.notifications-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'notifications-container';
        container.style.cssText = 'position: fixed; top: 80px; right: 20px; z-index: 1000;';
        document.body.appendChild(container);
    }

    // Créer la notification
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.style.cssText = `
        background-color: ${type === 'success' ? '#D1FAE5' : '#FEE2E2'};
        color: ${type === 'success' ? '#065F46' : '#991B1B'};
        padding: 1rem 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        animation: slideInNotification 0.3s ease;
        max-width: 400px;
    `;

    const icon = document.createElement('i');
    icon.className = `fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}`;

    const text = document.createElement('span');
    text.textContent = message;

    notification.appendChild(icon);
    notification.appendChild(text);
    container.appendChild(notification);

    // Supprimer la notification après 5 secondes
    setTimeout(() => {
        notification.style.animation = 'slideOutNotification 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// Ajouter les animations CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateY(-20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
        100% {
            transform: scale(1);
        }
    }

    @keyframes slideInNotification {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    @keyframes slideOutNotification {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// Focus sur le champ prénom au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    const firstNameField = document.getElementById('studentFirstName');
    if (firstNameField && document.getElementById('addStudentForm').style.display !== 'none') {
        firstNameField.focus();
    }
});
</script>
{% endblock %}



================================================================================
FICHIER: index.html
LOCALISATION: templates/file_manager/index.html
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/templates/file_manager/index.html
================================================================================

{% extends "base.html" %}

{% block title %}Gestionnaire de fichiers - TeacherPlanner{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/file_manager.css') }}">
{% endblock %}

{% block content %}
<div class="file-manager-container">
    <!-- En-tête -->
    <div class="file-manager-header">
        <div class="header-top">
            <h1><i class="fas fa-folder-open"></i> Gestionnaire de fichiers</h1>
            <div class="header-actions">
                <button class="btn btn-primary" onclick="showNewFolderModal()">
                    <i class="fas fa-folder-plus"></i> Nouveau dossier
                </button>
                <button class="btn btn-success" onclick="document.getElementById('fileInput').click()">
                    <i class="fas fa-upload"></i> Uploader
                </button>
                <input type="file" id="fileInput" multiple accept=".pdf,.png,.jpg,.jpeg" style="display: none;" onchange="handleFileSelect(event)">
            </div>
        </div>
        
        <!-- Fil d'ariane -->
        <div class="breadcrumb">
            <a href="{{ url_for('file_manager.index') }}" class="breadcrumb-item">
                <i class="fas fa-home"></i> Racine
            </a>
            {% for folder in breadcrumb %}
            <span class="breadcrumb-separator">/</span>
            <a href="{{ url_for('file_manager.index', folder=folder.id) }}" class="breadcrumb-item">
                {{ folder.name }}
            </a>
            {% endfor %}
        </div>
        
        <!-- Informations d'utilisation -->
        <div class="storage-info">
            <div class="storage-bar">
                <div class="storage-used" style="width: {{ (total_size / (1024*1024*1024) * 100 / 5) }}%"></div>
            </div>
            <span class="storage-text">
                {{ "%.1f"|format(total_size / (1024*1024)) }} MB utilisés
            </span>
        </div>
    </div>

    <!-- Zone principale -->
    <div class="file-explorer" id="fileExplorer">
        <!-- Zone de drop -->
        <div class="drop-zone" id="dropZone">
            <i class="fas fa-cloud-upload-alt"></i>
            <p>Glissez vos fichiers ici</p>
        </div>

        <!-- Grille des éléments -->
        <div class="file-grid" id="fileGrid">
            <!-- Dossiers -->
            {% for folder in folders %}
            <div class="file-item folder" data-id="{{ folder.id }}" data-type="folder">
                <div class="item-icon" style="color: {{ folder.color }}">
                    <i class="fas fa-folder"></i>
                </div>
                <div class="item-name" title="{{ folder.name }}">{{ folder.name }}</div>
                <div class="item-info">
                    {{ folder.get_file_count() }} fichier(s)
                </div>
                <div class="item-actions">
                    <button class="action-btn" onclick="openFolder({{ folder.id }})" title="Ouvrir">
                        <i class="fas fa-folder-open"></i>
                    </button>
                    <button class="action-btn" onclick="showColorPicker({{ folder.id }})" title="Couleur">
                        <i class="fas fa-palette"></i>
                    </button>
                    <button class="action-btn" onclick="renameItem('folder', {{ folder.id }}, '{{ folder.name }}')" title="Renommer">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="action-btn danger" onclick="deleteFolder({{ folder.id }})" title="Supprimer">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            {% endfor %}

            <!-- Fichiers -->
            {% for file in files %}
            <div class="file-item file" data-id="{{ file.id }}" data-type="file">
                <div class="item-icon">
                    {% if file.file_type == 'pdf' %}
                        <i class="fas fa-file-pdf" style="color: #DC2626;"></i>
                    {% elif file.file_type in ['png', 'jpg', 'jpeg'] %}
                        {% if file.thumbnail_path %}
                            <img src="{{ url_for('file_manager.preview_file', file_id=file.id, thumbnail=1) }}" 
                                 alt="{{ file.original_filename }}" class="thumbnail">
                        {% else %}
                            <i class="fas fa-file-image" style="color: #059669;"></i>
                        {% endif %}
                    {% else %}
                        <i class="fas fa-file" style="color: #6B7280;"></i>
                    {% endif %}
                </div>
                <div class="item-name" title="{{ file.original_filename }}">
                    {{ file.original_filename }}
                </div>
                <div class="item-info">{{ file.format_size() }}</div>
                <div class="item-actions">
                    <button class="action-btn" onclick="previewFile({{ file.id }}, '{{ file.file_type }}')" title="Aperçu">
                        <i class="fas fa-eye"></i>
                    </button>
                    <a href="{{ url_for('file_manager.download_file', file_id=file.id) }}" 
                       class="action-btn" title="Télécharger">
                        <i class="fas fa-download"></i>
                    </a>
                    <button class="action-btn" onclick="renameItem('file', {{ file.id }}, '{{ file.original_filename }}')" title="Renommer">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="action-btn danger" onclick="deleteFile({{ file.id }})" title="Supprimer">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            {% endfor %}
        </div>

        <!-- État vide -->
        {% if not folders and not files %}
        <div class="empty-state">
            <i class="fas fa-folder-open"></i>
            <p>Ce dossier est vide</p>
            <p class="text-muted">Créez un dossier ou uploadez des fichiers pour commencer</p>
        </div>
        {% endif %}
    </div>
</div>

<!-- Modal nouveau dossier -->
<div class="modal" id="newFolderModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3><i class="fas fa-folder-plus"></i> Nouveau dossier</h3>
            <button class="modal-close" onclick="closeModal('newFolderModal')">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="newFolderForm" onsubmit="createFolder(event)">
                <div class="form-group">
                    <label class="form-label">Nom du dossier</label>
                    <input type="text" id="folderName" class="form-control" required 
                           placeholder="Ex: Cours de mathématiques">
                </div>
                <div class="form-group">
                    <label class="form-label">Couleur</label>
                    <div class="color-picker-grid">
                        <input type="radio" name="folderColor" value="#4F46E5" id="color1" checked>
                        <label for="color1" style="background-color: #4F46E5;"></label>
                        
                        <input type="radio" name="folderColor" value="#7C3AED" id="color2">
                        <label for="color2" style="background-color: #7C3AED;"></label>
                        
                        <input type="radio" name="folderColor" value="#EC4899" id="color3">
                        <label for="color3" style="background-color: #EC4899;"></label>
                        
                        <input type="radio" name="folderColor" value="#F59E0B" id="color4">
                        <label for="color4" style="background-color: #F59E0B;"></label>
                        
                        <input type="radio" name="folderColor" value="#10B981" id="color5">
                        <label for="color5" style="background-color: #10B981;"></label>
                        
                        <input type="radio" name="folderColor" value="#3B82F6" id="color6">
                        <label for="color6" style="background-color: #3B82F6;"></label>
                        
                        <input type="radio" name="folderColor" value="#6B7280" id="color7">
                        <label for="color7" style="background-color: #6B7280;"></label>
                        
                        <input type="radio" name="folderColor" value="#EF4444" id="color8">
                        <label for="color8" style="background-color: #EF4444;"></label>
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline" onclick="closeModal('newFolderModal')">
                Annuler
            </button>
            <button type="submit" form="newFolderForm" class="btn btn-primary">
                <i class="fas fa-check"></i> Créer
            </button>
        </div>
    </div>
</div>

<!-- Modal d'aperçu -->
<div class="modal" id="previewModal">
    <div class="modal-content modal-large">
        <div class="modal-header">
            <h3 id="previewTitle">Aperçu</h3>
            <button class="modal-close" onclick="closeModal('previewModal')">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div id="previewContent" class="preview-content"></div>
        </div>
    </div>
</div>

<!-- Modal de renommage -->
<div class="modal" id="renameModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3><i class="fas fa-edit"></i> Renommer</h3>
            <button class="modal-close" onclick="closeModal('renameModal')">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="renameForm" onsubmit="saveRename(event)">
                <input type="hidden" id="renameType">
                <input type="hidden" id="renameId">
                <div class="form-group">
                    <label class="form-label">Nouveau nom</label>
                    <input type="text" id="renameName" class="form-control" required>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-outline" onclick="closeModal('renameModal')">
                Annuler
            </button>
            <button type="submit" form="renameForm" class="btn btn-primary">
                <i class="fas fa-check"></i> Renommer
            </button>
        </div>
    </div>
</div>

<!-- Indicateur de progression -->
<div class="upload-progress" id="uploadProgress">
    <div class="progress-header">
        <span>Upload en cours...</span>
        <span id="progressPercent">0%</span>
    </div>
    <div class="progress-bar">
        <div class="progress-fill" id="progressFill"></div>
    </div>
    <div class="progress-info" id="progressInfo"></div>
</div>

{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/file_manager.js') }}"></script>
<script>
const currentFolderId = {{ current_folder.id if current_folder else 'null' }};
</script>
{% endblock %}



================================================================================
FICHIER: __init__.py
LOCALISATION: routes/__init__.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/routes/__init__.py
================================================================================

# Ce fichier rend le dossier routes un package Python



================================================================================
FICHIER: auth.py
LOCALISATION: routes/auth.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/routes/auth.py
================================================================================

from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, login_required, current_user
from urllib.parse import urlparse
from extensions import db
from models.user import User
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, EqualTo, Length, ValidationError

auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

auth_bp = Blueprint('auth', __name__, url_prefix='/auth')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Mot de passe', validators=[DataRequired()])
    submit = SubmitField('Se connecter')

class RegisterForm(FlaskForm):
    username = StringField('Nom d\'utilisateur', validators=[
        DataRequired(),
        Length(min=3, max=80, message="Le nom d'utilisateur doit contenir entre 3 et 80 caractères")
    ])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Mot de passe', validators=[
        DataRequired(),
        Length(min=6, message="Le mot de passe doit contenir au moins 6 caractères")
    ])
    password_confirm = PasswordField('Confirmer le mot de passe', validators=[
        DataRequired(),
        EqualTo('password', message='Les mots de passe doivent correspondre')
    ])
    submit = SubmitField('S\'inscrire')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('Ce nom d\'utilisateur est déjà pris.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('Cette adresse email est déjà enregistrée.')

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('planning.dashboard'))

    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user, remember=True)
            next_page = request.args.get('next')
            if not next_page or urlparse(next_page).netloc != '':
                # Déterminer où rediriger en fonction de l'état de configuration
                if not user.school_year_start or not user.day_start_time:
                    next_page = url_for('setup.initial_setup')
                elif user.classrooms.count() == 0:
                    next_page = url_for('setup.manage_classrooms')
                elif not user.setup_completed:
                    next_page = url_for('setup.manage_holidays')
                elif not user.schedule_completed:
                    next_page = url_for('schedule.weekly_schedule')
                else:
                    next_page = url_for('planning.dashboard')
            return redirect(next_page)
        else:
            flash('Email ou mot de passe incorrect.', 'error')

    return render_template('auth/login.html', form=form)

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('planning.dashboard'))

    form = RegisterForm()
    if form.validate_on_submit():
        user = User(
            username=form.username.data,
            email=form.email.data
        )
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()

        login_user(user, remember=True)
        flash('Inscription réussie ! Bienvenue sur TeacherPlanner.', 'success')
        return redirect(url_for('setup.initial_setup'))
    else:
        # Afficher les erreurs de validation pour déboguer
        if form.errors:
            for field, errors in form.errors.items():
                for error in errors:
                    flash(f'{field}: {error}', 'error')

    return render_template('auth/register.html', form=form)

@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Vous avez été déconnecté avec succès.', 'info')
    return redirect(url_for('auth.login'))



================================================================================
FICHIER: file_manager.py
LOCALISATION: routes/file_manager.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/routes/file_manager.py
================================================================================

from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, send_file, current_app
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename
from extensions import db
import os
import uuid
from datetime import datetime
from PIL import Image
from models.file_manager import FileFolder, UserFile
import io

# Importer les modèles après leur création
# from models.file_manager import FileFolder, UserFile

file_manager_bp = Blueprint('file_manager', __name__, url_prefix='/files')

# Configuration
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg'}
MAX_FILE_SIZE = 80 * 1024 * 1024  # 80 MB
THUMBNAIL_SIZE = (200, 200)

def allowed_file(filename):
    """Vérifie si le fichier est autorisé"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def create_thumbnail(image_path, thumbnail_path):
    """Crée une miniature pour une image"""
    try:
        with Image.open(image_path) as img:
            # Convertir en RGB si nécessaire
            if img.mode in ('RGBA', 'LA'):
                background = Image.new('RGB', img.size, (255, 255, 255))
                background.paste(img, mask=img.split()[-1])
                img = background

            # Créer la miniature
            img.thumbnail(THUMBNAIL_SIZE, Image.Resampling.LANCZOS)

            # Créer le dossier si nécessaire
            os.makedirs(os.path.dirname(thumbnail_path), exist_ok=True)

            # Sauvegarder
            img.save(thumbnail_path, 'JPEG', quality=85)
            return True
    except Exception as e:
        print(f"Erreur lors de la création de la miniature : {e}")
        return False

@file_manager_bp.route('/')
@login_required
def index():
    """Page principale de gestion des fichiers"""
    from models.file_manager import FileFolder, UserFile

    # Récupérer le dossier actuel
    folder_id = request.args.get('folder', type=int)
    current_folder = None

    if folder_id:
        current_folder = FileFolder.query.filter_by(
            id=folder_id,
            user_id=current_user.id
        ).first_or_404()

    # Récupérer les dossiers et fichiers
    folders = FileFolder.query.filter_by(
        user_id=current_user.id,
        parent_id=folder_id
    ).order_by(FileFolder.name).all()

    files = UserFile.query.filter_by(
        user_id=current_user.id,
        folder_id=folder_id
    ).order_by(UserFile.original_filename).all()

    # Construire le fil d'ariane
    breadcrumb = []
    if current_folder:
        folder = current_folder
        while folder:
            breadcrumb.insert(0, folder)
            folder = folder.parent

    # Calculer l'espace utilisé
    total_size = sum(f.file_size or 0 for f in current_user.files.all())

    return render_template('file_manager/index.html',
                         folders=folders,
                         files=files,
                         current_folder=current_folder,
                         breadcrumb=breadcrumb,
                         total_size=total_size)

@file_manager_bp.route('/create-folder', methods=['POST'])
@login_required
def create_folder():
    """Créer un nouveau dossier"""
    from models.file_manager import FileFolder

    data = request.get_json()

    if not data or not data.get('name'):
        return jsonify({'success': False, 'message': 'Nom du dossier requis'}), 400

    try:
        folder = FileFolder(
            user_id=current_user.id,
            parent_id=data.get('parent_id'),
            name=data.get('name'),
            color=data.get('color', '#4F46E5')
        )

        db.session.add(folder)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Dossier créé avec succès',
            'folder': {
                'id': folder.id,
                'name': folder.name,
                'color': folder.color,
                'file_count': 0,
                'size': 0
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@file_manager_bp.route('/upload', methods=['POST'])
@login_required
def upload_file():
    """Upload d'un fichier"""
    from models.file_manager import UserFile

    if 'file' not in request.files:
        return jsonify({'success': False, 'message': 'Aucun fichier fourni'}), 400

    file = request.files['file']
    folder_id = request.form.get('folder_id', type=int)

    if file.filename == '':
        return jsonify({'success': False, 'message': 'Aucun fichier sélectionné'}), 400

    if not allowed_file(file.filename):
        return jsonify({'success': False, 'message': 'Type de fichier non autorisé'}), 400

    # Vérifier la taille
    file.seek(0, os.SEEK_END)
    file_size = file.tell()
    file.seek(0)

    if file_size > MAX_FILE_SIZE:
        return jsonify({'success': False, 'message': f'Fichier trop volumineux. Maximum: {MAX_FILE_SIZE // (1024*1024)}MB'}), 400

    try:
        # Générer un nom unique
        original_filename = secure_filename(file.filename)
        file_ext = original_filename.rsplit('.', 1)[1].lower()
        unique_filename = f"{uuid.uuid4()}.{file_ext}"

        # Créer les dossiers
        user_folder = os.path.join(current_app.root_path, UPLOAD_FOLDER, 'files', str(current_user.id))
        os.makedirs(user_folder, exist_ok=True)

        # Sauvegarder le fichier
        file_path = os.path.join(user_folder, unique_filename)
        file.save(file_path)

        # Créer l'entrée en base de données
        user_file = UserFile(
            user_id=current_user.id,
            folder_id=folder_id,
            filename=unique_filename,
            original_filename=original_filename,
            file_type=file_ext,
            file_size=file_size,
            mime_type=file.content_type
        )

        # Créer une miniature pour les images
        if file_ext in ['png', 'jpg', 'jpeg']:
            thumbnail_filename = f"thumb_{unique_filename}"
            thumbnail_folder = os.path.join(current_app.root_path, UPLOAD_FOLDER, 'thumbnails', str(current_user.id))
            thumbnail_path = os.path.join(thumbnail_folder, thumbnail_filename)

            if create_thumbnail(file_path, thumbnail_path):
                user_file.thumbnail_path = thumbnail_filename

        db.session.add(user_file)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Fichier uploadé avec succès',
            'file': {
                'id': user_file.id,
                'name': user_file.original_filename,
                'type': user_file.file_type,
                'size': user_file.format_size(),
                'thumbnail': user_file.thumbnail_path is not None
            }
        })

    except Exception as e:
        db.session.rollback()
        # Nettoyer le fichier en cas d'erreur
        if 'file_path' in locals() and os.path.exists(file_path):
            os.remove(file_path)
        return jsonify({'success': False, 'message': str(e)}), 500

@file_manager_bp.route('/download/<int:file_id>')
@login_required
def download_file(file_id):
    """Télécharger un fichier"""
    from models.file_manager import UserFile

    file = UserFile.query.filter_by(
        id=file_id,
        user_id=current_user.id
    ).first_or_404()

    file_path = os.path.join(current_app.root_path, file.get_file_path())

    if not os.path.exists(file_path):
        flash('Fichier introuvable', 'error')
        return redirect(url_for('file_manager.index'))

    return send_file(file_path,
                     download_name=file.original_filename,
                     as_attachment=True)

@file_manager_bp.route('/preview/<int:file_id>')
@login_required
def preview_file(file_id):
    """Aperçu d'un fichier"""
    from models.file_manager import UserFile

    file = UserFile.query.filter_by(
        id=file_id,
        user_id=current_user.id
    ).first_or_404()

    file_path = os.path.join(current_app.root_path, file.get_file_path())

    if not os.path.exists(file_path):
        flash('Fichier introuvable', 'error')
        return redirect(url_for('file_manager.index'))

    # Pour les images, utiliser la miniature si disponible
    if file.thumbnail_path and request.args.get('thumbnail'):
        thumbnail_path = os.path.join(current_app.root_path, file.get_thumbnail_path())
        if os.path.exists(thumbnail_path):
            return send_file(thumbnail_path, mimetype='image/jpeg')

    return send_file(file_path, mimetype=file.mime_type)

@file_manager_bp.route('/delete-file/<int:file_id>', methods=['DELETE'])
@login_required
def delete_file(file_id):
    """Supprimer un fichier"""
    from models.file_manager import UserFile

    file = UserFile.query.filter_by(
        id=file_id,
        user_id=current_user.id
    ).first_or_404()

    try:
        # Supprimer le fichier physique
        file_path = os.path.join(current_app.root_path, file.get_file_path())
        if os.path.exists(file_path):
            os.remove(file_path)

        # Supprimer la miniature si elle existe
        if file.thumbnail_path:
            thumbnail_path = os.path.join(current_app.root_path, file.get_thumbnail_path())
            if os.path.exists(thumbnail_path):
                os.remove(thumbnail_path)

        # Supprimer de la base de données
        db.session.delete(file)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Fichier supprimé avec succès'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@file_manager_bp.route('/delete-folder/<int:folder_id>', methods=['DELETE'])
@login_required
def delete_folder(folder_id):
    """Supprimer un dossier et son contenu"""
    from models.file_manager import FileFolder

    folder = FileFolder.query.filter_by(
        id=folder_id,
        user_id=current_user.id
    ).first_or_404()

    try:
        # Fonction récursive pour supprimer les fichiers
        def delete_folder_files(folder):
            # Supprimer les fichiers du dossier
            for file in folder.files:
                file_path = os.path.join(current_app.root_path, file.get_file_path())
                if os.path.exists(file_path):
                    os.remove(file_path)

                if file.thumbnail_path:
                    thumbnail_path = os.path.join(current_app.root_path, file.get_thumbnail_path())
                    if os.path.exists(thumbnail_path):
                        os.remove(thumbnail_path)

            # Supprimer les fichiers des sous-dossiers
            for subfolder in folder.subfolders:
                delete_folder_files(subfolder)

        # Supprimer tous les fichiers
        delete_folder_files(folder)

        # Supprimer le dossier de la base de données (cascade supprimera les sous-dossiers et fichiers)
        db.session.delete(folder)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Dossier supprimé avec succès'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@file_manager_bp.route('/rename', methods=['PUT'])
@login_required
def rename_item():
    """Renommer un fichier ou dossier"""
    from models.file_manager import FileFolder, UserFile

    data = request.get_json()
    item_type = data.get('type')
    item_id = data.get('id')
    new_name = data.get('name')

    if not all([item_type, item_id, new_name]):
        return jsonify({'success': False, 'message': 'Données manquantes'}), 400

    try:
        if item_type == 'folder':
            item = FileFolder.query.filter_by(
                id=item_id,
                user_id=current_user.id
            ).first_or_404()
        else:
            item = UserFile.query.filter_by(
                id=item_id,
                user_id=current_user.id
            ).first_or_404()
            item.original_filename = new_name

        if item_type == 'folder':
            item.name = new_name

        item.updated_at = datetime.utcnow()
        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Élément renommé avec succès'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@file_manager_bp.route('/update-folder-color', methods=['PUT'])
@login_required
def update_folder_color():
    """Mettre à jour la couleur d'un dossier"""
    from models.file_manager import FileFolder

    data = request.get_json()
    folder_id = data.get('id')
    new_color = data.get('color')

    if not folder_id or not new_color:
        return jsonify({'success': False, 'message': 'Données manquantes'}), 400

    try:
        folder = FileFolder.query.filter_by(
            id=folder_id,
            user_id=current_user.id
        ).first_or_404()

        folder.color = new_color
        folder.updated_at = datetime.utcnow()
        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Couleur mise à jour'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500



================================================================================
FICHIER: planning.py
LOCALISATION: routes/planning.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/routes/planning.py
================================================================================

from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify
from flask_login import login_required, current_user
from extensions import db
from models.planning import Planning
from models.classroom import Classroom
from models.schedule import Schedule
from datetime import datetime, timedelta
from datetime import date as date_type
import calendar

planning_bp = Blueprint('planning', __name__, url_prefix='/planning')

def get_week_dates(week_date):
    """Retourne les dates du lundi au vendredi de la semaine contenant la date donnée"""
    # Trouver le lundi de la semaine
    days_since_monday = week_date.weekday()
    monday = week_date - timedelta(days=days_since_monday)

    # Générer les 5 jours de la semaine
    week_dates = []
    for i in range(5):  # Lundi à Vendredi
        week_dates.append(monday + timedelta(days=i))

    return week_dates

def is_holiday(date_to_check, user):
    """Vérifie si une date est pendant les vacances et retourne le nom si c'est le cas"""
    for holiday in user.holidays.all():
        if holiday.start_date <= date_to_check <= holiday.end_date:
            return holiday.name
    return None

def is_school_year(date, user):
    """Vérifie si une date est dans l'année scolaire"""
    return user.school_year_start <= date <= user.school_year_end

def get_current_or_next_lesson(user):
    """Trouve le cours actuel ou le prochain cours"""
    now = datetime.now()
    current_time = now.time()
    current_date = now.date()
    weekday = current_date.weekday()

    # Récupérer les périodes du jour
    periods = calculate_periods(user)

    # Vérifier si on est actuellement en cours
    for period in periods:
        if period['start'] <= current_time <= period['end']:
            schedule = Schedule.query.filter_by(
                user_id=user.id,
                weekday=weekday,
                period_number=period['number']
            ).first()

            if schedule:
                return schedule, True, current_date  # schedule, is_current, date

    # Si pas de cours actuel, chercher le prochain aujourd'hui
    for period in periods:
        if period['start'] > current_time:
            schedule = Schedule.query.filter_by(
                user_id=user.id,
                weekday=weekday,
                period_number=period['number']
            ).first()

            if schedule:
                schedule.start_time = period['start']
                return schedule, False, current_date  # schedule, is_current, date

    # Si pas de cours aujourd'hui, chercher les jours suivants
    for days_ahead in range(1, 8):  # Chercher sur une semaine
        future_date = current_date + timedelta(days=days_ahead)
        future_weekday = future_date.weekday()

        # Ignorer les weekends
        if future_weekday >= 5:
            continue

        # Vérifier si c'est un jour de vacances
        if is_holiday(future_date, user):
            continue

        # Chercher le premier cours de la journée
        first_schedule = Schedule.query.filter_by(
            user_id=user.id,
            weekday=future_weekday
        ).order_by(Schedule.period_number).first()

        if first_schedule:
            # Obtenir l'heure de début de la première période
            future_periods = calculate_periods(user)
            if future_periods:
                first_schedule.start_time = future_periods[0]['start']
            return first_schedule, False, future_date  # schedule, is_current, date

    return None, False, None

@planning_bp.route('/')
@login_required
def dashboard():
    # Vérifier que la configuration de base est complète
    if not current_user.setup_completed:
        if not current_user.school_year_start:
            flash('Veuillez d\'abord compléter la configuration initiale.', 'warning')
            return redirect(url_for('setup.initial_setup'))
        elif current_user.classrooms.count() == 0:
            flash('Veuillez d\'abord ajouter au moins une classe.', 'warning')
            return redirect(url_for('setup.manage_classrooms'))
        else:
            flash('Veuillez terminer la configuration de base.', 'warning')
            return redirect(url_for('setup.manage_holidays'))

    # Vérifier que l'horaire type est complété
    if not current_user.schedule_completed:
        flash('Veuillez d\'abord créer votre horaire type.', 'warning')
        return redirect(url_for('schedule.weekly_schedule'))

    # Statistiques pour le tableau de bord
    classrooms_count = current_user.classrooms.count()
    schedules_count = current_user.schedules.count()

    # Obtenir la semaine actuelle
    today = date_type.today()
    week_dates = get_week_dates(today)

    # Plannings de la semaine
    week_plannings = Planning.query.filter(
        Planning.user_id == current_user.id,
        Planning.date >= week_dates[0],
        Planning.date <= week_dates[4]
    ).all()

    # Chercher le cours actuel ou le prochain
    lesson, is_current_lesson, lesson_date = get_current_or_next_lesson(current_user)

    return render_template('planning/dashboard.html',
                         classrooms_count=classrooms_count,
                         schedules_count=schedules_count,
                         week_plannings_count=len(week_plannings),
                         today=today,
                         current_lesson=lesson if is_current_lesson else None,
                         next_lesson=lesson if not is_current_lesson else None,
                         lesson_date=lesson_date)

@planning_bp.route('/calendar')
@login_required
def calendar_view():
    # Vérifier la configuration
    if not current_user.setup_completed:
        flash('Veuillez d\'abord compléter la configuration initiale.', 'warning')
        return redirect(url_for('setup.initial_setup'))

    if not current_user.schedule_completed:
        flash('Veuillez d\'abord créer votre horaire type.', 'warning')
        return redirect(url_for('schedule.weekly_schedule'))

    # Obtenir la semaine à afficher
    week_str = request.args.get('week')
    if week_str:
        try:
            current_week = datetime.strptime(week_str, '%Y-%m-%d').date()
        except ValueError:
            current_week = date_type.today()
    else:
        current_week = date_type.today()

    # Obtenir les dates de la semaine
    week_dates = get_week_dates(current_week)

    # Récupérer toutes les données nécessaires
    classrooms = current_user.classrooms.all()

    # Convertir les classrooms en dictionnaires pour JSON
    classrooms_dict = [{
        'id': c.id,
        'name': c.name,
        'subject': c.subject,
        'color': c.color
    } for c in classrooms]

    periods = calculate_periods(current_user)
    schedules = current_user.schedules.all()

    # Convertir les périodes pour JSON (convertir les objets time en chaînes)
    periods_json = []
    for period in periods:
        periods_json.append({
            'number': period['number'],
            'start': period['start'].strftime('%H:%M'),
            'end': period['end'].strftime('%H:%M')
        })

    # Organiser les horaires par jour et période
    schedule_grid = {}
    for schedule in schedules:
        key = f"{schedule.weekday}_{schedule.period_number}"
        schedule_grid[key] = schedule

    # Récupérer les plannings de la semaine
    week_plannings = Planning.query.filter(
        Planning.user_id == current_user.id,
        Planning.date >= week_dates[0],
        Planning.date <= week_dates[4]
    ).all()
    # Ajouter cette section dans la fonction calendar_view après la récupération des plannings
# (vers la ligne 160 du fichier routes/planning.py)

    # Récupérer les plannings de la semaine
    week_plannings = Planning.query.filter(
        Planning.user_id == current_user.id,
        Planning.date >= week_dates[0],
        Planning.date <= week_dates[4]
    ).all()

    # Organiser les plannings par date et période avec les infos de checklist
    planning_grid = {}
    for planning in week_plannings:
        key = f"{planning.date}_{planning.period_number}"
        planning_grid[key] = planning

        # Ajouter les informations de checklist pour chaque planning
        # Cette information sera accessible dans le template
        planning.checklist_summary = planning.get_checklist_summary()
        planning.checklist_items = planning.get_checklist_items_with_states()

# Dans la fonction generate_annual_calendar, modifier la partie qui organise les plannings
# (vers la ligne 245)

    # Organiser les plannings par date avec infos de checklist
    plannings_by_date = {}
    for planning in week_plannings:
        date_str = planning.date.strftime('%Y-%m-%d')
        if date_str not in plannings_by_date:
            plannings_by_date[date_str] = []

        # Obtenir le résumé des checkboxes
        checklist_summary = planning.get_checklist_summary()

        planning_data = {
            'title': planning.title or f'P{planning.period_number}',
            'period': planning.period_number,
            'checklist_summary': checklist_summary
        }

        plannings_by_date[date_str].append(planning_data)

    # Organiser les plannings par date et période
    planning_grid = {}
    for planning in week_plannings:
        key = f"{planning.date}_{planning.period_number}"
        planning_grid[key] = planning

    # Vérifier si les dates sont en vacances et récupérer les noms
    holidays_info = {}
    for date in week_dates:
        date_str = date.strftime('%Y-%m-%d')
        holiday_name = is_holiday(date, current_user)
        holidays_info[date_str] = {
            'is_holiday': holiday_name is not None,
            'name': holiday_name
        }

    # Générer les données annuelles pour chaque classe
    annual_data = {}
    for classroom in classrooms:
        annual_data[classroom.id] = generate_annual_calendar(classroom)

    # Sélectionner la première classe par défaut
    selected_classroom_id = request.args.get('classroom', classrooms[0].id if classrooms else None)

    return render_template('planning/calendar_view.html',
                         week_dates=week_dates,
                         current_week=current_week,
                         classrooms=classrooms,
                         classrooms_json=classrooms_dict,
                         periods=periods,
                         periods_json=periods_json,
                         schedule_grid=schedule_grid,
                         planning_grid=planning_grid,
                         annual_data=annual_data,
                         holidays_info=holidays_info,
                         selected_classroom_id=int(selected_classroom_id) if selected_classroom_id else None,
                         days=['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'],
                         today=date_type.today())

def calculate_periods(user):
    """Calcule les périodes en fonction de la configuration de l'utilisateur"""
    from routes.schedule import calculate_periods as calc_periods
    return calc_periods(user)

def generate_annual_calendar(classroom):
    """Génère les données du calendrier annuel pour une classe"""
    # Calculer toutes les semaines de l'année scolaire
    start_date = current_user.school_year_start
    end_date = current_user.school_year_end

    # Récupérer toutes les vacances
    holidays = current_user.holidays.all()

    # Récupérer tous les plannings pour cette classe
    all_plannings = Planning.query.filter_by(
        user_id=current_user.id,
        classroom_id=classroom.id
    ).all()

    # Organiser les plannings par date
    plannings_by_date = {}
    for planning in all_plannings:
        date_str = planning.date.strftime('%Y-%m-%d')
        if date_str not in plannings_by_date:
            plannings_by_date[date_str] = []
        plannings_by_date[date_str].append({
            'title': planning.title or f'P{planning.period_number}',
            'period': planning.period_number
        })

    weeks = []
    current_date = start_date
    # Aller au lundi de la première semaine
    current_date -= timedelta(days=current_date.weekday())

    week_number = 0  # Compteur de semaines scolaires (hors vacances)

    while current_date <= end_date:
        week_dates = get_week_dates(current_date)

        # Vérifier si cette semaine est pendant les vacances
        week_holiday = None

        # Pour chaque période de vacances
        for holiday in holidays:
            # Compter combien de jours ouvrables (lundi-vendredi) sont en vacances
            days_in_holiday = 0
            for i in range(5):  # Seulement lundi à vendredi
                date_to_check = week_dates[i]
                if holiday.start_date <= date_to_check <= holiday.end_date:
                    days_in_holiday += 1

            # Si au moins 3 jours ouvrables sont en vacances, c'est une semaine de vacances
            if days_in_holiday >= 3:
                week_holiday = holiday.name
                break

        # Incrémenter le compteur seulement si ce n'est pas une semaine de vacances
        if not week_holiday and current_date >= start_date:
            week_number += 1

        week_info = {
            'start_date': week_dates[0],
            'dates': week_dates,
            'has_class': [False] * 5,  # Par défaut, pas de cours
            'plannings': {},  # Plannings de la semaine
            'holidays_by_day': [None] * 5,  # Nom des vacances par jour
            'is_holiday': week_holiday is not None,
            'holiday_name': week_holiday,
            'holiday_name_short': week_holiday.replace("Vacances d'", "Vac.").replace("Vacances de ", "Vac. ").replace("Relâches de ", "Relâches ") if week_holiday else None,
            'week_number': week_number if not week_holiday else None,
            'formatted_date': week_dates[0].strftime('%d/%m')  # Date du lundi
        }

        # Vérifier pour chaque jour si la classe a cours et s'il y a des vacances
        for i in range(5):  # 0 à 4 pour lundi à vendredi
            date_to_check = week_dates[i]
            date_str = date_to_check.strftime('%Y-%m-%d')

            # Vérifier si c'est un jour de vacances
            holiday_name = is_holiday(date_to_check, current_user)
            if holiday_name:
                week_info['holidays_by_day'][i] = holiday_name

            if not is_school_year(date_to_check, current_user) or holiday_name:
                continue

            # Vérifier dans l'horaire type si cette classe a cours ce jour
            weekday = i
            has_schedule = Schedule.query.filter_by(
                user_id=current_user.id,
                classroom_id=classroom.id,
                weekday=weekday
            ).first() is not None

            week_info['has_class'][i] = has_schedule

            # Ajouter les plannings pour ce jour
            if date_str in plannings_by_date:
                week_info['plannings'][date_str] = plannings_by_date[date_str]

        weeks.append(week_info)
        current_date += timedelta(days=7)

    return weeks
@planning_bp.route('/save_planning', methods=['POST'])
@login_required
def save_planning():
    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'Aucune donnée reçue'}), 400

    try:
        date_str = data.get('date')
        period_number = data.get('period_number')
        classroom_id = data.get('classroom_id')
        title = data.get('title', '')
        description = data.get('description', '')
        checklist_states = data.get('checklist_states', {})  # Récupérer les états des checkboxes

        # Convertir la date
        planning_date = datetime.strptime(date_str, '%Y-%m-%d').date()

        # Vérifier la classe
        if classroom_id:
            classroom = Classroom.query.filter_by(id=classroom_id, user_id=current_user.id).first()
            if not classroom:
                return jsonify({'success': False, 'message': 'Classe non trouvée'}), 404

        # Chercher un planning existant
        existing = Planning.query.filter_by(
            user_id=current_user.id,
            date=planning_date,
            period_number=period_number
        ).first()

        if classroom_id and (title or description):
            if existing:
                # Mettre à jour
                existing.classroom_id = classroom_id
                existing.title = title
                existing.description = description
                existing.set_checklist_states(checklist_states)  # Sauvegarder les états des checkboxes
            else:
                # Créer nouveau
                planning = Planning(
                    user_id=current_user.id,
                    classroom_id=classroom_id,
                    date=planning_date,
                    period_number=period_number,
                    title=title,
                    description=description
                )
                planning.set_checklist_states(checklist_states)  # Sauvegarder les états des checkboxes
                db.session.add(planning)
        else:
            # Supprimer si vide
            if existing:
                db.session.delete(existing)

        db.session.commit()
        return jsonify({'success': True})

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@planning_bp.route('/get_available_periods/<date>')
@login_required
def get_available_periods(date):
    """Retourne les périodes disponibles pour une date avec leur état de planification"""
    try:
        planning_date = datetime.strptime(date, '%Y-%m-%d').date()
        weekday = planning_date.weekday()

        # Récupérer les périodes du jour
        periods = calculate_periods(current_user)

        # Récupérer les plannings existants pour cette date
        existing_plannings = Planning.query.filter_by(
            user_id=current_user.id,
            date=planning_date
        ).all()

        planning_by_period = {p.period_number: p for p in existing_plannings}

        # Récupérer l'horaire type pour ce jour
        schedules = Schedule.query.filter_by(
            user_id=current_user.id,
            weekday=weekday
        ).all()

        schedule_by_period = {s.period_number: s for s in schedules}

        # Construire la réponse
        result_periods = []
        for period in periods:
            period_info = {
                'number': period['number'],
                'start': period['start'].strftime('%H:%M'),
                'end': period['end'].strftime('%H:%M'),
                'hasPlanning': period['number'] in planning_by_period,
                'hasSchedule': period['number'] in schedule_by_period
            }

            if period['number'] in schedule_by_period:
                period_info['defaultClassroom'] = schedule_by_period[period['number']].classroom_id

            result_periods.append(period_info)

        return jsonify({
            'success': True,
            'periods': result_periods
        })

    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500


@planning_bp.route('/lesson')
@login_required
def lesson_view():
    """Affiche la vue du cours actuel ou du prochain cours"""
    from datetime import time as time_type
    from models.student import Student
    from models.attendance import Attendance

    # Obtenir l'heure actuelle et le jour de la semaine
    now = datetime.now()
    current_time = now.time()
    current_date = now.date()
    weekday = current_date.weekday()

    # Déterminer la date de recherche selon l'année scolaire
    search_start_date = current_date

    # Si on est avant le début de l'année scolaire, commencer la recherche au début
    if current_user.school_year_start and current_date < current_user.school_year_start:
        search_start_date = current_user.school_year_start
        # Ajuster weekday pour la date de début
        weekday = search_start_date.weekday()
        # Pour la recherche du premier cours, on ne vérifie pas l'heure actuelle
        current_time = time_type(0, 0)  # Minuit pour prendre tous les cours du jour

    # Récupérer les périodes du jour
    periods = calculate_periods(current_user)

    # Trouver le cours actuel ou le prochain
    current_lesson = None
    next_lesson = None
    is_current = False
    lesson_date = search_start_date

    # Vérifier si on est actuellement en cours (seulement si on est à la date du jour)
    if search_start_date == current_date:
        for period in periods:
            period_start = period['start']
            period_end = period['end']

            # Vérifier si on est dans cette période
            if period_start <= current_time <= period_end:
                # Chercher s'il y a un cours à cette période aujourd'hui
                schedule = Schedule.query.filter_by(
                    user_id=current_user.id,
                    weekday=weekday,
                    period_number=period['number']
                ).first()

                if schedule:
                    current_lesson = schedule
                    is_current = True
                    break

    # Si pas de cours actuel, chercher le prochain
    if not current_lesson:
        # D'abord chercher dans la journée de départ (aujourd'hui ou début d'année)
        for period in periods:
            # Si on est le jour actuel, ne prendre que les périodes futures
            if search_start_date == current_date and period['start'] <= now.time():
                continue

            schedule = Schedule.query.filter_by(
                user_id=current_user.id,
                weekday=weekday,
                period_number=period['number']
            ).first()

            if schedule:
                next_lesson = schedule
                lesson_date = search_start_date
                break

        # Si pas de cours ce jour-là, chercher les jours suivants
        if not next_lesson:
            # Calculer le nombre de jours maximum à chercher
            if current_user.school_year_end:
                max_days = (current_user.school_year_end - search_start_date).days
                # Limiter à 365 jours pour éviter les boucles infinies
                max_days = min(max_days, 365)
            else:
                max_days = 365

            for days_ahead in range(1, max_days + 1):
                future_date = search_start_date + timedelta(days=days_ahead)

                # Vérifier qu'on ne dépasse pas la fin de l'année scolaire
                if current_user.school_year_end and future_date > current_user.school_year_end:
                    break

                future_weekday = future_date.weekday()

                # Ignorer les weekends
                if future_weekday >= 5:
                    continue

                # Vérifier si c'est un jour de vacances
                if is_holiday(future_date, current_user):
                    continue

                # Chercher le premier cours de la journée
                first_schedule = Schedule.query.filter_by(
                    user_id=current_user.id,
                    weekday=future_weekday
                ).order_by(Schedule.period_number).first()

                if first_schedule:
                    next_lesson = first_schedule
                    lesson_date = future_date
                    break

    # Préparer les données pour l'affichage
    lesson = current_lesson or next_lesson

    if not lesson:
        flash('Aucun cours programmé dans votre emploi du temps.', 'info')
        return redirect(url_for('planning.dashboard'))

    # Récupérer la planification si elle existe
    planning = None
    if lesson:
        planning = Planning.query.filter_by(
            user_id=current_user.id,
            date=lesson_date,
            period_number=lesson.period_number
        ).first()

    # Récupérer les élèves de la classe
    students = Student.query.filter_by(
        classroom_id=lesson.classroom_id
    ).order_by(Student.last_name, Student.first_name).all()

    # Récupérer les présences existantes pour ce cours
    attendance_records = {}
    if lesson:
        attendances = Attendance.query.filter_by(
            classroom_id=lesson.classroom_id,
            date=lesson_date,
            period_number=lesson.period_number
        ).all()

        for attendance in attendances:
            attendance_records[attendance.student_id] = {
                'status': attendance.status,
                'late_minutes': attendance.late_minutes,
                'comment': attendance.comment
            }

    # Calculer le temps restant si cours en cours
    remaining_seconds = 0
    time_remaining = ""

    if is_current:
        # Trouver la période actuelle pour avoir l'heure de fin
        current_period = next((p for p in periods if p['number'] == lesson.period_number), None)
        if current_period:
            end_datetime = datetime.combine(current_date, current_period['end'])
            now_datetime = datetime.now()

            if end_datetime > now_datetime:
                remaining_seconds = int((end_datetime - now_datetime).total_seconds())
                hours = remaining_seconds // 3600
                minutes = (remaining_seconds % 3600) // 60

                if hours > 0:
                    time_remaining = f"{hours}:{minutes:02d}:00"
                else:
                    time_remaining = f"{minutes}:{remaining_seconds % 60:02d}"

    return render_template('planning/lesson_view.html',
                         lesson=lesson,
                         planning=planning,
                         is_current=is_current,
                         lesson_date=lesson_date,
                         time_remaining=time_remaining,
                         remaining_seconds=remaining_seconds,
                         students=students,
                         attendance_records=attendance_records)

# Ajoutez cette route après la route lesson_view dans votre fichier planning.py

@planning_bp.route('/manage-classes')
@login_required
def manage_classes():
    """Gestion des classes - élèves, notes, fichiers et chapitres"""
    from models.student import Student, Grade, Chapter, ClassroomChapter

    # Récupérer la classe sélectionnée (par défaut la première)
    selected_classroom_id = request.args.get('classroom', type=int)
    classrooms = current_user.classrooms.all()

    if not classrooms:
        flash('Veuillez d\'abord créer au moins une classe.', 'warning')
        return redirect(url_for('setup.manage_classrooms'))

    # Si aucune classe sélectionnée, prendre la première
    if not selected_classroom_id or not any(c.id == selected_classroom_id for c in classrooms):
        selected_classroom_id = classrooms[0].id

    selected_classroom = Classroom.query.get(selected_classroom_id)

    # Récupérer les données de la classe sélectionnée
    students = Student.query.filter_by(classroom_id=selected_classroom_id).order_by(Student.last_name, Student.first_name).all()

    # Récupérer les notes récentes
    recent_grades = Grade.query.filter_by(classroom_id=selected_classroom_id).order_by(Grade.date.desc()).limit(10).all()

    # Récupérer tous les chapitres de l'utilisateur
    all_chapters = current_user.chapters.order_by(Chapter.order_index).all()

    # Récupérer les chapitres actuels de la classe
    current_chapters = ClassroomChapter.query.filter_by(
        classroom_id=selected_classroom_id,
        is_current=True
    ).all()

    return render_template('planning/manage_classes.html',
                         classrooms=classrooms,
                         selected_classroom=selected_classroom,
                         selected_classroom_id=selected_classroom_id,
                         students=students,
                         recent_grades=recent_grades,
                         all_chapters=all_chapters,
                         current_chapters=current_chapters)


@planning_bp.route('/add-student', methods=['POST'])
@login_required
def add_student():
    """Ajouter un nouvel élève à une classe"""
    from models.student import Student

    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'Aucune donnée reçue'}), 400

    try:
        # Vérifier que la classe appartient à l'utilisateur
        classroom_id = data.get('classroom_id')
        classroom = Classroom.query.filter_by(id=classroom_id, user_id=current_user.id).first()

        if not classroom:
            return jsonify({'success': False, 'message': 'Classe non trouvée'}), 404

        first_name = data.get('first_name', '').strip()
        last_name = data.get('last_name', '').strip()
        email = data.get('email', '').strip() if data.get('email') else None

        # Validation du prénom obligatoire
        if not first_name:
            return jsonify({'success': False, 'message': 'Le prénom est obligatoire'}), 400

        # Vérifier si un élève avec ce prénom existe déjà dans la classe
        existing_student = Student.query.filter_by(
            classroom_id=classroom_id,
            first_name=first_name
        ).first()

        # Si un élève avec ce prénom existe et qu'aucun nom n'est fourni
        if existing_student and not last_name:
            return jsonify({
                'success': False,
                'message': f'Un élève nommé {first_name} existe déjà dans cette classe. Veuillez ajouter un nom de famille pour les différencier.'
            }), 400

        # Créer le nouvel élève
        student = Student(
            classroom_id=classroom_id,
            first_name=first_name,
            last_name=last_name,
            email=email
        )

        db.session.add(student)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'{student.full_name} a été ajouté avec succès',
            'student': {
                'id': student.id,
                'first_name': student.first_name,
                'last_name': student.last_name,
                'full_name': student.full_name,
                'email': student.email,
                'initials': student.first_name[0] + (student.last_name[0] if student.last_name else '')
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500


@planning_bp.route('/delete-student/<int:student_id>', methods=['DELETE'])
@login_required
def delete_student(student_id):
    """Supprimer un élève"""
    from models.student import Student

    try:
        # Vérifier que l'élève existe et appartient à une classe de l'utilisateur
        student = Student.query.join(Classroom).filter(
            Student.id == student_id,
            Classroom.user_id == current_user.id
        ).first()

        if not student:
            return jsonify({'success': False, 'message': 'Élève non trouvé'}), 404

        student_name = student.full_name

        # Supprimer l'élève (les notes seront supprimées automatiquement grâce à cascade)
        db.session.delete(student)
        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'{student_name} a été supprimé avec succès'
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500


@planning_bp.route('/update-student', methods=['PUT'])
@login_required
def update_student():
    """Modifier un élève"""
    from models.student import Student

    data = request.get_json()
    student_id = data.get('student_id')

    if not data or not student_id:
        return jsonify({'success': False, 'message': 'Données invalides'}), 400

    try:
        # Vérifier que l'élève existe et appartient à une classe de l'utilisateur
        student = Student.query.join(Classroom).filter(
            Student.id == student_id,
            Classroom.user_id == current_user.id
        ).first()

        if not student:
            return jsonify({'success': False, 'message': 'Élève non trouvé'}), 404

        # Récupérer les nouvelles valeurs
        first_name = data.get('first_name', '').strip()
        last_name = data.get('last_name', '').strip()
        email = data.get('email', '').strip() if data.get('email') else None

        # Validation du prénom obligatoire
        if not first_name:
            return jsonify({'success': False, 'message': 'Le prénom est obligatoire'}), 400

        # Si le prénom change, vérifier les doublons
        if first_name != student.first_name:
            existing_student = Student.query.filter(
                Student.classroom_id == student.classroom_id,
                Student.first_name == first_name,
                Student.id != student_id
            ).first()

            if existing_student and not last_name:
                return jsonify({
                    'success': False,
                    'message': f'Un autre élève nommé {first_name} existe déjà dans cette classe. Veuillez ajouter un nom de famille pour les différencier.'
                }), 400

        # Mettre à jour l'élève
        student.first_name = first_name
        student.last_name = last_name
        student.email = email

        db.session.commit()

        return jsonify({
            'success': True,
            'message': f'{student.full_name} a été modifié avec succès',
            'student': {
                'id': student.id,
                'first_name': student.first_name,
                'last_name': student.last_name,
                'full_name': student.full_name,
                'email': student.email,
                'initials': student.first_name[0] + (student.last_name[0] if student.last_name else '')
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500


@planning_bp.route('/get-student/<int:student_id>')
@login_required
def get_student(student_id):
    """Récupérer les informations d'un élève"""
    from models.student import Student

    try:
        # Vérifier que l'élève existe et appartient à une classe de l'utilisateur
        student = Student.query.join(Classroom).filter(
            Student.id == student_id,
            Classroom.user_id == current_user.id
        ).first()

        if not student:
            return jsonify({'success': False, 'message': 'Élève non trouvé'}), 404

        return jsonify({
            'success': True,
            'student': {
                'id': student.id,
                'first_name': student.first_name,
                'last_name': student.last_name or '',
                'email': student.email or ''
            }
        })

    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@planning_bp.route('/update-attendance', methods=['POST'])
@login_required
def update_attendance():
    """Mettre à jour la présence d'un élève"""
    from models.attendance import Attendance
    from models.student import Student

    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'Aucune donnée reçue'}), 400

    try:
        student_id = data.get('student_id')
        classroom_id = data.get('classroom_id')
        date_str = data.get('date')
        period_number = data.get('period_number')
        status = data.get('status', 'present')
        late_minutes = data.get('late_minutes')

        # Convertir la date
        date = datetime.strptime(date_str, '%Y-%m-%d').date()

        # Vérifier que l'élève appartient à une classe de l'utilisateur
        student = Student.query.join(Classroom).filter(
            Student.id == student_id,
            Classroom.user_id == current_user.id
        ).first()

        if not student:
            return jsonify({'success': False, 'message': 'Élève non trouvé'}), 404

        # Chercher un enregistrement existant
        attendance = Attendance.query.filter_by(
            student_id=student_id,
            date=date,
            period_number=period_number
        ).first()

        if attendance:
            # Mettre à jour l'existant
            attendance.status = status
            attendance.late_minutes = late_minutes if status == 'late' and late_minutes else None
            attendance.updated_at = datetime.utcnow()
        else:
            # Créer un nouveau
            attendance = Attendance(
                student_id=student_id,
                classroom_id=classroom_id,
                user_id=current_user.id,
                date=date,
                period_number=period_number,
                status=status,
                late_minutes=late_minutes if status == 'late' and late_minutes else None
            )
            db.session.add(attendance)

        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Présence mise à jour',
            'attendance': {
                'student_id': student_id,
                'status': status,
                'late_minutes': attendance.late_minutes
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500


@planning_bp.route('/get-attendance-stats/<date>/<int:period>')
@login_required
def get_attendance_stats(date, period):
    """Obtenir les statistiques de présence pour un cours"""
    from models.attendance import Attendance

    try:
        # Convertir la date
        course_date = datetime.strptime(date, '%Y-%m-%d').date()

        # Récupérer toutes les présences pour ce cours
        attendances = Attendance.query.filter_by(
            user_id=current_user.id,
            date=course_date,
            period_number=period
        ).all()

        stats = {
            'present': 0,
            'absent': 0,
            'late': 0,
            'total': 0
        }

        for attendance in attendances:
            stats['total'] += 1
            stats[attendance.status] += 1

        return jsonify({
            'success': True,
            'stats': stats
        })

    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@planning_bp.route('/save-lesson-planning', methods=['POST'])
@login_required
def save_lesson_planning():
    """Sauvegarder la planification depuis la vue leçon"""
    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'Aucune donnée reçue'}), 400

    try:
        date_str = data.get('date')
        period_number = data.get('period_number')
        classroom_id = data.get('classroom_id')
        title = data.get('title', '').strip()
        description = data.get('description', '').strip()
        checklist_states = data.get('checklist_states', {})

        # Convertir la date
        planning_date = datetime.strptime(date_str, '%Y-%m-%d').date()

        # Vérifier la classe
        classroom = Classroom.query.filter_by(id=classroom_id, user_id=current_user.id).first()
        if not classroom:
            return jsonify({'success': False, 'message': 'Classe non trouvée'}), 404

        # Chercher un planning existant
        existing = Planning.query.filter_by(
            user_id=current_user.id,
            date=planning_date,
            period_number=period_number
        ).first()

        if existing:
            # Mettre à jour
            existing.classroom_id = classroom_id
            existing.title = title
            existing.description = description
            existing.set_checklist_states(checklist_states)
        else:
            # Créer nouveau
            planning = Planning(
                user_id=current_user.id,
                classroom_id=classroom_id,
                date=planning_date,
                period_number=period_number,
                title=title,
                description=description
            )
            planning.set_checklist_states(checklist_states)
            db.session.add(planning)

        db.session.commit()

        return jsonify({
            'success': True,
            'message': 'Planification enregistrée avec succès',
            'planning': {
                'title': title,
                'description': description
            }
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500
# Vérifier que cette route existe à la fin du fichier routes/planning.py
# Si elle n'existe pas, l'ajouter après la route save_lesson_planning

@planning_bp.route('/update-checklist-states', methods=['POST'])
@login_required
def update_checklist_states():
    """Mettre à jour uniquement les états des checkboxes"""
    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'Aucune donnée reçue'}), 400

    try:
        date_str = data.get('date')
        period_number = data.get('period_number')
        checklist_states = data.get('checklist_states', {})

        # Convertir la date
        planning_date = datetime.strptime(date_str, '%Y-%m-%d').date()

        # Chercher le planning existant
        planning = Planning.query.filter_by(
            user_id=current_user.id,
            date=planning_date,
            period_number=period_number
        ).first()

        if planning:
            # Mettre à jour les états des checkboxes
            planning.set_checklist_states(checklist_states)
            db.session.commit()

            return jsonify({
                'success': True,
                'message': 'États des checkboxes mis à jour'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Planification non trouvée'
            }), 404

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@planning_bp.route('/get_planning/<date>/<int:period>')
@login_required
def get_planning(date, period):
    try:
        planning_date = datetime.strptime(date, '%Y-%m-%d').date()
        planning = Planning.query.filter_by(
            user_id=current_user.id,
            date=planning_date,
            period_number=period
        ).first()

        if planning:
            return jsonify({
                'success': True,
                'planning': {
                    'classroom_id': planning.classroom_id,
                    'title': planning.title,
                    'description': planning.description,
                    'checklist_states': planning.get_checklist_states()  # Ajouter les états des checkboxes
                }
            })
        else:
            # Retourner l'horaire type par défaut
            weekday = planning_date.weekday()
            schedule = Schedule.query.filter_by(
                user_id=current_user.id,
                weekday=weekday,
                period_number=period
            ).first()

            if schedule:
                return jsonify({
                    'success': True,
                    'planning': {
                        'classroom_id': schedule.classroom_id,
                        'title': '',
                        'description': '',
                        'checklist_states': {}
                    }
                })

        return jsonify({'success': True, 'planning': None})

    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500




================================================================================
FICHIER: schedule.py
LOCALISATION: routes/schedule.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/routes/schedule.py
================================================================================

from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify
from flask_login import login_required, current_user
from extensions import db
from models.classroom import Classroom
from models.schedule import Schedule
from datetime import datetime, time, timedelta

schedule_bp = Blueprint('schedule', __name__, url_prefix='/schedule')

def calculate_periods(user):
    """Calcule les périodes en fonction de la configuration de l'utilisateur"""
    periods = []
    start_time = datetime.combine(datetime.today(), user.day_start_time)
    end_time = datetime.combine(datetime.today(), user.day_end_time)

    # Récupérer les pauses majeures
    major_breaks = [(b.start_time, b.end_time) for b in user.breaks.filter_by(is_major_break=True).all()]

    current_time = start_time
    period_number = 1

    while current_time < end_time:
        period_end = current_time + timedelta(minutes=user.period_duration)

        # Vérifier si cette période chevauche avec une pause majeure
        period_start_time = current_time.time()
        period_end_time = period_end.time()

        is_before_major_break = False
        for break_start, break_end in major_breaks:
            if period_end_time >= break_start and period_start_time < break_start:
                # La période se termine au début de la pause majeure
                period_end = datetime.combine(datetime.today(), break_start)
                is_before_major_break = True
                break

        periods.append({
            'number': period_number,
            'start': current_time.time(),
            'end': period_end.time()
        })

        # Calculer le prochain début de période
        if is_before_major_break:
            # Trouver la fin de la pause majeure
            for break_start, break_end in major_breaks:
                if period_end.time() == break_start:
                    current_time = datetime.combine(datetime.today(), break_end)
                    break
        else:
            # Ajouter la pause intercours normale
            current_time = period_end + timedelta(minutes=user.break_duration)

        period_number += 1

        # Vérifier si on dépasse la fin de journée
        if current_time >= end_time:
            break

    return periods

@schedule_bp.route('/weekly')
@login_required
def weekly_schedule():
    # Vérifier d'abord que la configuration de base est complète
    if not current_user.school_year_start or not current_user.day_start_time:
        flash('Veuillez d\'abord compléter la configuration initiale.', 'warning')
        return redirect(url_for('setup.initial_setup'))

    if current_user.classrooms.count() == 0:
        flash('Veuillez d\'abord ajouter au moins une classe.', 'warning')
        return redirect(url_for('setup.manage_classrooms'))

    # Si déjà complété, proposer d'aller au tableau de bord
    if current_user.schedule_completed:
        flash('Votre horaire type est déjà configuré. Vous pouvez le modifier ici.', 'info')

    classrooms = current_user.classrooms.all()

    # Convertir les classrooms en dictionnaires pour JSON
    classrooms_dict = [{
        'id': c.id,
        'name': c.name,
        'subject': c.subject,
        'color': c.color
    } for c in classrooms]

    periods = calculate_periods(current_user)

    # Convertir les périodes pour JSON
    periods_json = []
    for period in periods:
        periods_json.append({
            'number': period['number'],
            'start': period['start'].strftime('%H:%M'),
            'end': period['end'].strftime('%H:%M')
        })

    schedules = current_user.schedules.all()

    # Organiser les horaires par jour et période
    schedule_grid = {}
    for schedule in schedules:
        key = f"{schedule.weekday}_{schedule.period_number}"
        schedule_grid[key] = schedule

    days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi']

    return render_template('setup/weekly_schedule.html',
                         classrooms=classrooms,
                         classrooms_json=classrooms_dict,
                         periods=periods,
                         periods_json=periods_json,
                         schedule_grid=schedule_grid,
                         days=days)

@schedule_bp.route('/save', methods=['POST'])
@login_required
def save_schedule():
    data = request.get_json()

    if not data:
        return jsonify({'success': False, 'message': 'Aucune donnée reçue'}), 400

    try:
        weekday = data.get('weekday')
        period_number = data.get('period_number')
        classroom_id = data.get('classroom_id')

        # Vérifier si un horaire existe déjà pour ce créneau
        existing = Schedule.query.filter_by(
            user_id=current_user.id,
            weekday=weekday,
            period_number=period_number
        ).first()

        if classroom_id:
            # Vérifier que la classe appartient à l'utilisateur
            classroom = Classroom.query.filter_by(id=classroom_id, user_id=current_user.id).first()
            if not classroom:
                return jsonify({'success': False, 'message': 'Classe non trouvée'}), 404

            # Calculer les heures de début et fin
            periods = calculate_periods(current_user)
            period = next((p for p in periods if p['number'] == period_number), None)
            if not period:
                return jsonify({'success': False, 'message': 'Période non valide'}), 400

            if existing:
                # Mettre à jour
                existing.classroom_id = classroom_id
                existing.start_time = period['start']
                existing.end_time = period['end']
            else:
                # Créer nouveau
                schedule = Schedule(
                    user_id=current_user.id,
                    classroom_id=classroom_id,
                    weekday=weekday,
                    period_number=period_number,
                    start_time=period['start'],
                    end_time=period['end']
                )
                db.session.add(schedule)
        else:
            # Supprimer l'horaire si pas de classe sélectionnée
            if existing:
                db.session.delete(existing)

        db.session.commit()
        return jsonify({'success': True})

    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500

@schedule_bp.route('/validate', methods=['POST'])
@login_required
def validate_schedule():
    # Vérifier qu'il y a au moins un cours dans l'horaire
    schedules_count = current_user.schedules.count()
    if schedules_count == 0:
        flash('Veuillez ajouter au moins un cours dans votre horaire type.', 'warning')
        return redirect(url_for('schedule.weekly_schedule'))

    # Marquer l'horaire comme complété
    current_user.schedule_completed = True
    db.session.commit()

    flash('Horaire type validé avec succès ! Vous pouvez maintenant accéder à votre calendrier.', 'success')
    return redirect(url_for('planning.dashboard'))



================================================================================
FICHIER: setup.py
LOCALISATION: routes/setup.py
CHEMIN COMPLET: /Users/loicstrauch/PycharmProjects/profcalendar/routes/setup.py
================================================================================

from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_required, current_user
from extensions import db
from models.user import User, Holiday, Break
from models.classroom import Classroom
from flask_wtf import FlaskForm
from wtforms import StringField, DateField, TimeField, IntegerField, FieldList, FormField, BooleanField, SubmitField
from wtforms.validators import DataRequired, NumberRange
from datetime import datetime, time
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.vaud_holidays import get_vaud_holidays

setup_bp = Blueprint('setup', __name__, url_prefix='/setup')

class ClassroomForm(FlaskForm):
    name = StringField('Nom de la classe', validators=[DataRequired()])
    subject = StringField('Matière enseignée', validators=[DataRequired()])
    color = StringField('Couleur', validators=[DataRequired()], default='#4F46E5')

class HolidayForm(FlaskForm):
    name = StringField('Nom des vacances/congé', validators=[DataRequired()])
    start_date = DateField('Date de début', validators=[DataRequired()])
    end_date = DateField('Date de fin', validators=[DataRequired()])

class BreakForm(FlaskForm):
    name = StringField('Nom de la pause', validators=[DataRequired()])
    start_time = TimeField('Heure de début', validators=[DataRequired()])
    end_time = TimeField('Heure de fin', validators=[DataRequired()])
    is_major_break = BooleanField('Grande pause (pas de pause intercours après)')

class InitialSetupForm(FlaskForm):
    # Année scolaire
    school_year_start = DateField('Début de l\'année scolaire', validators=[DataRequired()])
    school_year_end = DateField('Fin de l\'année scolaire', validators=[DataRequired()])

    # Horaires
    day_start_time = TimeField('Heure de début des cours', validators=[DataRequired()])
    day_end_time = TimeField('Heure de fin des cours', validators=[DataRequired()])
    period_duration = IntegerField('Durée d\'une période (minutes)', validators=[
        DataRequired(),
        NumberRange(min=30, max=120, message="La durée doit être entre 30 et 120 minutes")
    ])
    break_duration = IntegerField('Durée de la pause intercours (minutes)', validators=[
        DataRequired(),
        NumberRange(min=5, max=30, message="La pause doit être entre 5 et 30 minutes")
    ])

    submit = SubmitField('Valider la configuration')

@setup_bp.route('/initial', methods=['GET', 'POST'])
@login_required
def initial_setup():
    form = InitialSetupForm()

    if form.validate_on_submit():
        # Mise à jour des informations utilisateur
        current_user.school_year_start = form.school_year_start.data
        current_user.school_year_end = form.school_year_end.data
        current_user.day_start_time = form.day_start_time.data
        current_user.day_end_time = form.day_end_time.data
        current_user.period_duration = form.period_duration.data
        current_user.break_duration = form.break_duration.data

        try:
            db.session.commit()
            flash('Configuration initiale enregistrée avec succès !', 'success')
            return redirect(url_for('setup.manage_classrooms'))
        except Exception as e:
            db.session.rollback()
            flash(f'Erreur lors de la sauvegarde : {str(e)}', 'error')

    # Pré-remplir si déjà configuré
    if current_user.school_year_start:
        form.school_year_start.data = current_user.school_year_start
        form.school_year_end.data = current_user.school_year_end
        form.day_start_time.data = current_user.day_start_time
        form.day_end_time.data = current_user.day_end_time
        form.period_duration.data = current_user.period_duration
        form.break_duration.data = current_user.break_duration

    return render_template('setup/initial_setup.html', form=form)

@setup_bp.route('/classrooms', methods=['GET', 'POST'])
@login_required
def manage_classrooms():
    if request.method == 'POST':
        # Ajouter une nouvelle classe
        form = ClassroomForm()
        if form.validate_on_submit():
            classroom = Classroom(
                user_id=current_user.id,
                name=form.name.data,
                subject=form.subject.data,
                color=form.color.data
            )
            db.session.add(classroom)
            db.session.commit()
            flash(f'Classe "{classroom.name}" ajoutée avec succès !', 'success')
        return redirect(url_for('setup.manage_classrooms'))

    classrooms = current_user.classrooms.all()
    form = ClassroomForm()
    return render_template('setup/manage_classrooms.html', classrooms=classrooms, form=form)

@setup_bp.route('/classrooms/<int:id>/delete', methods=['POST'])
@login_required
def delete_classroom(id):
    classroom = Classroom.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    db.session.delete(classroom)
    db.session.commit()
    flash(f'Classe "{classroom.name}" supprimée avec succès.', 'info')
    return redirect(url_for('setup.manage_classrooms'))

@setup_bp.route('/holidays', methods=['GET', 'POST'])
@login_required
def manage_holidays():
    if request.method == 'POST':
        form = HolidayForm()
        if form.validate_on_submit():
            holiday = Holiday(
                user_id=current_user.id,
                name=form.name.data,
                start_date=form.start_date.data,
                end_date=form.end_date.data
            )
            db.session.add(holiday)
            db.session.commit()
            flash(f'Période de vacances "{holiday.name}" ajoutée avec succès !', 'success')
        return redirect(url_for('setup.manage_holidays'))

    holidays = current_user.holidays.all()
    form = HolidayForm()
    return render_template('setup/manage_holidays.html', holidays=holidays, form=form)

@setup_bp.route('/holidays/<int:id>/delete', methods=['POST'])
@login_required
def delete_holiday(id):
    holiday = Holiday.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    db.session.delete(holiday)
    db.session.commit()
    flash(f'Période de vacances "{holiday.name}" supprimée avec succès.', 'info')
    return redirect(url_for('setup.manage_holidays'))

@setup_bp.route('/breaks', methods=['GET', 'POST'])
@login_required
def manage_breaks():
    if request.method == 'POST':
        form = BreakForm()
        if form.validate_on_submit():
            break_obj = Break(
                user_id=current_user.id,
                name=form.name.data,
                start_time=form.start_time.data,
                end_time=form.end_time.data,
                is_major_break=form.is_major_break.data
            )
            db.session.add(break_obj)
            db.session.commit()
            flash(f'Pause "{break_obj.name}" ajoutée avec succès !', 'success')
        return redirect(url_for('setup.manage_breaks'))

    breaks = current_user.breaks.all()
    form = BreakForm()
    return render_template('setup/manage_breaks.html', breaks=breaks, form=form)

@setup_bp.route('/holidays/import_vaud', methods=['POST'])
@login_required
def import_vaud_holidays():
    """Importe automatiquement les vacances scolaires vaudoises"""
    if not current_user.school_year_start:
        flash('Veuillez d\'abord configurer l\'année scolaire.', 'warning')
        return redirect(url_for('setup.initial_setup'))

    # Récupérer les vacances pour l'année scolaire
    holidays = get_vaud_holidays(current_user.school_year_start)

    if not holidays:
        flash('Aucune donnée de vacances disponible pour cette année scolaire.', 'warning')
        return redirect(url_for('setup.manage_holidays'))

    # Supprimer les anciennes vacances si demandé
    if request.form.get('replace_existing') == 'true':
        Holiday.query.filter_by(user_id=current_user.id).delete()

    # Ajouter les nouvelles vacances
    for holiday_data in holidays:
        # Vérifier si cette période existe déjà
        existing = Holiday.query.filter_by(
            user_id=current_user.id,
            name=holiday_data['name'],
            start_date=holiday_data['start']
        ).first()

        if not existing:
            holiday = Holiday(
                user_id=current_user.id,
                name=holiday_data['name'],
                start_date=holiday_data['start'],
                end_date=holiday_data['end']
            )
            db.session.add(holiday)

    try:
        db.session.commit()
        flash(f'{len(holidays)} périodes de vacances importées avec succès !', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Erreur lors de l\'import : {str(e)}', 'error')

    return redirect(url_for('setup.manage_holidays'))

@setup_bp.route('/validate_setup', methods=['POST'])
@login_required
def validate_setup():
    """Valide que la configuration de base est complète"""
    # Vérifier que toutes les informations de base sont présentes
    if not current_user.school_year_start or not current_user.day_start_time:
        flash('Veuillez compléter la configuration initiale.', 'warning')
        return redirect(url_for('setup.initial_setup'))

    if current_user.classrooms.count() == 0:
        flash('Veuillez ajouter au moins une classe.', 'warning')
        return redirect(url_for('setup.manage_classrooms'))

    # Marquer la configuration de base comme complète
    current_user.setup_completed = True
    db.session.commit()

    flash('Configuration de base validée ! Créez maintenant votre horaire type.', 'success')
    return redirect(url_for('schedule.weekly_schedule'))

@setup_bp.route('/breaks/<int:id>/delete', methods=['POST'])
@login_required
def delete_break(id):
    break_obj = Break.query.filter_by(id=id, user_id=current_user.id).first_or_404()
    db.session.delete(break_obj)
    db.session.commit()
    flash(f'Pause "{break_obj.name}" supprimée avec succès.', 'info')
    return redirect(url_for('setup.manage_breaks'))



================================================================================
RÉSUMÉ DE LA CONSOLIDATION
================================================================================
Fichiers traités: 50
Lignes totales: 13802
Extensions incluses: .py, .html, .css, .js, .jsx, .ts, .tsx, .vue, .php, .java, .cpp, .c, .h, .json, .xml, .sql, .md, .txt, .yml, .yaml
================================================================================
