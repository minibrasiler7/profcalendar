#!/usr/bin/env python3
"""
Sc√©narios de test pour ProfCalendar - Rapport de tests
"""

import requests
import json
from datetime import datetime

class TestRunner:
    def __init__(self, base_url="http://127.0.0.1:5001"):
        self.base_url = base_url
        self.session = requests.Session()
        self.test_results = []
        
    def log_test(self, test_name, status, details=""):
        """Enregistrer le r√©sultat d'un test"""
        result = {
            "test": test_name,
            "status": status,  # "PASS", "FAIL", "ERROR"
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{'‚úÖ' if status == 'PASS' else '‚ùå' if status == 'FAIL' else '‚ö†Ô∏è'} {test_name}: {status}")
        if details:
            print(f"   üìù {details}")
    
    def test_teacher_login(self, email, password, expected_success=True):
        """Test de connexion enseignant"""
        try:
            response = self.session.post(f"{self.base_url}/auth/login", data={
                "email": email,
                "password": password
            }, allow_redirects=False)
            
            if expected_success:
                if response.status_code in [200, 302]:
                    self.log_test(f"Connexion enseignant {email}", "PASS")
                    return True
                else:
                    self.log_test(f"Connexion enseignant {email}", "FAIL", f"Status: {response.status_code}")
                    return False
            else:
                if response.status_code not in [200, 302]:
                    self.log_test(f"Connexion refus√©e {email}", "PASS")
                    return True
                else:
                    self.log_test(f"Connexion refus√©e {email}", "FAIL", "Connexion r√©ussie alors qu'elle devrait √©chouer")
                    return False
        except Exception as e:
            self.log_test(f"Connexion enseignant {email}", "ERROR", str(e))
            return False
    
    def test_parent_login(self, email, password, expected_success=True):
        """Test de connexion parent"""
        try:
            response = self.session.post(f"{self.base_url}/parent/login", data={
                "email": email,
                "password": password
            }, allow_redirects=False)
            
            if expected_success:
                if response.status_code in [200, 302]:
                    self.log_test(f"Connexion parent {email}", "PASS")
                    return True
                else:
                    self.log_test(f"Connexion parent {email}", "FAIL", f"Status: {response.status_code}")
                    return False
            else:
                if response.status_code not in [200, 302]:
                    self.log_test(f"Connexion refus√©e parent {email}", "PASS")
                    return True
                else:
                    self.log_test(f"Connexion refus√©e parent {email}", "FAIL", "Connexion r√©ussie alors qu'elle devrait √©chouer")
                    return False
        except Exception as e:
            self.log_test(f"Connexion parent {email}", "ERROR", str(e))
            return False
    
    def test_page_access(self, url, expected_status=200, test_name=None):
        """Test d'acc√®s √† une page"""
        if not test_name:
            test_name = f"Acc√®s √† {url}"
        
        try:
            response = self.session.get(f"{self.base_url}{url}", allow_redirects=False)
            if response.status_code == expected_status:
                self.log_test(test_name, "PASS")
                return True
            else:
                self.log_test(test_name, "FAIL", f"Status: {response.status_code}, attendu: {expected_status}")
                return False
        except Exception as e:
            self.log_test(test_name, "ERROR", str(e))
            return False
    
    def test_collaboration_restrictions(self):
        """Test des restrictions de collaboration"""
        # Test que les enseignants sp√©cialis√©s ne peuvent pas devenir ma√Ætres
        try:
            response = self.session.get(f"{self.base_url}/collaboration/")
            if response.status_code == 200:
                # V√©rifier si la page contient les bonnes restrictions
                content = response.text
                if "D√©j√† un Ma√Ætre" in content or "devient ma√Ætre" not in content:
                    self.log_test("Restrictions collaboration", "PASS", "Restrictions visibles dans l'interface")
                    return True
                else:
                    self.log_test("Restrictions collaboration", "FAIL", "Restrictions non appliqu√©es dans l'interface")
                    return False
            else:
                self.log_test("Restrictions collaboration", "FAIL", f"Impossible d'acc√©der √† la page: {response.status_code}")
                return False
        except Exception as e:
            self.log_test("Restrictions collaboration", "ERROR", str(e))
            return False
    
    def test_parent_data_aggregation(self, student_id=1):
        """Test d'agr√©gation des donn√©es parent"""
        try:
            # Test grades
            response = self.session.get(f"{self.base_url}/parent/student/{student_id}/grades")
            if response.status_code == 200:
                data = response.json()
                if "subjects_data" in data and "all_evaluations" in data:
                    self.log_test("Agr√©gation donn√©es notes parent", "PASS")
                else:
                    self.log_test("Agr√©gation donn√©es notes parent", "FAIL", "Structure de donn√©es incorrecte")
                    return False
            else:
                self.log_test("Agr√©gation donn√©es notes parent", "FAIL", f"Status: {response.status_code}")
                return False
            
            # Test attendance
            response = self.session.get(f"{self.base_url}/parent/student/{student_id}/attendance")
            if response.status_code == 200:
                data = response.json()
                if "attendance_data" in data:
                    self.log_test("Agr√©gation donn√©es pr√©sence parent", "PASS")
                else:
                    self.log_test("Agr√©gation donn√©es pr√©sence parent", "FAIL", "Structure de donn√©es incorrecte")
                    return False
            else:
                self.log_test("Agr√©gation donn√©es pr√©sence parent", "FAIL", f"Status: {response.status_code}")
                return False
            
            return True
        except Exception as e:
            self.log_test("Agr√©gation donn√©es parent", "ERROR", str(e))
            return False
    
    def run_all_tests(self):
        """Ex√©cuter tous les tests"""
        print("üß™ D√âBUT DES TESTS PROFCALENDAR")
        print("=" * 50)
        
        # Tests de base - v√©rification que le serveur r√©pond
        print("\nüì° Tests de connectivit√©")
        self.test_page_access("/", 200, "Page d'accueil accessible")
        self.test_page_access("/auth/login", 200, "Page de connexion enseignant accessible")
        self.test_page_access("/parent/login", 200, "Page de connexion parent accessible")
        
        # Tests de connexion avec des comptes fictifs pour v√©rifier la logique
        print("\nüîê Tests de connexion")
        # Ces tests vont √©chouer car les comptes n'existent pas, mais on v√©rifie la logique
        self.test_teacher_login("test@test.com", "wrongpass", expected_success=False)
        self.test_parent_login("test@test.com", "wrongpass", expected_success=False)
        
        # Tests d'acc√®s aux pages prot√©g√©es (doivent rediriger)
        print("\nüõ°Ô∏è Tests de s√©curit√©")
        self.test_page_access("/planning/manage_classes", 302, "Redirection page prot√©g√©e enseignant")
        self.test_page_access("/parent/dashboard", 302, "Redirection page prot√©g√©e parent")
        self.test_page_access("/collaboration/", 302, "Redirection page collaboration")
        
        # Tests d'API sans authentification (doivent √©chouer)
        print("\nüîí Tests API sans auth")
        self.test_page_access("/parent/student/1/grades", 302, "API parent prot√©g√©e")
        self.test_page_access("/planning/add-student", 405, "API enseignant prot√©g√©e")
        
        print("\n" + "=" * 50)
        print("üìä R√âSUM√â DES TESTS")
        
        total_tests = len(self.test_results)
        passed = len([t for t in self.test_results if t["status"] == "PASS"])
        failed = len([t for t in self.test_results if t["status"] == "FAIL"])
        errors = len([t for t in self.test_results if t["status"] == "ERROR"])
        
        print(f"Total: {total_tests}")
        print(f"‚úÖ R√©ussis: {passed}")
        print(f"‚ùå √âchou√©s: {failed}")
        print(f"‚ö†Ô∏è Erreurs: {errors}")
        print(f"üìà Taux de r√©ussite: {(passed/total_tests*100):.1f}%")
        
        # Rapport d√©taill√© des probl√®mes
        problems = [t for t in self.test_results if t["status"] in ["FAIL", "ERROR"]]
        if problems:
            print(f"\nüö® PROBL√àMES D√âTECT√âS ({len(problems)}):")
            for problem in problems:
                print(f"‚Ä¢ {problem['test']}: {problem['status']}")
                if problem['details']:
                    print(f"  ‚Üí {problem['details']}")
        
        return self.test_results

def manual_test_scenarios():
    """Sc√©narios de test manuels √† effectuer"""
    
    print("\n" + "=" * 60)
    print("üìã SC√âNARIOS DE TEST MANUELS √Ä EFFECTUER")
    print("=" * 60)
    
    scenarios = [
        {
            "category": "üîê Authentification",
            "tests": [
                "Se connecter avec un compte enseignant valide",
                "Se connecter avec un compte parent valide", 
                "Tenter une connexion avec des identifiants invalides",
                "V√©rifier la d√©connexion automatique apr√®s timeout",
                "Tester l'acc√®s aux pages prot√©g√©es sans connexion"
            ]
        },
        {
            "category": "üë®‚Äçüè´ Gestion Enseignants",
            "tests": [
                "Cr√©er une nouvelle classe",
                "Ajouter des √©l√®ves √† une classe",
                "Modifier les informations d'un √©l√®ve",
                "Supprimer un √©l√®ve d'une classe",
                "Cr√©er des √©valuations et attribuer des notes",
                "G√©rer les pr√©sences/absences",
                "Appliquer des sanctions (coches)"
            ]
        },
        {
            "category": "ü§ù Collaborations",
            "tests": [
                "Devenir ma√Ætre de classe pour une classe originale",
                "G√©n√©rer un code d'acc√®s pour collaboration",
                "Se lier √† un ma√Ætre de classe avec un code",
                "Cr√©er une classe d√©riv√©e depuis une collaboration",
                "V√©rifier qu'un enseignant sp√©cialis√© ne peut pas devenir ma√Ætre de sa classe d√©riv√©e",
                "V√©rifier qu'une classe avec ma√Ætre ne peut avoir un second ma√Ætre",
                "Tester la suppression d'une collaboration",
                "V√©rifier que les donn√©es des classes d√©riv√©es sont supprim√©es"
            ]
        },
        {
            "category": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Interface Parents", 
            "tests": [
                "Inscription d'un nouveau parent",
                "Liaison parent-enseignant avec code classe",
                "Ajout d'un enfant suppl√©mentaire dans une autre classe",
                "Consultation des notes d'un enfant (tableau unifi√©)",
                "V√©rification des couleurs TA vs notes normales",
                "Consultation des absences/retards",
                "Consultation des sanctions (coches)",
                "Soumission d'une justification d'absence",
                "V√©rifier l'agr√©gation des donn√©es multi-classes"
            ]
        },
        {
            "category": "üìä Donn√©es Multi-Classes",
            "tests": [
                "√âl√®ve pr√©sent dans classe originale ET d√©riv√©e",
                "Notes dans les deux classes visibles pour les parents", 
                "Absences dans les deux classes agr√©g√©es",
                "Sanctions dans les deux classes agr√©g√©es",
                "Modification d'un √©l√®ve dans classe originale",
                "V√©rifier la synchronisation avec classe d√©riv√©e"
            ]
        },
        {
            "category": "üîí S√©curit√© & Permissions",
            "tests": [
                "Enseignant sp√©cialis√© ne peut modifier que ses √©l√®ves",
                "Enseignant sp√©cialis√© ne peut ajouter que des √©l√®ves du ma√Ætre",
                "Parent ne peut voir que ses enfants",
                "Tentative d'acc√®s direct aux donn√©es d'autres utilisateurs",
                "V√©rification des CSRF tokens sur les formulaires",
                "Test d'injection SQL dans les champs de recherche"
            ]
        },
        {
            "category": "üêõ Cas Limites",
            "tests": [
                "Suppression d'un √©l√®ve ayant des notes/absences/sanctions",
                "Suppression d'une classe avec des collaborations",
                "Ma√Ætre de classe qui supprime sa ma√Ætrise",
                "Code d'acc√®s expir√© ou √©puis√©",
                "Parent li√© √† plusieurs enseignants",
                "√âl√®ve sans email parent",
                "Classe sans √©l√®ves",
                "√âvaluation sans notes",
                "Caract√®res sp√©ciaux dans les noms"
            ]
        }
    ]
    
    for scenario in scenarios:
        print(f"\n{scenario['category']}")
        print("-" * 40)
        for i, test in enumerate(scenario['tests'], 1):
            print(f"{i:2d}. {test}")
    
    print(f"\nüí° POINTS D'ATTENTION PARTICULIERS")
    print("-" * 40)
    print("1. V√©rifier que les enseignants sp√©cialis√©s ne voient PAS le bouton 'Devenir Ma√Ætre'")
    print("2. Confirmer que les notes TA sont en violet dans l'interface parent")
    print("3. Tester l'agr√©gation des donn√©es parent avec des √©l√®ves dans plusieurs classes")
    print("4. V√©rifier que la suppression d'une collaboration supprime bien les classes d√©riv√©es")
    print("5. Confirmer que les permissions d'√©dition d'√©l√®ves sont respect√©es")
    print("6. Tester les cas o√π un √©l√®ve existe dans classe originale mais pas d√©riv√©e")
    print("7. V√©rifier la gestion des erreurs pour les √©l√®ves sans donn√©es parent")

if __name__ == "__main__":
    # Tests automatis√©s
    runner = TestRunner()
    results = runner.run_all_tests()
    
    # Sc√©narios manuels
    manual_test_scenarios()
    
    print(f"\nüéØ RECOMMANDATIONS")
    print("=" * 50)
    print("1. Cr√©er les comptes de test avec le script SQL/Python")
    print("2. Effectuer les tests manuels dans l'ordre des cat√©gories")
    print("3. Noter tous les probl√®mes rencontr√©s avec captures d'√©cran")
    print("4. Tester sur diff√©rents navigateurs (Chrome, Firefox, Safari)")
    print("5. V√©rifier le responsive design sur mobile/tablette")
    print("6. Tester les performances avec beaucoup de donn√©es")